#To edit and compare internal_properties, use WINDEV integrated tools.
#Internal properties refer to the properties of controls in windows, reports, etc.
info :
 name : SecurePayment
 major_version : 28
 minor_version : 0
 type : 4
 description : ""
 subtype : 0
class :
 identifier : 0x1ecf75f5096fb92b
 internal_properties : CAAAAAgAAAB2/vstTMCJbS/hlxjFxirSqKvCUuv8YxgpWyl7S3iA
 code_elements :
  internal_properties : CAAAAAgAAADu4YPhZDv1alZUtAEAX7A1egk53ZxTAoeYDwELMSTKYHrFvV8P6E6UofN39QzYRwMplnfcUYRcx+F1/XaBO9dlO4S0EJAvy9TIoELc66rFitSM0giJupT1hf7hRvNm076hn97oKK0XID4ZvyLpT8Kz2NDcw0Y93F9Zh86lYimZPhjeBvkL9a5/T2gwhIJtGqghZOenwVOblAjjCHtdMv4pigGucSIe1AdfE7aRs1IWIS8v4LkGBZoISxAZHs4gafMlCHtJvPzUQ5tkJRGs3vIxS7EipdRwYtDkeO6T8w==
  type_code : 10
  p_codes :
   -
     internal_properties : CAAAAAgAAAAkrzOnpUH/2ADjNMvaf04h/X/1MLfMPDYLACHVleyVxj1MLkz6y9iwNVcK51LI9BtkisdrHYsWwacQDUawI8lM5hfNz36swYIuJ0IN2NkwMsCN1Qrf725J9Zyz/pv+ynOR/KdzeznFyZZLJWDOWgL0hvAO9XvAYpVkkYIWA/lUvjeRPrTSZi2I/hX1SUi282uIjSVSNVnbKo/1WPVOpXykp2sDGWJiT5xT9vq3DNNA7hN2v9tWKGZjhAoNMM5zSG4y8UGXYPX4q5hZL8Prugx9jFX0wY7M2SCEuGjds2xlNYLfnSsbfxHC9UoT23IkvaOpWXUJ9kCQOEB+4Yph477NW/uIbDpB9aOYwR0yeMwoHVyiSzgLsA==
     code : |1+
      constant
      	PAYBOX_TYPE_AUTHORIZATION						= 	"00001"
      	PAYBOX_TYPE_DEBIT_UPON_AUTHORIZATION				= 	"00002"
      	PAYBOX_TYPE_AUTHORIZATION_AND_DEBIT				= 	"00003"
      	PAYBOX_TYPE_CREDIT								= 	"00004"
      	PAYBOX_TYPE_CANCELLATION							= 	"00005"
               
      	PAYBOX_TYPE_TRANSACTION_VERIFY					= 	"00011"
      	PAYBOX_TYPE_TRANSACTION_WITHOUT_AUTHORIZATION		= 	"00012"
      	PAYBOX_TYPE_REFUND						= 	"00014"
      	PAYBOX_TYPE_TRANSACTION_CONSULTATION			= 	"00017"
               
      	PAYBOX_TYPE_SUBSCRIPTION_AUTHORIZATION					= 	"00051"
      	PAYBOX_TYPE_SUBSCRIPTION_DEBIT_UPON_AUTHORIZATION		= 	"00052"
      	PAYBOX_TYPE_SUBSCRIPTION_AUTHORIZATION_AND_DEBIT		= 	"00053"
      	PAYBOX_TYPE_SUBSCRIPTION_CREDIT						= 	"00054"
      	PAYBOX_TYPE_SUBSCRIPTION_REFUND				= 	"00055"
      	PAYBOX_TYPE_SUBSCRIPTION_DEBIT_AND_SAVE			= 	"00056"
      	PAYBOX_TYPE_SUBSCRIPTION_MODIFY						= 	"00057"
      	PAYBOX_TYPE_SUBSCRIPTION_DELETE						= 	"00058"
               
      	PAYBOX_TYPE_TRANSACTION_FORCE					= 	"00061"
      
      	PAYBOX_TYPE_SUBSCRIPTION_SPECIFY					= 	"020"
      	PAYBOX_ACTIVITY_TELEPHONE						= 	"021"
      	PAYBOX_ACTIVITY_CORRESPONDENCE					= 	"022"
      	PAYBOX_ACTIVITY_MINITEL							= 	"023"
      	PAYBOX_ACTIVITY_INTERNET						= 	"024"
      	PAYBOX_ACTIVITY_RECURRENT						= 	"027"
      	
      	
      end
      
      // Describes a form parameter
      FormParameter is Structure
      Name						is string
      Value					is string
      end
      
      // Describes a basket line
      BasketLine is Structure
      ArticleUnitPrice		is currency
      ArticleName				is string
      ArticleDescription		is string
      Quantity				is int
      URL						is string
      end
      
      
      
      // CSecurePayment class
      // Manages the transactions of secure payment
      SecurePayment is class
      	
      private
      	m_nSupplier					is int										// Supplier
      	m_nSimulation					is int										// True (1): test mode (SandBox); False (0): real mode, 2 simulation mode
      	m_sCurrency						is string										// Currency (eEUR by default)
      	m_sLanguage						is string										// Language (FR or US by default)
      	m_sProviderURL				is string										// URL of provider
      	m_sContract						is string										// Contract number, TPE
      	m_sIdentifier					is string										// Identifier, company code
      	m_sRang							is string										// PayBox rang
      	m_sSolutionIdentifier			is string										// vads_contrib Lyra (PayZen)
      	m_sToken						is string										// PayPal token
      	m_sPayerID						is string										// PayPal PayerID
      	m_sFreeText					is string										// Transition text
      	m_sTransactionIdentifier		is string 										// Identifier of customer transaction
      	m_sOrderNumber				is string 										// Number of customer order
      	m_sKeyphrase					is string										// Key sentence (CM-CIC/Ogone payment)
      	m_sSentenceKeyOut					is string										// Key sentence (Ogone)
      	m_sCalculatedKey					is string										// Calculated key (CM-CIC/SIPS 2 payment)
      	m_sKeyVersion					is string										// key version (SIPS 2)
      	m_sInterfaceVersion				is string										// SIPS interface version
      	m_sDirectoryPublicKeyFile	is string										// Directory of data
      	m_sPassword					is string										// Password of data
      	//m_cntConnection					is connection									// Connection 
      	m_sCurrentURL					is string										// Page URL when the payment is performed
      	m_sErrorInfo					is string										// Last error message
      	m_sActPaiementCancelation			is string										// Action during an abandon
      	m_sActPaiementRefused			is string										// Action during a refusal
      	m_sActPaiementAccepted			is string										// Action during a payment
      	m_sActServerCall				is string 										// Action during a server call
      	m_sPathFile						is string										// SogenActif "PathFile"
      	m_sLogoLocation				is string										// Location of logos
      	m_sOgoneUserID					is string										// Ogone USERID
      	m_aaValueTab						is ASSOCIATIVE ARRAY (WithoutDuplicates+ccIgnoreCase) of strings	// NVP parameters of Paypal			
      	m_sPayBackPage					is string										// Page for managing the returns from server to server
      	m_sPageBackToStore			is string										// Page for managing the returns to the store
      	m_bCheckPayBoxSignature		is boolean										// Flag for checking the PayBox signatures
      	m_sMACKey						is string										// MAC key
      	m_sMACKeyReturn					is string										// MAC key
      	//m_bActiveLogReturnPayment		is boolean										// Activation flag of return logs
      	m_aaIPAddressBankServers		is ASSOCIATIVE ARRAY (ccIgnoreCase+WithoutDuplicates) of booleans
      	m_sVariousCustomize			is string
      	m_cyAmount						is currency
      	m_sEmailAddress					is string
      	m_arrFormParameters		is array of FormParameter
      	m_aaParamDelPaymentForm is ASSOCIATIVE ARRAY (ccIgnoreCase+WithoutDuplicates) of strings
      	
      	m_nTransactionID				is 8-byte unsigned int
      	m_DisplayFormat				is FormatPaymentSite							// Format of payment page
      	m_sNameAtosSupplier			is string
      	m_sSupplierName_SIPS2			is string
      	m_bDirectMode					is boolean
      	m_bMode3DS						is boolean
      	
      	m_sUserAccountStartup 	is string
      	m_sPasswordAccountStartup  	is string
      	
      	m_bIgnoreTestPaybackPage		is boolean
      	
      	m_arrBasket 					is array of BasketLine	// PayPal basket
      	
      	// Name of the DLL and URL executables for the different payment modes		
      	m_sEXE_ATOSRequest					is string
      	m_sEXE_ATOSResponse					is string
      	
      	
      	m_sURL_SAFERPAY_CHECK		is string
      	m_sURL_LANGUAGE_SAFERPAY				is string
      	m_sURL_TEST_SAFERPAY_VERIFICATION	is string
      	m_arrPayboxServers 				is array of strings
      	m_arrPayboxDirectServers			is array of strings
      	m_arrPayboxDirect3DSServers		is array of strings
      	m_sPayboxReturnVariables			is string
      	m_sPayboxReturnVariablesWithSubscription	is string
      	
      	m_aaURL_Suppliers				is ASSOCIATIVE ARRAY (*, *, wlInt) of strings
      	m_aaURL_Test_Suppliers			is ASSOCIATIVE ARRAY (*, *, wlInt) of strings
      	m_aaURL_Simu_Suppliers			is ASSOCIATIVE ARRAY (*, *, wlInt) of strings
      	
      	m_nIgnoreHTTPError					is 8-byte int
      	m_nModeHTTPRequest					is int 
      	m_nTimeOutHTTP						is int 
      	m_nVersionSSL						is int 
      	
      	m_AlgorithmHash					is int
      	m_AlgorithmHashToken			is int
      	m_bReturnS2sGet						is boolean
      
      	m_sCookiesSiteBeforePayment			is string
      	
      	//CC info for direct payments
      	m_sCard_Number						is string <Serialize = false> //to avoid saving the card number in the "Transactions" table when serializing
      	m_sCard_CVV						is string //<Serialize = false> 
      	m_sCard_ExpiryDate				is string //<Serialize = false> 
      	m_sCard_Token						is string //<Serialize = false> 
      	m_bCard_Remember					is boolean
      	m_sCard_SubscriptionReference			is string
      	m_sCard_3DSTime					is string //to save the card number temporarily during the 3D Secure phase
      	
      	m_btransactionReference				is boolean
      end
      
      
      
      constant
      	
      	// Versions
      	//CIC_VERSION		= "1.2open"	
      	CIC_VERSION_OLD		= "3.0"	
      	MONETICO_VERSION	= "3.0"	
      	PAYBOX_VERSION		= "v2"
      	PAYPAL_VERSION		= "65.0"//"3.2"
      	SBC_FORM		= "PaymentRequest"
      	BP_MCC				= 5965
      	
      	
      	PARAM_RETURNS2S		= "ps_returns2s=1"	
      	
      	MoneticoPaiement_CTLHMAC		="V1.04.sha1.php--[CtlHmac%1%2]-%3"
      	MoneticoPaiement_CTLHMACSTR	="CtlHmac%1%2"
      	
      	HTML_FORM			= [
      <!doctype html>
      <html>
      	<head>
      		<meta http-equiv="content-type" content="text/html; charset=UTF-8"/>
      		<title>Redirection...</title>
      	</head>
      	<body onload="document.forms[0].submit();">
      		%4
      			<form action="%1" method="post" name="%2" target="_self">
      			%3
      			</form>
      	</body>
      </html>
      	]
      		HTTP_WININET_MODE 	= 1
      		HTTP_NATIVE_MODE 	= 2
      		
      end
     type : 131072
  procedures :
   -
     name : Constructeur
     procedure_id : 2220122836607744299
     type_code : 27
     code : |1+
      // Summary: Creates a new object for secure payment
      // Syntax:
      //Manufacturer (<nProvider> is unsigned 4-byte integer)
      //
      // Parameters:
      //	nProvider (4-byte unsigned integer): Provider of secure payment (PayBox, Cr√©ditMutuel, CIC, OBC, ...)
      // Return value:
      // 	None
      //
      PROC√âDURE Constructor(LOCAL nSupplier is unsigned int)
      
      sLanguage is string
      m_bCheckPayBoxSignature						= True
      
      m_sPayboxReturnVariables					= "amount:M;reference:R;auto:A;trans:T;subs:B;payment:P;card:C;transid:S;error:E;auth:F;3sd:G;countryip:i;countrymap:Y;endcb:J;startcb:N"
      
      m_sPayboxReturnVariablesWithSubscription	= m_sPayboxReturnVariables+";subscard:U"
      m_sPayboxReturnVariables+=";sign:K"
      m_sPayboxReturnVariablesWithSubscription+=";sign:K"
      // Reset errors
      XERROR()
      WHEN EXCEPTION IN
      	DisplayFormat =  (BrowserPlatform() IN (BrowserPlatformAndroid, BrowserPlatformBlackBerry, ...
      	BrowserPlatformiPhone, BrowserPlatformMobile, ...
      	BrowserPlatformWindowsMobile, BrowserPlatformWindowsPhone) ? MobileDevices ELSE Computers)
      	
      DO
      	DisplayFormat=Computers
      END
      
      
      FolderPublicKeyFile=fDataDir()
      //Name of the external elements used
      //DLLs
      //ms_DLLATOS="apipayment.dll"
      IF InLinuxMode() THEN
      	m_sEXE_ATOSRequest	= "request"
      	m_sEXE_ATOSResponse	= "response"
      ELSE
      	m_sEXE_ATOSRequest	= "request.exe"
      	m_sEXE_ATOSResponse	= "response.exe"	
      END
      
      //Paybox servers
      m_arrPayboxServers											= ["tpeweb.paybox.com", "tpeweb1.paybox.com"]
      m_arrPayboxDirectServers									= ["ppps.paybox.com", "ppps.paybox.com"]
      m_arrPayboxDirect3DSServers									= ["tpeweb.paybox.com", "tpeweb0.paybox.com","tpeweb1.paybox.com","tpeweb2.paybox.com"]
      
      //SIPS 2 (ATOS 2)
      m_aaURL_Suppliers[SIPS2						]				= "https://payment-webinit.sips-atos.com"						+"/paymentInit"
      m_aaURL_Suppliers[BNP_SIPS2					]				= "https://payment-webinit.mercanet.bnpparibas.net"				+"/paymentInit"	                                                               
      m_aaURL_Suppliers[Soci√©t√©G√©n√©rale_SIPS2		]				= "https://payment-webinit.sogenactif.com"						+"/paymentInit"    	                                                               
      
      m_aaURL_Test_Suppliers[SIPS2					]			= "https://payment-webinit.test.sips-atos.com"					+"/paymentInit"
      m_aaURL_Test_Suppliers[BNP_SIPS2				]			= "https://payment-webinit-mercanet.test.sips-atos.com"         +"/paymentInit"
      m_aaURL_Test_Suppliers[Soci√©t√©G√©n√©rale_SIPS2	]			= "https://payment-webinit-sogenactif.test.sips-atos.com"       +"/paymentInit"
      
      m_aaURL_Simu_Suppliers[SIPS2					]			= "https://payment-webinit.simu.sips-atos.com"                  +"/paymentInit"
      m_aaURL_Simu_Suppliers[BNP_SIPS2				]			= "https://payment-webinit.simu.mercanet.bnpparibas.net"        +"/paymentInit"
      m_aaURL_Simu_Suppliers[Soci√©t√©G√©n√©rale_SIPS2	]			= "https://payment-webinit.simu.sogenactif.com"                 +"/paymentInit"
      
      //Realex
      m_aaURL_Suppliers[Realex						]			= "https://hpp.realexpayments.com/pay"     
      m_aaURL_Test_Suppliers[Realex				]				= "https://hpp.sandbox.realexpayments.com/pay"
      
      //PAYBOX
      m_aaURL_Suppliers[PayBox						]			= "https://preprod-tpeweb.paybox.com"     	                                                               
      
      
      
      // MoneticoPaiement
      m_aaURL_Suppliers[Cr√©ditMutuelOld			]				= "https://paiement.creditmutuel.fr"							+"/paiement.cgi"
      m_aaURL_Suppliers[CICOld						]			= "https://ssl.paiement.cic-banques.fr"                         +"/paiement.cgi"
      m_aaURL_Suppliers[OBCOld						]			= "https://ssl.paiement.banque-obc.fr"                          +"/paiement.cgi"
      m_aaURL_Test_Suppliers[Cr√©ditMutuelOld		]				= "https://paiement.creditmutuel.fr/test"                       +"/paiement.cgi"
      m_aaURL_Test_Suppliers[CICOld				]				= "https://ssl.paiement.cic-banques.fr/test"                    +"/paiement.cgi"
      m_aaURL_Test_Suppliers[OBCOld				]				= "https://ssl.paiement.banque-obc.fr/test"                     +"/paiement.cgi"
      
      m_aaURL_Suppliers[MoneticoPaiement			]				= "https://p.monetico-services.com"								+"/paiement.cgi" 
      m_aaURL_Test_Suppliers[MoneticoPaiement		]				= "https://p.monetico-services.com/test"        	            +"/paiement.cgi" 
      
      
      // PayPal     
      m_aaURL_Suppliers[PayPal						]			= "https://api-3t.paypal.com/nvp"     
      m_aaURL_Test_Suppliers[PayPal				]				= "https://api-3t.sandbox.paypal.com/nvp"
      
      // Banque populaire         		
      m_aaURL_Suppliers[BanquePopulaire			]				= "https://ecom.cimetz.com/telepaie/cgishell.exe/epaie01.exe"
      m_aaURL_Test_Suppliers[BanquePopulaire		]				= "https://ecom.cimetz.com/telepaie/cgishell.exe/epaie01.exe"  
      
      // Ogone                    		
      m_aaURL_Suppliers[OgoneECommerce				]			= "https://secure.ogone.com/ncol/prod/orderstandard.asp"     
      m_aaURL_Test_Suppliers[OgoneECommerce		]				= "https://secure.ogone.com/ncol/test/orderstandard.asp"
      
      // Lyra
      m_aaURL_Suppliers[Lyra					]					= "https://secure.payzen.eu/vads-payment/"     
      m_aaURL_Suppliers[Systempay				]					= "https://paiement.systempay.fr/vads-payment/"
      m_aaURL_Suppliers[Systempay_old			]					= "https://paiement.systempay.fr/vads-payment/" //for compatibility
      m_aaURL_Suppliers[CaisseEpargne			]					= "https://paiement.systempay.fr/vads-payment/" //for compatibility
      m_aaURL_Suppliers[Cyberplus				]					= "https://paiement.systempay.fr/vads-payment/"
      m_aaURL_Suppliers[SPPLUS					]				= "https://paiement.systempay.fr/vads-payment/"
      m_aaURL_Suppliers[Sogecommerce			]					= "https://sogecommerce.societegenerale.eu/vads-payment/"
      m_aaURL_Suppliers[DGFIP					]					= "https://dgfip.payzen.eu/vads-payment/"
      m_aaURL_Suppliers[PayZen					]				= "https://secure.payzen.eu/vads-payment/"
      m_aaURL_Suppliers[PayZenCr√©ditDuNord		]				= "https://secure.payzen.eu/vads-payment/"
      m_aaURL_Suppliers[PayZenGermany			]					= "https://secure.payzen.eu/vads-payment/"
      m_aaURL_Suppliers[PayZenIndia			]					= "https://secure.payzen.co.in/vads-payment/"	
      m_aaURL_Suppliers[PayZenBrazil			]					= "https://secure.payzen.com.br/vads-payment/"
      m_aaURL_Suppliers[PayZenLatAm			]					= "https://secure.payzen.lat/vads-payment/"	
      m_aaURL_Suppliers[PayZenByOSB			]					= "https://secure.osb.pf/vads-payment/"	
      m_aaURL_Suppliers[EpayNC					]				= "https://epayNC.nc/vads-payment/"
      m_aaURL_Suppliers[Innopay				]					= "https://secure.innopay.ch/vads-payment/"	
      m_aaURL_Suppliers[mPay24					]				= "https://payment.mpay24.com/vads-payment/"
      m_aaURL_Suppliers[BNPPIRB				]					= "https://e-paiement-securite-bici.com/vads-payment/"	           			
      m_aaURL_Suppliers[PayZenDemo				]				= "https://demo.payzen.eu/vads-payment/"   	           			
      
      m_aaURL_Test_Suppliers[Lyra				]					= "https://secure.payzen.eu/vads-payment/"     
      m_aaURL_Test_Suppliers[Systempay			]				= "https://paiement.systempay.fr/vads-payment/"
      m_aaURL_Test_Suppliers[Systempay_old		]				= "https://paiement.systempay.fr/vads-payment/" //for compatibility
      m_aaURL_Test_Suppliers[CaisseEpargne		]				= "https://paiement.systempay.fr/vads-payment/" //for compatibility
      m_aaURL_Test_Suppliers[Cyberplus			]				= "https://paiement.systempay.fr/vads-payment/"
      m_aaURL_Test_Suppliers[SPPLUS			]					= "https://paiement.systempay.fr/vads-payment/"
      m_aaURL_Test_Suppliers[Sogecommerce		]					= "https://sogecommerce.societegenerale.eu/vads-payment/"
      m_aaURL_Test_Suppliers[DGFIP				]				= "https://dgfip.payzen.eu/vads-payment/"
      m_aaURL_Test_Suppliers[PayZen			]					= "https://secure.payzen.eu/vads-payment/"
      m_aaURL_Test_Suppliers[PayZenCr√©ditDuNord]					= "https://secure.payzen.eu/vads-payment/"
      m_aaURL_Test_Suppliers[PayZenGermany		]				= "https://secure.payzen.eu/vads-payment/"
      m_aaURL_Test_Suppliers[PayZenIndia		]					= "https://secure.payzen.co.in/vads-payment/"	
      m_aaURL_Test_Suppliers[PayZenBrazil		]					= "https://secure.payzen.com.br/vads-payment/"
      m_aaURL_Test_Suppliers[PayZenLatAm		]					= "https://secure.payzen.lat/vads-payment/"	
      m_aaURL_Test_Suppliers[PayZenByOSB		]					= "https://secure.osb.pf/vads-payment/"	
      m_aaURL_Test_Suppliers[EpayNC			]					= "https://epayNC.nc/vads-payment/"
      m_aaURL_Test_Suppliers[Innopay			]					= "https://secure.innopay.ch/vads-payment/"	
      m_aaURL_Test_Suppliers[mPay24			]					= "https://payment.mpay24.com/vads-payment/"
      m_aaURL_Test_Suppliers[BNPPIRB			]					= "https://e-paiement-securite-bici.com/vads-payment/"	           				
      m_aaURL_Test_Suppliers[PayZenDemo		]					= "https://demo.payzen.eu/vads-payment/"    
      
      // SaferPay
      m_aaURL_Suppliers[Saferpay			]						= "https://www.saferpay.com/hosting/CreatePayInit.asp"     
      m_aaURL_Test_Suppliers[Saferpay		]						= "https://test.saferpay.com/hosting/CreatePayInit.asp"     
      
      m_sURL_TEST_SAFERPAY_VERIFICATION							= "https://test.saferpay.com/hosting/VerifyPayConfirm.asp"	 
      m_sURL_SAFERPAY_CHECK										= "https://www.saferpay.com/hosting/VerifyPayConfirm.asp"	 
      
      // DataCash Mastercard
      m_aaURL_Suppliers[DataCash_Mastercard]						= "https://migs.mastercard.com.au/vpcpay"     
      m_aaURL_Test_Suppliers[DataCash_Mastercard]					= "https://migs-mtf.mastercard.com.au/vpcpay"     
      
      //datatrans
      m_aaURL_Suppliers[Datatrans			]						= "https://pay.datatrans.com"+"/upp/jsp/upStart.jsp"
      m_aaURL_Test_Suppliers[Datatrans		]					= "https://pay.sandbox.datatrans.com"+"/upp/jsp/upStart.jsp"
      
      m_sURL_LANGUAGE_SAFERPAY									= "https://www.saferpay.com/vt/xml/language.xml"
      
      // Defines the provider
      Supplier													= nSupplier
      
      // "EUR" currency by default
      CurrencyCode												= eEUR
      TokenAlgorithmHash											= HA_HMAC_SHA_256
      AlgorithmHash												= HA_SHA_256
      sLanguage													= "FR"
      // Default language
      SWITCH True
      	CASE (Supplier & Lyra) = Lyra, Supplier = Systempay_old, Supplier = CaisseEpargne
      		AlgorithmHash	= HA_SHA_160 //for compatibility but HA_SHA_256 recommended
      		sLanguage		= "fr"
      		
      	CASE Supplier = OgoneECommerce
      		AlgorithmHash	= HA_SHA_160 
      		sLanguage		= "fr_FR"
      		//"fr_FR", "en_US", "nl_NL", "nl_BE", "it_IT", "de_DE", "es_ES", "no_NO", "tr_TR"
      		
      	CASE Supplier = Datatrans
      		AlgorithmHash	= HA_HMAC_SHA_256 
      		sLanguage		= "fr"
      		//de,en,fr,it,es,el,no,da,pl,pt
      		
      	CASE (Supplier & Atos) = Atos
      		sLanguage = "FR"
      		//"FR", "GE", "EN", "SP", "IT"
      		
      	CASE Supplier = SIPS2
      		AlgorithmHash= HA_HMAC_SHA_256 
      		
      	CASE Supplier = Realex
      		sLanguage		= "GB"
      		AlgorithmHash	= HA_SHA_160 
      		
      	CASE Supplier = PayBox
      		sLanguage		= "FRA"
      		//"FRA", "GBR", "DEU"
      		AlgorithmHash	= HA_HMAC_SHA_512
      		ProtocolVersion	= "00104"
      		
      	CASE (Supplier & MoneticoPaiementOld) = MoneticoPaiementOld
      		AlgorithmHash	= HA_HMAC_SHA_160
      		sLanguage		= "FR"
      		//"FR", "EN", "DE", "IT", "ES", "NL"
      		
      	CASE (Supplier & MoneticoPaiement) = MoneticoPaiement
      		AlgorithmHash	= HA_HMAC_SHA_160
      		sLanguage		= "FR"
      		//"FR", "EN", "DE", "IT", "ES", "NL"
      		
      	CASE Supplier = DataCash_Mastercard
      		sLanguage		= "fr_FR"
      		AlgorithmHash	= HA_HMAC_SHA_256
      		
      	CASE Supplier = PayPal
      		sLanguage = "FR"
      		//AU,DE,FR,GB,IT,ES,US
      		
      	OTHER CASE
      		//none: language and algo by default
      END	
      
      Language = sLanguage
      
      // Default mode
      IF InTestMode() THEN
      	Simulation = TEST_MODE
      ELSE
      	Simulation = REAL_MODE		
      END
      
      
      SWITCH True
      
      	// IP address of Lyra servers
      	CASE (nSupplier & Lyra) = Lyra
      		//Documentation:	In case of restriction implemented on merchant site, allow the range of IP addresses 194.50.38.0/255.
      		BankServerAddressAdd("194.50.38.0","194.50.38.255")
      		
      	CASE nSupplier = PayBox
      		BankServerAddressAdd("195.101.99.76")	 	//Pre-production
      		BankServerAddressAdd("194.2.122.158")		//Main
      		BankServerAddressAdd("194.2.122.190")		//Main
      		BankServerAddressAdd("195.25.67.22")		//Main
      		BankServerAddressAdd("195.25.7.166")		//
      		
      	// IP addresses of Ogone servers
      	CASE nSupplier = OgoneECommerce
      		BankServerAddressAdd("84.233.249.112", "84.233.249.127")
      		BankServerAddressAdd("212.23.45.96", "212.23.45.11 ")
      		BankServerAddressAdd("212.35.124.160", "212.35.124.175")
      		BankServerAddressAdd("212.35.124.176", "212.35.124.191")
      		BankServerAddressAdd("213.254.248.96", "213.254.248.111")
      		BankServerAddressAdd("213.254.248.112", "213.254.248.127")
      		BankServerAddressAdd("72.52.4.0", "72.52.4.255")
      		BankServerAddressAdd("72.52.5.0", "72.52.5.255")
      		BankServerAddressAdd("209.200.154.0", "209.200.154.255")
      	OTHER CASE
      		//no preset IPs
      END
      
      EnableTLS12()
      
      HTTP_RequestMode			= HTTP_NATIVE_MODE
      HTTP_IgnoreError			= 0 //httpIgnoreInvalidCertificate	
      HTTP_TimeOut				= 5*1000 //5s
      HTTP_VersionSSL				= ProtocolTLS1_2
      
      SendtransactionReference	= True
     type : 589824
   -
     name : Destructor
     procedure_id : 2220122836607809835
     type_code : 28
     code : |1-
      // Summary: Deletes the object for secure payment
      // Syntax:
      // Destructor ()
      //
      // Parameters:
      //	None
      // Return value:
      // 	None
      //
      Proc√©dure Destructor()
     type : 655360
   -
     name : Payment_FromBank
     internal_properties : CAAAAAgAAAC3Wlt+BUXrz7tO0zW8G0iK8XAe/EICh7C39SQicSutOZCrTvc5NpWRrrHc+4kpTEeMTJoNKmXfUvccvQdx5hryJNVO/aWTdqrUMp3CYiFJRj/fBTttOtv1IYY+b3cvn41hL1/QijqSQyqbyNX8uo0Kcvlfh7sB/veEt8jj/9F4rbHHqidLmdAZIDPCc14HE4O/A79L65ZGOQlirXv0Nhk1+prtwrMg25g/FG+eHjHn+D+iqJd0+/BJll2FQuZIkbKggGOwH6bhtZxgKxc5VKlognRGT9iJkDidwD20Z3lIlzEQqFfE3YAvva/Ehk2mHWmQ1/qN
     procedure_id : 2220122836607875371
     type_code : 12
     group : 3
     code : |1-
      // Summary: Starts the payment procedure via the bank's website
      // Syntaxe :
      //[ <R√©sultat> = ] Payment_FromBank (<cyAmount> est mon√©taire, <sEmailAddress> est cha√Æne)
      //
      // Param√®tres :
      //	cyAmount (mon√©taire) : Amount of payment
      //	sEmailAddress (cha√Æne ANSI) : Email address of the customer
      // Traitement automatique des exceptions :   ex√©cuter le bloc de code CAS EXCEPTION:
      //
      
      // Return value:
      // 	boolean:       True if the call to the payment was performed, False otherwise
      // Automatic process of exceptions:   run CASE EXCEPTION:
      procedure Payment_FromBank(local cyAmount is currency, local sEmailAddress is string) : boolean
      
      bReturn is boolean
      	
      	// Reset errors
      	XERROR()
      	//Reset ID previous transaction
      	m_nTransactionID = 0
      	
      	m_cyAmount=cyAmount
      	m_sEmailAddress=sEmailAddress
      	
      	if PageBackToStore ~= "" then
      		XERROR([
      		WL_EXCEPTION [Payment]: The page for going back to the store was not specified.
      		You must assign the 'ReturnPageStore' property of the 'SecurePayment' class with the name of an AWP page of your project. 
      		Example: MyPayment:.ReturnPageStore="backtostore"
      		This page must contain the internal page IPAGE_PAYBACK without additional code.
      		Note: 
      		- this page must only contain the internal page IPAGE_PAYBACK without additional code.
      		- we advise you to check 'Don't reference this page' in the details of this page
      		- same with the return page from server to server with the  'ReturnPageServerToServer' property
      		] )
      		return False
      	end
      	
      	if PageReturnServerToServer ~= "" _and_ not Supplier = PayPal then //no return from server to server in PayPal
      		XERROR([
      		WL_EXCEPTION [Payment]: The page for managing the returns from server to server was not specified.
      		You must assign the 'ReturnPageServerToServer' property of the 'SecurePayment' class with the name of an AWP page of your project. 
      		Example: MyPayment:.ReturnPageStore="complexcustomnameforbettersecurity"
      		Notes:
      		- this page must only contain the internal page IPAGE_PAYBACK without additional code.
      		- we advise you to use a non-standard page name in order for this page not to be found
      		- we advise you to check 'Don't reference this page' in the details of this page
      		- same with the page for going back to the store with the  'ReturnPageStore' property
      		] )
      		return False
      	end
      	
      	// Checks
      	if Supplier 	= 0															then ExceptionThrow(1, XERROR("No provider of secure payment was specified"))
      	if ((Supplier & Lyra ) = Lyra _or_ (Supplier & MoneticoPaiementOld ) = MoneticoPaiementOld _or_ (Supplier in (PayBox, BanquePopulaire))) _and_ Contract = ""		then 
      ExceptionThrow(1, XERROR("No contract number was specified"))
      	end
      	if OrderNumber = ""														then ExceptionThrow(1, XERROR("No order number was specified"))
      	if CompanyCode	= ""														then ExceptionThrow(1, XERROR("No company code was specified"))
      	if Supplier = PayBox _and_ Rang = ""										then ExceptionThrow(1, XERROR("No PayBox rang number was specified"))
      	if Supplier = PayPal _and_ PayPalIdentifier = ""							then ExceptionThrow(1, XERROR("The PayPal API identifier was not specified"))
      	if Supplier = PayPal _and_ PayPalPassword = ""							then ExceptionThrow(1, XERROR("The PayPal API password was not specified"))
      	if Supplier = PayPal _and_ PayPalSignature = ""							then ExceptionThrow(1, XERROR("The PayPal API signature was not specified"))
      	
      	if Supplier = DataCash_Mastercard _and_ MACKey = ""						then ExceptionThrow(1, XERROR("The Mastercard ""Secure Hash Secret 1"" was not specified in KeyMAC"))
      	if Supplier = DataCash_Mastercard _and_ AccessCode = ""					then ExceptionThrow(1, XERROR("The Mastercard ""Access Code"" was not specified in AccessCode"))
      	if Supplier = DataCash_Mastercard _and_ CompanyCode = ""					then ExceptionThrow(1, XERROR("The Mastercard ""Merchant ID"" was not specified in CompanyCode"))
      			
      	// Open the data file
      	if HCreationIfNotFound(Transaction) = False then 
      		XERROR("Unable to open the file for saving the transactions")
      		return False
      	end
      	
      	
      	//Retrieve session cookies of sites with context (URL anti-theft security added in version 24)
      	CookieGet()
      	
      	
      	
      	if Supplier <> PayPal then
      		
      		
      		m_sToken = BufferToHexa(HashString(TokenAlgorithmHash, OrderNumber + "*" + CompanyCode + "*TOK" + AliasWEBDEVEngine(), "PCSOFT"),NoGrouping)
      	end
      		
      	// Saves the transaction
      	m_sTransactionIdentifier = SaveTransaction(cyAmount, sEmailAddress)
      	if m_sTransactionIdentifier = -1 then return False
      	
      	// PayBox
      	if Supplier = PayBox then
      		
      		// PayBox payment
      bReturn = PayBoxPayment_FromBank(cyAmount, sEmailAddress)			
      		
      	// CM-CIC (CIC, Cr√©dit Mutuel, Banque OBC) BEFORE September 2019
      	else if (Supplier & MoneticoPaiementOld) = MoneticoPaiementOld
      			
      		// CM-CIC Payment (Ex CyberMut)
      bReturn = PaiementMoneticoPaiementOld_FromBank(cyAmount, sEmailAddress)			
      		
      	else if (Supplier & MoneticoPaiement) = MoneticoPaiement
      			
      		// CM-CIC Payment 
      bReturn = MoneticoPaymentPayment_FromBank(cyAmount, sEmailAddress)			
      		
      	// ATOS (Soci√©t√© G√©n√©rale, Cr√©dit Agricole)
      	else if (Supplier & Atos) = Atos
      		
      		// ATOS payment
      bReturn = ATOSPayment_FromBank(cyAmount, sEmailAddress)
      	else if (Supplier & SIPS2) = SIPS2 // For a supplier based on SIPS 2
      	
      	// SIPS 2 payment
      bReturn = Sips2Payment_FromBank(cyAmount, sEmailAddress)
      	
      	// PayPal
      	else if Supplier = PayPal
      	
      		// PayPal payment
      bReturn = PayPalPayment_FromBank(cyAmount, sEmailAddress)
      		
      	// Banque Populaire
      	else if Supplier = BanquePopulaire
      	
      		// CyberPayment payment
      bReturn = CyberPaymentPayment_FromBank(cyAmount, sEmailAddress)
      		
      	// Standard Ogone
      	else if Supplier = OgoneECommerce
      	
      		// Ogone payment
      bReturn = OgonePayment_FromBank(cyAmount, sEmailAddress)
      
      	// Lyra:  SystemPay, CaisseEpargne..
      	else if (Supplier & Lyra) = Lyra _or_ Supplier = Systempay_old _or_ Supplier = CaisseEpargne
      		
      		// Payment of Lyra platform: Systempay among others
      bReturn = LyraPayment_FromBank(cyAmount, sEmailAddress)
      			
      	// Saferpay (German system)
      	else if Supplier = Saferpay
      		
      		// Saferpay payment (six card solutions)
      bReturn = SaferpayPayment_FromBank(cyAmount, sEmailAddress)
      
      	// Datatrans (Swiss system)
      	else if Supplier = Datatrans
      		
      		// Datatrans payment
      bReturn = DatatransPayment_FromBank(cyAmount, sEmailAddress)
      	
      	// Mastercard
      	else if Supplier = DataCash_Mastercard
      	
      	// Mastercard payment
      bReturn = DataCashMastercardPayment_FromBank(cyAmount, sEmailAddress)
      
      	else if Supplier = Realex
      		
      		// Realex payment
      bReturn = RealexPayment_FromBank(cyAmount, sEmailAddress)
      		
      	
      	// Provider not supported
      	else
      		return False
      	end
      	
      return bReturn
      
      case exception:
      	XERROR("WL_EXCEPTION [Payment_FromBank] : " + ExceptionInfo)
      	return False
     type : 458752
   -
     name : URLCurrentDomain
     internal_properties : CAAAAAgAAAAgRVSQBg6bIJO0G5jeMnH+TSxSI29MklQJTFV6L9WqoD7scEQjzjVXZE26Ha5NO8VrnLzMwlhPBiKmBOZCHD6avfQRmfKEwvJ7cBKF9YrjKWTGBYDXbyJVsIcF0mn7DbRUb+VotmoasVarBHSz3HNiaYviZr/1zAc9VO55Ui4azoOjRCUhb600Fin+/Pb+Kr15AzCw4JE4HJyR6dIHW42J+TytWg==
     procedure_id : 2220122836607940907
     type_code : 12
     code : |1-
      // Summary: Returns the full URL of the current domain
      // Syntax:
      //[ <Result> = ] URLCurrentDomain ()
      //
      // Parameters:
      //	None
      // Return value:
      // 	ANSI string:   URL of the current domain in the following format: "http[s]://<server>"
      //
      procedure global URLCurrentDomain()
      
      sDomainURL is string
      	
      	// HTTP mode by default
      sDomainURL = "http"
      	
      	// Checks the current mode (HTTP variable <HTTPS> [on|off])
      	if EnvironmentValue("HTTPS", "off") ~= "on" then
      		
      		// HTTPS mode (SSL)
      sDomainURL += "s"
      	end
      	
      	// Adds the domain name (HTTP variable <SERVER_NAME> or <HTTP_HOST>)
      sDomainURL += "://" + EnvironmentValue("SERVER_NAME", "localhost")
      	
      	// Checks the access port (HTTP variable <SERVER_PORT> [n])
      	if Val(EnvironmentValue("SERVER_PORT", "80")) <> 80 then
      		
      		// Adds the access port to the server
      sDomainURL += [":"] + EnvironmentValue("SERVER_PORT")
      	end
      	
      
      		
      return sDomainURL
     type : 458752
   -
     name : AliasWEBDEVEngine
     procedure_id : 2220122836608006443
     type_code : 12
     code : |1-
      // Summary: Returns the alias of the WEBDEV engine
      // Syntax:
      //[ <Result> = ] AliasWEBDEVEngine ()
      //
      // Parameters:
      //	None
      // Return value:
      // 	ANSI string:   Alias of the engine
      //
      procedure global AliasWEBDEVEngine()
      
      sEngineAlias 	is string
      sWEBDEVVersion	is string
      	
      	// Retrieves the version of WEBDEV
      sWEBDEVVersion = NumToString(Val(WINDEVVersion), ".1f")
      	
      sEngineAlias = "WD" + Replace(sWEBDEVVersion, ".", "") + "AWP"
      	
      	// Case
      sEngineAlias = Upper(sEngineAlias)
      	
      		
      return sEngineAlias
     type : 458752
   -
     name : EnvironmentValue
     procedure_id : 2220122836608071979
     type_code : 12
     code : |1-
      // Summary: Reads an environment value
      // Syntax:
      //[ <Result> = ] EnvironmentValue (<sValueName> is string [, <sDefaultValue> is string])
      //
      // Parameters:
      //	sValueName (string): Name of the value to read
      //	sDefaultValue (string): Default value if the value to read was not found
      // Return value:
      // 	string:   Value read
      //
      procedure global EnvironmentValue(local sValueName is string, local sDefaultValue is string = "")
      
      sValue is string
      	
      	// Reads the value
      sValue = SysEnvironment(sValueName)
      	if sValue <> "" then
      		
      		// Extracts the real value
      sValue = sValue[[Position(sValue, "=") + 1 to]]
      	else
      		
      		// Assigns the default value
      sValue = sDefaultValue
      	end
      		
      	
      return sValue
     type : 458752
   -
     name : PayBoxPayment_FromBank
     internal_properties : CAAAAAgAAABYA3VRhWOK0aCLH7ZuEG9qWoypHWU2me6hccKuimSVAVH5TTBMfAzvdksRaEYprD8E/33PcesJ9fcBWDFslOTfein5g+yjlkYFsp5r38Ua2RKF11wBJVfmKbEVDNrapkZY2QeFEMqa8LpwReQXmzzpTZj8aXbTd9Z3y0HXH/1Sb0rI
     procedure_id : 2220122836608137515
     type_code : 12
     group : 3
     code : |1-
      // Summary: Performs the request for payment via PayBox
      // Syntaxe :
      //[ <R√©sultat> = ] PayBoxPayment_FromBank (<cyAmount> est mon√©taire, <sEmailAddress> est cha√Æne)
      //
      // Param√®tres :
      //	cyAmount (mon√©taire) : Amount of payment to perform
      //	sEmailAddress (cha√Æne ANSI) : Email address of the customer
      // Traitement automatique des exceptions :   ex√©cuter le bloc de code CAS EXCEPTION:
      //
      
      // Return value:
      // 	boolean:       True if the call to the payment was performed, False otherwise
      // Automatic process of exceptions:   run CASE EXCEPTION:
      procedure private PayBoxPayment_FromBank(local cyAmount is currency, local sEmailAddress is string)
      
      	// Reset errors
      	XERROR()
      	DirectMode = False
      	Mode3DS = False //3DS direct
      bReturn 			is boolean
      	
      	BuildPayboxURL()
      	
      	// Prepares the call to PayBox
      bReturn = PreparePayBoxPayment(cyAmount, sEmailAddress) 
      	
      return bReturn
      
      case exception:
      	XERROR("WL_EXCEPTION [PayBoxPayment]: " + ExceptionInfo)
      	return False
     type : 458752
   -
     name : MoneticoPaymentPayment_FromBank
     internal_properties : CAAAAAgAAABnkTHiXPARezDW3X17WeEsdvCtQPCxcJ/cd3o05egMUAdnVgmKVHL9I6KT8H7AnGNTdQqlnJWJx61ahOlRM2n4aNGhTOjR+EGZwji1wU0mMVgTj4wQGjislTPmTKXSYSx3axLYGx1jS8N9m5o6NC/SFEDg02oS8J+wP47N3Q+7v2FKwtfiBPuHmXUpMH7ntrpE+PWgZ9Iypu2GsYApuH2aTicKwZyuKSXtSFrX5yE/VfnKqDxET0JGMoO/eUqbaju+lT1/SWWipVBFbS/Pen6lZBDzibzsXcCmVBMaJXxxavMA7bSdQtJ/NsYW/RN+n+99+hfYHJMMb5DQFzS+GDPEf6Dq7bdZPIoDTEVZMsqqMaEipdm72bODrvCfTHTqElxH7j9qEzzy6P6eXXMm+EHHe+iHrUXvxGs+L58cl4rZMTpu9XxIm7SOn5WaVn964MsLQKlKOR8/hYe3O08h9vUXu1vy0l/aWuTvXNc5bnVxDnL2
     procedure_id : 2220122836608203051
     type_code : 12
     group : 3
     code : |1+
      // Summary: Asks to perform the payment via MoneticoPaiement
      // Syntax:
      // [ <Result> = ] MoneticoPaymentPayment_FromBank (<cyAmount> is currency, <sEmailAddress> is string)
      //
      // Parameters:
      //	cyAmount (currency): Amount of payment to perform
      //	sEmailAddress (ANSI string): Email address of the customer
      // Return value:
      // 	boolean:      True if the call to the payment was performed, False otherwise
      //
      // Automatic process of exceptions:   run CASE EXCEPTION:
      //
      
      procedure private MoneticoPaymentPayment_FromBank(local cyAmount is currency, local sEmailAddress is string)
      
      	// Reset errors
      	XERROR()
      
      bReturn 				is boolean
      sDate					is string
      sDataToEncode		is string ANSI
      sForm				is string ANSI
      sFormData		is string ANSI
      sMACCode				is string
      	
      	// Date
      sDate = DateToString(Today, "MM/DD/YYYY") + ":" + TimeToString(Now, "HH:MM:SS")
      		
      	// Describes the sending form
      sForm = StringBuild(HTML_FORM, "%2", "PaymentRequest", "%3", "%1")
      	
      sFormData += AddFormControl("version", MONETICO_VERSION , *, *, "")
      sFormData += AddFormControl("TPE", Contract, *, *, "")
      sFormData += AddFormControl("date", sDate, *, *, "")
      sFormData += AddFormControl("amount", NumToString(cyAmount, ".2f") + CurrencyToString(), *, *, "")
      sFormData += AddFormControl("reference", OrderNumber, *, *, "")
      sFormData += AddFormControl("texte-libre", TransitionText, *, *, "")
      sFormData += AddFormControl("email", sEmailAddress, *, *, "")
      sFormData += AddFormControl("lgue", Language, *, *, "")
      sFormData += AddFormControl("societe", CompanyCode, *, *, "")
      sFormData += AddFormControl("return_url_ok", PaybackURL(URL_OK), *, *, "")
      sFormData += AddFormControl("return_url_err", PaybackURL(URL_REFUSED), *, *, "")
      	
      	// ThreeDSecureChallenge (optional) 
      	// contexte_commande: Details of the order: details of the cart, shipping and billing address, and technical context. Data in JSON - UTF-8 format encoded in base64. 
      	
      	// Custom data
      	for each sValue,sControlName of m_aaParamDelPaymentForm
      		if ArraySeek(m_arrFormParameters, asLinear, "Name", sControlName) <= 0 then
      sFormData += AddFormControl(sControlName, sValue, *, *, "", True)
      		end
      	end
      	
      sDataToEncode=MoneticoPrepareSignature(m_arrFormParameters)
      	
      		
      	// Encodes the data
      sMACCode = EncodeMAC(sDataToEncode,True,AlgorithmHash) 
      sFormData += AddFormControl("MAC", sMACCode, *, *, "")
      	
      	// Complete
      sForm = StringBuild(sForm, ConvertTextToTML(TransitionText), m_sProviderURL, sFormData)
      	XTRACE("Calls to MoneticoPaiement URL <"+m_sProviderURL+">")
      	// Displays the data
      StringDisplay(sForm, typeMimeHTML)	
      	
      	// Everything is OK
      bReturn = True
      	
      return bReturn
      
      case exception:
      	XERROR("WL_EXCEPTION [CyberMutPayment]: " + ExceptionInfo)
      	return False
      	
      
      //  Details of "contexte_commande" (in JSON/UTF-8 format, encoded in base64):
      //			billing  Billing address   Mandatory  link 
      //					civility  Optional  String  link 
      //					name  Optional  String  link 
      //					firstName  Optional  String  link 
      //					lastName  Optional  String  link 
      //					middleName  Optional  String  link 
      //					address  Optional  String  link 
      //					addressLine1  Mandatory  String  link 
      //					addressLine2  Optional  String  link 
      //					addressLine3  Optional  String  link 
      //					city  Mandatory  String  link 
      //					postalCode  Mandatory  String  link 
      //					country   Mandatory  String  link 
      //					stateOrProvince  Mandatory if applicable  String  link 
      //					countrySubdivision  Optional  String  link 
      //					email  Optional  String  link 
      //					phone  Optional  String  link 
      //					mobilePhone  Optional  String  link 
      //					homePhone  Optional  String  link 
      //					workPhone  Optional  String  link 
      //			shipping  Shipping address   Mandatory if applicable  link 
      //					civility  Optional  String  link 
      //					name  Optional  String  link 
      //					firstName  Optional  String  link 
      //					lastName  Optional  String  link 
      //					address  Optional  String  link 
      //					addressLine1  Mandatory if applicable  String  link 
      //					addressLine2  Optional  String  link 
      //					addressLine3  Optional  String  link 
      //					city  Mandatory if applicable  String  link 
      //					postalCode  Mandatory if applicable  String  link 
      //					country   Mandatory if applicable  String  link 
      //					stateOrProvince  Mandatory if applicable  String  link 
      //					countrySubdivision  Optional  String  link 
      //					email  Optional  String  link 
      //					phone  Optional  String  link 
      //					shipIndicator  Optional  String  link 
      //					deliveryTimeframe  Optional  String  link 
      //					firstUseDate  Optional  String  link 
      //					matchBillingAddress  Optional  Boolean  link 
      //			shoppingCart  Customer cart  Optional  link 
      //					giftCardAmount  Optional  Quantity  link 
      //					giftCardCount  Optional  Quantity  link 
      //					giftCardCurrency  Optional  String  link 
      //					preOrderDate  Optional  String  link 
      //					preorderIndicator  Optional  Boolean  link 
      //					reorderIndicator  Optional  Boolean  link 
      //					shoppingCartItems  Optional  Array of objects  link 
      //							name  Optional  String  link 
      //							description  Optional  String  link 
      //							productCode  Optional  String  link 
      //							imageURL  Optional  String  link 
      //							unitPrice  Mandatory  Quantity  link 
      //							quantity  Mandatory if applicable  Quantity  link 
      //							productSKU  Optional  String  link 
      //							productRisk  Optional  String  link 
      //			client  Client details  Optional  link 
      //					civility  Optional  String  link 
      //					name  Optional  String  link 
      //					firstName  Optional  String  link 
      //					lastName  Optional  String  link 
      //					middleName  Optional  String  link 
      //					address  Optional  String  link 
      //					addressLine1  Optional  String  link 
      //					addressLine2  Optional  String  link 
      //					addressLine3  Optional  String  link 
      //					city  Optional  String  link 
      //					postalCode  Optional  String  link 
      //					country   Optional  String  link 
      //					stateOrProvince  Optional  String  link 
      //					countrySubdivision  Optional  String  link 
      //					email  Optional  String  link 
      //					birthLastName  Optional  String  link 
      //					birthCity  Optional  String  link 
      //					birthPostalCode  Optional  String  link 
      //					birthCountry  Optional  String  link 
      //					birthStateOrProvince  Optional  String  link 
      //					birthCountrySubdivision  Optional  String  link 
      //					birthdate  Optional  String  link 
      //					phone  Optional  String  link 
      //					nationalIDNumber  Optional  String  link 
      //					suspiciousAccountActivity  Optional  Boolean  link 
      //					authenticationMethod  Optional  String  link 
      //					authenticationTimestamp  Optional  String  link 
      //					priorAuthenticationMethod  Optional  String  link 
      //					priorAuthenticationTimestamp  Optional  String  link 
      //					paymentMeanAge  Optional  String  link 
      //					lastYearTransactions  Optional  String  link 
      //					last24HoursTransactions  Optional  String  link 
      //					addCardNbLast24Hours  Optional  String  link 
      //					last6MonthsPurchase  Optional  String  link 
      //					lastPasswordChange  Optional  String  link 
      //					accountAge  Optional  String  link 
      //					lastAccountModification  Optional  String  link 
      
     type : 458752
   -
     name : PreparePayBoxPayment
     internal_properties : CAAAAAgAAAA4bbjdbVtXW3dm+Z7d/UB7LYa1U6QVDQzQc18EwChyYQnWxMD3l09AuCu2FPdgpE86zctKcNVnUlVorxUcVxq/o2D2sc1KQstTS5E1oY3HVbOpjvfmO29ni90qhSIDMlVt6fsRBMEEb1EutfC169jr5m3Pra+oxVBL6rU2i+3nG/XQa/0de6sdTyUOUQNZD2Xt6vs/WlCEDNVzQE6VBuGj8VyScIfRPjO197glp2XyP8uTBSBvF28PCl4Gm8jr5w0OoF9A2TDIktWt/LuwdICX9w7UMtN2rgXdH0mwAVySGolAj00GEME7Rwx+qI577VIY49VnPmCKb3WGuSyTaWQBf52jB+WMcwzEl6xT/EQ/tFL/zTCZcLcncopJWcFdBVJhWS/ufFWjhrHdPOJMPT2oDaRFWEMpxyryrxVaTrm3LybpKLz6Vc/dcgqy8gsAviRFuBvsM3rwtMf4sHzCcdasSWG3fRaAM4BniuTPYnbHQxTMoPxrtVg+qEpAtqe+mAYnzUNoldkw8ljuOtQ/2ndiyukSR925pGv6Ug==
     procedure_id : 2220122836608268587
     type_code : 12
     code : |1-
      // Summary: Prepares the configuration file of PayBox
      // Syntaxe :
      //[ <R√©sultat> = ] PreparePayBoxPayment (<cyAmount> est mon√©taire, <sEmailAddress> est cha√Æne)
      //
      // Param√®tres :
      //	cyAmount (mon√©taire) : Amount of payment to perform
      //	sEmailAddress (cha√Æne ANSI) : Email address of the customer
      // Traitement automatique des erreurs :   ex√©cuter le bloc de code CAS ERREUR
      //
      // Traitement automatique des exceptions :   ex√©cuter le bloc de code CAS EXCEPTION:
      //
      
      // Return value:
      // 	boolean:       Path of configuration file
      // Automatic process of exceptions:   run CASE EXCEPTION:
      procedure private PreparePayBoxPayment(local cyAmount is currency, local sEmailAddress is string) : boolean
      
      	// Reset errors
      	XERROR()
      
      	// Describes the sending form
      sForm 			is string ANSI
      sFormData		is string ANSI
      sPrefix		is string
      	
      	// Prefix of the configuration elements
      sPrefix = "PBX_"
      	
      sForm = StringBuild(HTML_FORM, "%2", "PaymentRequest", "%3", "%1")
      	
      	// Configuration
      //			"PBX_SITE"				// Site number (supplied by Paybox)
      //			"PBX_RANG"				// Rang number (supplied by Paybox)
      //			"PBX_IDENTIFIANT"		// Internal identifier (supplied by Paybox)
      //			"PBX_TOTAL"				// Total amount of transaction
      //			"PBX_DEVISE"				// Currency of transaction
      //			"PBX_CMD"				// Order reference merchant side
      //			"PBX_PORTEUR"			// Email address of buyer
      //			"PBX_LANGUE"			// Language used by Paybox
      //			"PBX_RETURN"			// List of variables that will be returned by Paybox
      	         
      //			"PBX_HASH"				// Type of hashing algorithm for calculating the print
      //			"PBX_TIME"				// Timestamp of transaction
      //			"PBX_HMAC"				// Signature calculated with the secret key
                   
      //			"PBX_TYPEPAIEMENT"		// Forces the payment type
      //			"PBX_CARDTYPE"			// Forces the type of payment card
                   
      //			"PBX_EFFECTUE"			// Return URL for the payments done
      //			"PBX_REFUSED"			// Return URL for the refused payments
      //			"PBX_ANNULE"			// Return URL for the canceled payments
      //			"PBX_ATTENTE"			// Return URL for the payments waiting for validation
      //			"PBX_REPONDRE_A"		// URL for server-to-server response (IPN)
                   
      //			"PBX_RUF1"				// Method for calling the IPN URL
      //			"PBX_SOURCE"			// Browser source of payment (mobile, ...)
      //			"PBX_CURRENCYDISPLAY"	// Currency codes that will be displayed on the payment page
      //			"PBX_DISPLAY"			// Time-out of payment page in seconds
      
      
      sFormData += AddFormControl(sPrefix + "site", Contract,False,"hidden","HTML",True)
      sFormData += AddFormControl(sPrefix + "RANG", NumToString(Rang, "02d"),False,"hidden","HTML",True)
      sFormData += AddFormControl(sPrefix + "IDENTIFIER", CompanyCode,False,"hidden","HTML",True)
      sFormData += AddFormControl(sPrefix + "Total", Round(cyAmount * 100),False,"hidden","HTML",True)
      sFormData += AddFormControl(sPrefix + "DEVISE", CurrencyToCodeISO4217(),False,"hidden","HTML",True)
      sFormData += AddFormControl(sPrefix + "CMD", OrderNumber,False,"hidden","HTML",True)
      sFormData += AddFormControl(sPrefix + "LANGUE", Language,False,"hidden","HTML",True)
      	
      	if CardToken<>"" then		
      sFormData += AddFormControl(sPrefix + "PORTEUR", CardToken,False,"hidden","HTML",True) 
      sFormData += AddFormControl(sPrefix + "REFABONNE", SubsReference,False,"hidden","HTML",True) 
      sFormData += AddFormControl(sPrefix + "RETOUR", m_sPayboxReturnVariablesWithSubscription,False,"hidden","HTML",True) //"amount:M;reference:R;auto:A;trans:T;sub:B;payment:P;card:C;idtrans:S;error:E;sign:K"
      	else
      sFormData += AddFormControl(sPrefix + "PORTEUR", sEmailAddress,False,"hidden","HTML",True)
      		//It is necessary to store the card details?
      		if CardRemember then
      			//Yes
      sFormData += AddFormControl(sPrefix + "RETOUR", m_sPayboxReturnVariablesWithSubscription,False,"hidden","HTML",True) //"amount:M;reference:R;auto:A;trans:T;subs:B;payment:P;card:C;idtrans:S;error:E;subscard:U;sign:K"
      sFormData += AddFormControl(sPrefix + "REFABONNE", SubsReference,False,"hidden","HTML",True) 
      		else
      			//no
      sFormData += AddFormControl(sPrefix + "RETOUR", m_sPayboxReturnVariables,False,"hidden","HTML",True) //"amount:M;reference:R;auto:A;trans:T;sub:B;payment:P;card:C;idtrans:S;error:E;sign:K"
      		end
      	end
      	
                                                                  
      	// Manage the returns                                  
      sFormData += AddFormControl(sPrefix + "ANNULE", PaybackURL(URL_CANCEL),False,"hidden","HTML",True)
      sFormData += AddFormControl(sPrefix + "REFUSE", PaybackURL(URL_REFUSED),False,"hidden","HTML",True)
      sFormData += AddFormControl(sPrefix + "EFFECTUE", PaybackURL(URL_OK),False,"hidden","HTML",True)
      sFormData += AddFormControl(sPrefix + "REPONDRE_A", PaybackURL(URL_S2S),False,"hidden","HTML",True)
      	                                                        
      	// Version 2.0                                          
      sFormData += AddFormControl(sPrefix + "WAIT", "0",False,"hidden","HTML",True)
      sFormData += AddFormControl(sPrefix + "TXT", TransitionText,False,"hidden","HTML",True)	
      sFormData += AddFormControl(sPrefix + "STOREPI", "null",False,"hidden","HTML",True)
      sFormData += AddFormControl(sPrefix + "TYPEPAIEMENT", "CARD",False,"hidden","HTML",True)	
      sFormData += AddFormControl(sPrefix + "MAPTYPE", "CC",False,"hidden","HTML",True)
      				 
      	
      //	if m_bSimulation THEN
      //		sFormData += AddFormControl(sPrefix + "PAYBOX","https://preprod-tpeweb.paybox.com/cgi/MYchoice_paymentpage.cgi",False,"hidden","HTML",True)
      //		sFormData += AddFormControl(sPrefix + "BACKUP1","https://preprod-tpeweb.paybox.com/cgi/MYchoice_paymentpage.cgi",False,"hidden","HTML",True)
      //		sFormData += AddFormControl(sPrefix + "BACKUP2","https://preprod-tpeweb.paybox.com/cgi/MYchoice_paymentpage.cgi",False,"hidden","HTML",True)
      //	END
      
      
      	// Custom data
      	for each sValue, sControlName of m_aaParamDelPaymentForm
      sFormData += AddFormControl(sControlName,sValue)
      	end
      	
      	// Hashing algorithm 
      sFormData += AddFormControl(sPrefix + "HASH", NameHashType())
      	// Timestamp
      dtTimeStamping is datetime = DateTimeLocalToUTC(SysDateTime)
      sFormData += AddFormControl(sPrefix + "TIME", DateToString(dtTimeStamping, "YYYY-MM-DDTHH:mm:SS") + "+0000")
      	// Prepares the signature
      sSignatureSource is string
      AParameter is FormParameter
      	for each AParameter, sParameterName of m_arrFormParameters
      sSignatureSource += ["&"] + AParameter.Name + "="+URLEncodeSpaces(AParameter.Value)//url encode spaces
      	end
      	//Sign
      sFormData += AddFormControl(sPrefix + "HMAC",Upper(BufferToHexa(HashString(AlgorithmHash, sSignatureSource, HexaToBuffer(Keyphrase)),NoGrouping)))
      	
      sForm = StringBuild(sForm, ConvertTextToTML(TransitionText), m_sProviderURL, sFormData)
      
      XTRACE("Calls to Paybox URL <"+m_sProviderURL+">")
      // Displays the data
      StringDisplay(sForm, typeMimeHTML)	
      
      return True
      
      
      case exception:
      	XERROR("WL_EXCEPTION [PreparePayBoxPayment]: " + ExceptionInfo)
      	return ""
      	
      case Error:
      	XERROR("WL_ERROR [PreparePayBoxPayment]: " + ErrorInfo)
      	return ""
     type : 458752
   -
     name : GetURLPaymentCancelation
     procedure_id : 2220122836608334123
     type_code : 12
     code : |1-
      // Summary: Returns the URL called during a cancelation
      // Syntax:
      //[ <Result> = ] GetURLPaymentAbandon (<nIDTransaction> is int)
      //
      // Parameters:
      //	nTransactionID (integer): Identifier of the transaction
      // Return value:
      // 	ANSI string:   URL called during an abandon
      //
      procedure private GetURLPaymentCancelation(local nTransactionID is int)
      
      	// Reset errors
      	XERROR()
      	
      sURL is string
      HReadSeekFirst(Transaction, TransactionID, nTransactionID)
      	if HFound(Transaction) then
      sURL = Transaction.URLCancelation
      		if sURL~="" then sURL = Transaction.URLValidation
      	end
      
      return sURL
     type : 458752
   -
     name : GetURLPaymentRefusal
     procedure_id : 2220122836608399659
     type_code : 12
     code : |1-
      // Summary: Returns the URL called during a refusal
      // Syntax:
      //[ <Result> = ] GetURLPaymentRefusal (<nIDTransaction> is int)
      //
      // Parameters:
      //	nTransactionID (integer): Identifier of the transaction
      // Return value:
      // 	ANSI string:   URL called during a refusal
      //
      procedure private GetURLPaymentRefusal(local nTransactionID is int)
      
      	// Reset errors
      	XERROR()
      	
      sURL is string
      HReadSeekFirst(Transaction, TransactionID, nTransactionID)
      	if HFound(Transaction) then
      sURL = Transaction.URLRefusal
      		if sURL~="" then sURL = Transaction.URLValidation
      	end
      
      return sURL
     type : 458752
   -
     name : GetURLPaymentValidation
     procedure_id : 2220122836608465195
     type_code : 12
     code : |1-
      // Summary: Returns the URL called during a validation
      // Syntax:
      //[ <Result> = ] GetURLPaymentValidation (<nIDTransaction> is int)
      //
      // Parameters:
      //	nTransactionID (integer): Identifier of the transaction
      // Return value:
      // 	ANSI string:   URL called during a validation
      //
      procedure private GetURLPaymentValidation(local nTransactionID is int)
      
      	// Reset errors
      	XERROR()
      	
      sURL is string
      HReadSeekFirst(Transaction, TransactionID, nTransactionID)
      	if HFound(Transaction) then
      sURL = Transaction.URLValidation
      	end
      
      return sURL
     type : 458752
   -
     name : URLCurrentPage
     procedure_id : 2220122836608530731
     type_code : 12
     code : |1-
      // Summary: Returns the URL of the current page
      // Syntax:
      //[ <Result> = ] URLCurrentPage ()
      //
      // Parameters:
      //	None
      // Return value:
      // 	string: URL of the current page
      //
      procedure private URLCurrentPage()
      
      	// Reset errors
      	XERROR()
      
      sURL is string
      	
      	// In AWP mode
      	if InAWPMode() then		
      		
      		// Retrieve the URL of the domain to which the value of <PATH_INFO> is added
      sURL = URLCurrentDomain() + ["/"] + EnvironmentValue("PATH_INFO") + "?"
      		
      		//Add all the parameters that are currently passed to the page
      		i 				 is int = 1
      		sListParameters is string
      		sOneParameter	 	 is string
      		
      		sOneParameter = PageParameter(i)
      		while sOneParameter<>""
      			
      			// Don't store the current action of the page
      			if Position(sOneParameter, "WD_BUTTON_CLICK_=") < 1 _and_ Position(sOneParameter, "WD_ACTION_=") < 1 then
      				sListParameters += ["&"] + sOneParameter	
      			end			
      			
      			i++
      			sOneParameter = PageParameter(i)
      		end
      		
      sURL += sListParameters
      	else
      		
      		// Retrieve the dynamic address of current page
      sURL = URLCurrentDomain() + PageAddress(CurrentPage)
      	end
      	
      	XTRACE("URLCurrentPage() = " + sURL)
      	
      return sURL
     type : 458752
   -
     name : SaveTransaction
     internal_properties : CAAAAAgAAADqPHqg5oZDQOJnwJjAIFpPQCBl2DNNLvbmHuhhS1f/qEg3QaRGSQ0jjw9YDLEOfPalTJzZPzjxo0KM+xaZ/NxGSwmlhdApTF3V6rh87n09M4W3jg6NhADM9yiNaoFoBYNwcooQ9M24tFE4jATVVyPX0eJPKHPmJwWJ0o+Y/J2dBe3MQyvLbm+Ni5x04L4/uDDvs2J7yw==
     procedure_id : 2220122836608596267
     type_code : 12
     code : |1-
      // Summary: Saves the transaction
      // Syntax:
      //[ <Result> = ] SaveTransaction (<cyAmount> is currency, <sEmailAddress> is string)
      //
      // Parameters:
      //	cyAmount (currency): Amount of transaction
      //	sEmailAddress (string): Email address of the customer
      // Return value:
      // 	Undefined type:  Identifier of the transaction
      //
      // Automatic process of exceptions:   run CASE EXCEPTION:
      //
      procedure private SaveTransaction(local cyAmount is currency, local sEmailAddress is string)
      
      	// Reset errors
      	XERROR()
      
      bufTransaction is buffer
      	
      	// Retrieves the URL of the current page
      	m_sCurrentURL = URLCurrentPage()
      
      HReset(Transaction)
      	
      	// Creates a record
      	Transaction.CreationDate 	= Today + Now
      	Transaction.Email		 	= sEmailAddress
      	Transaction.Supplier	 	= Supplier
      	Transaction.Amount		 	= cyAmount
      	Transaction.OrderNumber	= OrderNumber
      	Transaction.CurrencyCode			= CurrencyCode
      	Transaction.Status			= PAYMENT_WAIT
      	Transaction.URLCancelation	= URLAccordingToAction(OnPaymentCancelation)
      	Transaction.URLRefusal		= URLAccordingToAction(OnPaymentRefusal)
      	Transaction.URLValidation	= URLAccordingToAction(OnPaymentValidation)
      	Transaction.URLS2S			= URLAccordingToAction(OnServerCall)
      	
      	
      HAdd(Transaction)	
      	//gets the transaction ID
      	m_sTransactionIdentifier= Transaction.TransactionID
      	m_nTransactionID= Transaction.TransactionID
      	// Serializes the object
      Serialize(object, bufTransaction, psdBinary)
      	Transaction.PaymentObject = bufTransaction
      HModify(Transaction)
       	XTRACE("Creating the transaction before sending")
       
      return Transaction.TransactionID
      
      case exception:
      	XERROR("WL_EXCEPTION [SaveTransaction]: " + ExceptionInfo)
      	return -1
     type : 458752
   -
     name : CurrencyToCodeISO4217
     internal_properties : CAAAAAgAAACkV3dnZbtE+tHuvqD2Bj6n0qnh4l90Bm5bJQ4LsimFWvVsLYBdJzCIcyUEPIDzXOShXzjjRae8bd3B/QQDevpfE2qfvP/96eNr1uThCyNcnWfvwqMpbfmDD/VEyankQd5Y0GzB+GgTM23R8w1Z7d26VWT9qZVvNcm8og1GyD9QEgtwO8LxD0Auh/8VKXAT2strIYOFmveGGixTpu0OCeVhkA==
     procedure_id : 2220122836608661803
     type_code : 12
     code : |1-
      // Summary: Returns the ISO 4217 code corresponding to the currency constant
      // Syntax:
      //[ <Result> = ] CurrencyToISO4217Code ()
      //
      // Parameters:
      //	None
      // Return value:
      // 	Undefined type:    ISO 4217 code
      //
      procedure private CurrencyToCodeISO4217()
      
      	// Reset errors
      	XERROR()
      
      	//https://www.currency-iso.org/en/home/tables/table-a1.html
      
      	switch CurrencyCode
      		case "USD"
      			//Australian Dollar
      			return 840
      		case "AUD"
      			//Australian Dollar
      			return "036"
      			
      		case eATS
      		 	// Austria (EURO)
      		 	return 978
      		 
      		case eBEF
      		 	// Belgium (EURO)
      		 	return 978
      		 
      		case eCYP
      		 	// Cyprus (EURO)
      		 	return 978
      		 
      		case eCZK
      		 	// Czech Republic
      		 	return 203
      		 
      		case eDEM
      		 	// Germany (EURO)
      		 	return 978
      		 
      		case eDKK
      		 	// Denmark
      		 	return 208
      		 
      		case eEEK
      		 	// Estonia
      		 	return 233
      		 
      		case eESP
      		 	// Spain (EURO)
      		 	return 978
      		 
      		case eEUR
      		 	// Euro (EURO)
      		 	return 978
      		 
      		case eFIM
      			// Finland (EURO)
      		 	return 978
      		 
      		case eFRF
      		 	// France (EURO)
      		 	return 978
      		 
      		case eGBP
      		 	// Great Britain
      		 	return 826
      		 
      		case eGRD
      		 	// Greece (EURO)
      		 	return 978
      		 
      		case eHUF
      		 	// Hungary
      		 	return 348
      		 
      		case eIEP
      		 	// Ireland (EURO)
      		 	return 978
      		 
      		case eITL
      		 	// Italy (EURO)
      		 	return 978
      		 
      		case eLTL
      		 	// Lithuania
      		 	return 440
      		 
      		case eLVL
      		 	// Latvia
      		 	return 428
      		 
      		case eLUF
      		 	// Luxembourg (EURO)
      		 	return 978
      		 
      		case eMTL
      		 	// Malta (EURO)
      		 	return 978
      		 
      		case eNLG
      		 	// Netherlands (EURO)
      		 	return 978
      		 
      		case ePLN
      		 	// Poland
      		 	return 985
      		 
      		case ePTE
      		 	// Portugal (EURO)
      		 	return 978
      		 
      		case eSEK
      		 	// Sweden
      		 	return 752
      		 
      		case eSIT
      		 	// Slovenia (EURO)
      		 	return 978
      		 
      		case eSKK
      		 	// Slovakia (EURO)
      		 	return 978
       
      		other case		
      			// EURO code
      			return CurrencyCode
      	end
     type : 458752
   -
     name : CurrencyToString
     procedure_id : 2220122836608727339
     type_code : 12
     code : |1-
      // Summary: Returns the code of the selected currency
      // Syntax:
      //[ <Result> = ] CurrencyToString ()
      //
      // Parameters:
      //	None
      // Return value:
      // 	String:   Currency code
      //
      procedure private CurrencyToString()
      
      	// Reset errors
      	XERROR()
      
      	switch CurrencyCode
      		case eATS
      		 	// Austria (EURO)
      		 	return "EUR"
      		 
      		case eBEF
      		 	// Belgium (EURO)
      		 	return "EUR"
      		 
      		case eCYP
      		 	// Cyprus (EURO)
      		 	return "EUR"
      		 
      		case eCZK
      		 	// Czech Republic
      		 	return "CZK"
      		 
      		case eDEM
      		 	// Germany (EURO)
      		 	return "EUR"
      		 
      		case eDKK
      		 	// Denmark
      		 	return "DKK"
      		 
      		case eEEK
      		 	// Estonia
      		 	return "EEK"
      		 
      		case eESP
      		 	// Spain (EURO)
      		 	return "EUR"
      		 
      		case eEUR
      		 	// Euro (EURO)
      		 	return "EUR"
      		 
      		case eFIM
      			// Finland (EURO)
      		 	return "EUR"
      		 
      		case eFRF
      		 	// France (EURO)
      		 	return "EUR"
      		 
      		case eGBP
      		 	// Great Britain
      		 	return "GBP"
      		 
      		case eGRD
      		 	// Greece (EURO)
      		 	return "EUR"
      		 
      		case eHUF
      		 	// Hungary
      		 	return "HUF"
      		 
      		case eIEP
      		 	// Ireland (EURO)
      		 	return "EUR"
      		 
      		case eITL
      		 	// Italy (EURO)
      		 	return "EUR"
      		 
      		case eLTL
      		 	// Lithuania
      		 	return "LTL"
      		 
      		case eLVL
      		 	// Latvia
      		 	return "LVL"
      		 
      		case eLUF
      		 	// Luxembourg (EURO)
      		 	return "EUR"
      		 
      		case eMTL
      		 	// Malta (EURO)
      		 	return "EUR"
      		 
      		case eNLG
      		 	// Netherlands (EURO)
      		 	return "EUR"
      		 
      		case ePLN
      		 	// Poland
      		 	return "PLN"
      		 
      		case ePTE
      		 	// Portugal (EURO)
      		 	return "EUR"
      		 
      		case eSEK
      		 	// Sweden
      		 	return "SEK"
      		 
      		case eSIT
      		 	// Slovenia (EURO)
      		 	return "EUR"
      		 
      		case eSKK
      		 	// Slovakia (EURO)
      		 	return "EUR"
      
       			
      		other case		
      			return CurrencyCode
      	end
     type : 458752
   -
     name : HexaInBuf
     internal_properties : CAAAAAgAAADTeJyUESo7BWcc/obIKJYSRRQkhTRSRl1Zw5StUVhzt/Ta8Nanunzosyf/o214BLNBtVnjwj7RefAUjd7NWAFUc+h9CYF8wj8xYquc6kjuAcPIdOamew3nRHtR5CE7v/qEF1U84JA4R+hpquydyqEcuXvqTmW/gHvhRDDT3PTI7tWnog2XxQDJUOvyIdLapdQYJxsJrVtBFXWiW1jRlbNTK2lAgDQqO5u9hy8EyHzSgD15vok=
     procedure_id : 2220122836608792875
     type_code : 12
     code : |1-
      // Summary: Converting an hexadecimal string into a binary string
      // Syntax:
      //[ <Result> = ] HexaToBuf (<bufOrigin> is buffer)
      //
      // Parameters:
      //	bufOrigin (buffer): Hexadecimal string to convert
      // Return value:
      // 	buffer:  Binary string
      //
      procedure global private HexaInBuf(local bufSource is buffer)
      
      bufBinary is buffer
      	
      	// Deletes 0x foudn at the beginning of the string if it is specified
      	if bufSource[[to 2]] = "0x" then
      bufSource = bufSource[[3 to]]
      	end
      	
      	// Adds 0 at the beginning of the string if the size is odd
      	if IsOdd(Length(bufSource)) then
      bufSource = "0" + bufSource
      	end
      	
      bufBinary = HexaToBuffer(bufSource)
      	
      return bufBinary
     type : 458752
   -
     name : EncodeMAC
     internal_properties : CAAAAAgAAAAm9x1XZNzdim9hNpCiwfWlwTdAAuY9q2ghtyGTJBvdSomkoxp4ZnGTeuHchp548e93BtVRP9ayyVIz25L5ussk50Ji0y6mskY1GOVX49WvYttXNST2S20a+1n3Jir73Nq1lu+oM4Sd9sUPAlSUoGQmYq6AbEzVTQL+BF7rkU7n1lD6QvNuiVilOaUe/sH7p+ZpaObo/dz7jQbp9bR+VwuMoell
     procedure_id : 2220122836608858411
     type_code : 12
     code : |1-
      // Summary: Calculate the MAC key of the buffer passed in parameter
      // Syntax:
      //[ <Result> = ] EncodeMAC (<sData> is string [, <bPack> is boolean [, <nAlgoritmType> is int [, <sEncodingKey> is string]]])
      //
      // Parameters:
      //	sData (ANSI string): Data whose MAC key must be calculated
      //	bPack (boolean - default value=1): True to make a Pack on the key before
      //	nAlgorithmType (integer - default value=272): Hashing algorithm
      //	sEncodingKey (ANSI string): <specify the role of sEncodingKey>
      // Return value:
      // 	ANSI string:     MAC key
      //
      procedure private EncodeMAC(local sData is string, local bPack is boolean = True, local nAlgorithmType is int = AlgorithmHash,local sEncodingKey is string=CalculatedKey)
      	
      bufHashingKey is buffer
      sEncodedData is string
      	
      	// Reset errors
      	XERROR()
      	
      	// The key is a character string that contains 2 characters per byte (in order to get a visible string without special characters)?
      	if bPack then
      		// Yes, include this in a string where each byte has for value the value of two characters
      		// Example: "65" => Charact(0x65) => "A"
      bufHashingKey = HexaInBuf(sEncodingKey)
      	else
      bufHashingKey = sEncodingKey
      	end
      	
      	// Hash
      	// writes the result so that it can be read
      	// in the format of a character string that contains 2 characters per byte (in order to get a visible string without special characters) 
      	// Example: "A" => ASCII("A") => "65"
      sEncodedData = BufferToHexa(HashString(nAlgorithmType, sData, bufHashingKey),NoGrouping)
      	
      return sEncodedData
     type : 458752
   -
     name : HTMLEncode
     procedure_id : 2220122836608923947
     type_code : 12
     code : |1-
      // Summary: Encodes a character string in HTML format (with the authorized alphanumeric characters only)
      // Syntax:
      //[ <Result> = ] HTMLEncode (<sString> is string)
      //
      // Parameters:
      //	sString (ANSI string): String to encode
      // Return value:
      // 	ANSI string: Encoded string
      //
      procedure global private HTMLEncode(local sString is string)
      
      sEncodedString is string
      sCHARSET	   is string = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789.-_\@/:"
      	
      	// Browse the string
      	for i = 1 _to_ Length(sString)
      	
      		// Authorized character?
      		if Position(sCHARSET, sString[[i]]) > 0 then
      sEncodedString += sString[[i]]
      		else
      			
      			// Encodes the character
      sEncodedString += "&#x" + NumToString(Asc(sString[[i]]), "02x") + ";"
      		end
      	end	
      	
      return sEncodedString
     type : 458752
   -
     name : PaybackURL
     internal_properties : CAAAAAgAAACoxPvWdYdCSK12kUgyyffyZUxDaXOYNBFUgclLkHICX/lWS0prHhYbConf2iuye89pFT6RxTSofQRv5VDvKliglr4P9oBbj6hbI/6EaBXvhe84EZYz3LT+tU1do8ICvkhqtGHDHNxU+y4mz25VQoqhDt1HuoF7ljndg9231Ozx1KvQoIw8yL3MkYEcEpXnBwOpaxgV+65w3Cm1BXe4+ABC5B0zL74D+rFVAWurK2UlSEwB88T753W4pKrHEuNFUi23Ar4K1GumcWfB
     procedure_id : 2220122836608989483
     type_code : 12
     code : |1-
      // Summary: Returns the URL for return management
      // Syntax:
      //[ <Result> = ] PaybackURL (<sMode> is string)
      //
      // Parameters:
      //	sMode (string): Return mode
      // Return value:
      // 	string:       URL of the page for managing the returns
      //
      procedure private PaybackURL(local sMode is string)
      
      	// Reset errors
      	XERROR()
      
      sURL 	is string
      	
      	//retrieve the URL of the return page
      	//For the return from server to server?
      	if sMode in (URL_S2S,URL_S2S3DS) then
      		
      		// It is the custom/hidden page
      sURL = PageReturnServerToServer	
      	else
      		// For the return to the site, it is the default page
      sURL = PageBackToStore
      	end
      
      	// Adds the current domain and the common parameters
      	if Position(sURL, "?") > 0 then
      sURL += "&"
      	else
      sURL += "?"	
      	end
      	
      sAndEncode is string
      sAndEncode = "_"
      	
      	if (Supplier = Saferpay) then
      sURL += "act=" + sMode + sAndEncode + "secid=" + m_sTransactionIdentifier + sAndEncode + "fpay=" + Supplier
      	else
      sURL += "act=" + sMode + "&secid=" + m_sTransactionIdentifier + "&fpay=" + Supplier
      		
      		// Except for Paybox and Ogone (because URL limited to 150 characters for PayBox and to 200 for Ogone) 	
      		if not (Supplier in  (PayBox,DataCash_Mastercard)) _and_ not ((Supplier & OgoneECommerce) = OgoneECommerce _and_ ((Supplier & Atos) <> Atos)) then
      sURL += "&site=" + ProjectInfo(piNameDeployedSite) + "&prvtk=" + URLEncode(m_sToken)
      		end
      	end
      	
      	//XTRACE("URLPayback(" + sMode +") = " + sURL)
      	
      return sURL
     type : 458752
   -
     name : OnPaymentReturn
     internal_properties : CAAAAAgAAAD2nDb0bbjRgLvX3lNvT12F9I4imspp35xnRdWcOWNIb/E35FQYaZP9ZhEALpA60JZ3K6EIJuU5mloF2oJ0D9Q2/40TeOwp1Vd73tEk8znTxWCaSr38qPxuQh3sKcnEefsL02HjgIOktbmo2YKJdmFVzbuN4GXTu06ZRv5jBjvF7E9ROrqTIOjsqplY9MwrNSzuRgDXXvyPI9JR4ZodUcfvhzCKIdz9YRt8tPolQqOkzV4CW+5LCkoD2eYfhVGlK+dB3tL+GrTzrY592SMEF2hqQbmOA/489m6HyAzLLShdyZhraMvDwxuR6cZekhEwGu9Zw1hM7TTj6oWQHNSZzKcYPhgGG6Yp6pFgEPULhGCk4OyEUHbRCjhIXP74FVc2xT7CksDpqyyQCv1AbKrtgHVHWDARGNisVFpkFET1XulJyyVZyNcGp6Dt1FPJk2UBCnr3gwSEkRCko8Gia1Sp9UWs5KIdEJMYcXDRdWtjfFynwiG3ySm1PDrMFD3yQ7+nx8g8HXWZnHAtC0MH/qhuWg1pr4BNBzyHxYog0wDiKW2QtGF9QMVM/8IZAuIvXCZX9iR8zrGvgFyFHeuTL6LQwYSSTruJbk6+0KpqYLf8OE4LIRATrjPG2Vsj8fLQja0xwCBV7JN4Pjv+rJxdXL5Nf4C8gWNbJwGK
     procedure_id : 2220122836609055019
     type_code : 12
     group : 3
     code : |1+
      // Summary: Processes the payment return
      // Syntax:
      //[ <Result> = ] OnPaymentReturn (<sAction> is string)
      //
      // Parameters:
      //	sAction (ANSI string): value among	URL_S2S, URL_CANCEL, URL_REFUSED, URL_OK
      // Return value:
      // 	boolean:      True if the return was managed
      //
      // Automatic process of exceptions:   run CASE EXCEPTION:
      //
      
      procedure OnPaymentReturn(local sAction is string)
      
      nMode 							is int
      sInformation					is string // information if an error occurred
      nParameterSubscriptToTransmit 	is int
      	
      	// Reset errors
      	XERROR()
      		
      	// Is it a s2s return?
      	if sAction in  (URL_S2S,URL_S2S3DS) then
      		XTRACE("Payment return from server to server")
      		// Yes
      		//check whether we are on the proper for payment return (page potentially customized to be unknown)
      		//compare the theoretic name of the page (without path nor extension)  with the real name
      		sPageName is string=ExtractString(ExtractString(ExtractString(PageReturnServerToServer,1,"?"),1,"/",FromEnd),1,".")
      		if not sPageName~= MyPage.Name _or_ not sPageName~= ExtractString(ExtractString(PageAddress(MyPage,paRELATIVE),1,"/",FromEnd),1,".awp") then
      nMode = PAYMENT_FORGED
      sInformation = StringBuild("The name of the return page <%1> differs from the real name <%2>",ExtractString(ExtractString(ExtractString(PageReturnServerToServer,1,"?"),1,"/",FromEnd),1,"."), MyPage.Name)
      			XERROR(sInformation)
      			//not the proper page...
      			DisplayStringInHTML("bad page")
      			return False
      		end
      	else
      		XTRACE("Payment return to the store")
      	end
      		
      	//parameters given to the WEBDEV site in any case
      sListParameters is string
      	
      	//The default mode is its current status
      nMode=Transaction.Status
      	
      	//process according to the provider (bank)
      	switch True
      		//SIPS 2 payment?
      		case :Supplier in (SIPS2,BNP_SIPS2,Soci√©t√©G√©n√©rale_SIPS2)		
      nParameterSubscriptToTransmit = 4				
      			// Processes the response and retrieves the source transaction identifier
      			if not OnSIPS2PaymentReturn(nMode,sInformation) then
      				XTRACE(XERROR(sInformation))
      			end
      			
      sListParameters	+= ["&"] + "amount=" + (Transaction.Amount*100) + "&reference=" + Transaction.OrderNumber
      			// Fills the list of parameters 
      sListParameters	+= ["&"]+sInformation	
      			
      		//ATOS payment?
      		case (:Supplier & Atos) = Atos
      nParameterSubscriptToTransmit = 4				
      			// Processes the response and retrieves the source transaction identifier
      			if not OnPaymentReturnAtos(sAction,nMode,sInformation) then
      				XERROR(sInformation)
      			end
      			
      sListParameters	+= ["&"] + "amount=" + (Transaction.Amount*100) + "&reference=" + Transaction.OrderNumber
      			// Fills the list of parameters 
      sListParameters	+= ["&"]+sInformation	
      						
      		//MoneticoPaiement payment? BEFORE September 2019
      		case (:Supplier & MoneticoPaiementOld) = MoneticoPaiementOld
      	
      			if sAction = URL_S2S then
      				//Example of S2S return
      				//TPE=0000001&date=29/09/2009_a_10:52:46&amount=250EUR&reference=Order_2009092910523192&MAC=55C22039C438704483A5CBCB47C9F3F3137CAC20&free-text=&return-code=paytest&cvx=yes&vld=1219&brand=na&status3ds=-1&autonum=000000			
      nParameterSubscriptToTransmit=5
      			else
      				//example of canceled/refused return
      				//act=ps_refused&secid=5&fpay=4098&site=WW_Secure_Payment_CM-CIC_payment&prvtk=2dd695682c3432d7aabad46a58c8706598e37a49			
      nParameterSubscriptToTransmit=2
      			end
      			
      			if not OnMoneticoPaiementPaymentReturnOld(sAction,nMode,sInformation) then
      				XERROR("The MoneticoPaiement check failed: "+sInformation)
      			end
      sListParameters	+= ["&"] + "amount=" + (Transaction.Amount * 100) + "&reference=" + Transaction.OrderNumber
      
      		//MoneticoPaiement payment?
      		case (:Supplier & MoneticoPaiement) = MoneticoPaiement
      	
      			if sAction = URL_S2S then
      				//Example of S2S return
      				//TPE=0000001&date=29/09/2009_a_10:52:46&amount=250EUR&reference=Order_2009092910523192&MAC=55C22039C438704483A5CBCB47C9F3F3137CAC20&free-text=&return-code=paytest&cvx=yes&vld=1219&brand=na&status3ds=-1&autonum=000000			
      nParameterSubscriptToTransmit=5
      			else
      				//example of canceled/refused return
      				//act=ps_refused&secid=5&fpay=4098&site=WW_Secure_Payment_CM-CIC_payment&prvtk=2dd695682c3432d7aabad46a58c8706598e37a49			
      nParameterSubscriptToTransmit=2
      			end
      			
      			if not OnReturnMoneticoPaiementPayment(sAction,nMode,sInformation) then
      				XERROR("MoneticoPaiement verification failed: "+sInformation)
      			end
      sListParameters	+= ["&"] + "amount=" + (Transaction.Amount * 100) + "&reference=" + Transaction.OrderNumber
      			
      		//PayBox payment?
      		case :Supplier = PayBox		
      			if sAction =URL_RETURN3DS then
      sListParameters	+= ["&"] + "amount=" + (Transaction.Amount*100) + "&reference=" + Transaction.OrderNumber
      nParameterSubscriptToTransmit=1
      				if not OnPayBoxDirect3DSecurePaymentReturn( nMode,sInformation) then
      					XERROR("PayBox 3DS verification failed:"+sInformation)
      				else				
      					//add the parameters of direct transaction validation
      					for each sParameterValue,sParameterName of COL_SECUREPAYMENT.IncomingParameters
      sListParameters+=["&"]+sParameterName+"="+sParameterValue
      					end	
      				end
      			else
      				if sAction = URL_S2S  then
      nParameterSubscriptToTransmit=1
      				else
      nParameterSubscriptToTransmit=2
      				end
      				// Manage the PayBox return
      				if not OnPaymentReturnPayBox(sAction,nMode, sInformation) then
      					XERROR("Failure of PayBox check: "+sInformation)
      				end
      				if nMode<>PAYMENT_VALID then
      sListParameters	+= ["&"]+"error=" +sInformation
      				else
      					if CardRemember then
      sListParameters	+= ["&"]+"refsubs=" +SubsReference					
      					end					
      				end
      			end
      			
      		//PayPal payment?
      		case :Supplier = PayPal
      
      nParameterSubscriptToTransmit=2		
      			//if ToKenCheck("token",nMode,sInformation) THEN
      				switch sAction
      					case URL_OK
      						//for PayPal, the payment is not validated but given (it can be requested)
      nMode=PAYMENT_AGREEMENT
      						XTRACE("PAYMENT_AGREEMENT")
      					case URL_CANCEL
      nMode=PAYMENT_CANCELED
      						XTRACE("PAYMENT_CANCELED")
      						
      					case URL_REFUSED
      nMode=PAYMENT_REFUSED
      						XTRACE("PAYMENT_REFUSED")
      						
      					other case
      nMode=PAYMENT_REFUSED
      						XTRACE("PAYMENT_REFUSED ("+sAction+")")
      				end
      sListParameters	+= ["&"] + "amount=" + (Transaction.Amount * 100) + "&reference=" + Transaction.OrderNumber
      						
      		//Lyra payment (Systempay, CaisseEpargne...)
      		case (:Supplier & Lyra) = Lyra, :Supplier = Systempay_old, :Supplier = CaisseEpargne
      nParameterSubscriptToTransmit=1
      			if not OnReturnLyraPayment(nMode, sInformation,sAction) then			
      				XERROR("The Lyra check failed: "+sInformation)
      			end
      			
      		//BanquePopulaire payment?	
      		case :Supplier = BanquePopulaire
      nParameterSubscriptToTransmit=3
      			if not OnPaymentReturnCyberPayment(sAction,nMode, sInformation) then
      				XERROR("Failure of CyberPaiement check: "+sInformation)
      			end
      				
      	
      	
      		//OgoneECommerce payment?
      		case :Supplier = OgoneECommerce
      nParameterSubscriptToTransmit=7
      			// Manage the Ogone return
      			if not OnPaymentReturnOgone(sAction,nMode, sInformation) then
      				XERROR("Failure of Ogone check: "+sInformation)
      			end
      sListParameters	+= ["&"] + "amount=" + (Transaction.Amount * 100) + "&reference=" + Transaction.OrderNumber
      			
      			//Saferpay?
      		case :Supplier = Saferpay
      nParameterSubscriptToTransmit=2
      			// Manage the Saferpay return
      			if not OnPaymentReturnSaferpay(nMode, sInformation,sAction,sListParameters) then
      				XERROR("Failure of Saferpay check: "+sInformation)
      			end
      sListParameters	= "amount=" + (Transaction.Amount * 100) + "&reference=" + Transaction.OrderNumber+["&"]+sListParameters
      
      			//Datatrans?
      		case :Supplier = Datatrans
      nParameterSubscriptToTransmit=2
      			// Manage the Saferpay return
      			if not OnReturnDatatransPayment(nMode, sInformation,sAction) then
      				XERROR("Failure checking Datatrans: "+sInformation)
      			end
      sListParameters	= "amount=" + (Transaction.Amount * 100) + "&reference=" + Transaction.OrderNumber+["&"]+sListParameters
      			
      		//BanquePopulaire payment?	
      		case :Supplier = DataCash_Mastercard
      nParameterSubscriptToTransmit=3 //don't use the "URL_RETURN" action
      			if not OnReturnDataCashMastercardPayment(sAction,nMode, sInformation) then
      				XERROR("The DataCash MasterCard check failed: "+sInformation)
      			else
      				//vpc_Amount=25000
      				//vpc_OrderInfo=ORD2018012209251059
      				//vpc_TransactionNum=1100000032
      sListParameters	+= ["&"] + "amount=" + (Transaction.Amount*100) + "&reference=" + Transaction.OrderNumber
      			end
      			
      		//Realex payment?
      		case :Supplier = Realex
      		
      		// Manage the Realex return
      		if not OnRealexPaymentReturn(sAction,nMode, sInformation) then
      			XTRACE(XERROR("Realex verification failed:"+sInformation))
      		end
      sListParameters	+= ["&"] + "amount=" + (Transaction.Amount * 100) + "&reference=" + Transaction.OrderNumber
      		
      		
      		other case
      			XERROR("Return of supplier "+:Supplier+" Not implemented")
      			DisplayStringInHTML("Supplier return not supported")
      			
      			
      	end
      	
      	//if Provider <> PayPal  then
      		switch nMode
      			case PAYMENT_CANCELED
      sListParameters +=["&"]+ URL_CANCEL
      			case PAYMENT_REFUSED
      sListParameters +=["&"]+ URL_REFUSED
      			case PAYMENT_VALID,PAYMENT_AGREEMENT
      sListParameters +=["&"]+ URL_OK
      			case PAYMENT_WAIT
      sListParameters +=["&"]+ URL_S2S
      			other case
      sListParameters +=["&"]+ URL_REFUSED
      		end	
      	//end
      	
      		
      sReturnURL is string
      	//Is it a s2s return?
      	if sAction in (URL_S2S,URL_S2S3DS) then			
      		//Yes			
      		//in any case, the URL of the application to contact is the S2S URL
      		//and update the file if OK in the S2S section
      sReturnURL=GetURLServerCall(Transaction.TransactionID,(nMode in (PAYMENT_VALID,PAYMENT_AGREEMENT)))	
      	else
      		//according to the mode
      		switch nMode
      			// Transaction accepted
      			case PAYMENT_VALID,PAYMENT_AGREEMENT
      sReturnURL=GetURLPaymentValidation(Transaction.TransactionID)		
      			// Payment refused
      			case PAYMENT_REFUSED
      sReturnURL=GetURLPaymentRefusal(Transaction.TransactionID)		
      				
      			// Transaction canceled
      			case PAYMENT_CANCELED
      sReturnURL=GetURLPaymentCancelation(Transaction.TransactionID)		
      			// Case not managed
      			other case
      sReturnURL=GetURLPaymentRefusal(Transaction.TransactionID)		
      		end			
      	end
      	
      	// Regenerates the list of parameters received
      	while PageParameter(nParameterSubscriptToTransmit) <> ""
      sListParameters += ["&"] + PageParameter(nParameterSubscriptToTransmit,paramNoDecoding)
      nParameterSubscriptToTransmit ++
      	end
      	
      	// Renames the NCERROR parameter
      	if Supplier = OgoneECommerce then
      sListParameters = Replace(sListParameters, "STATUS", "error", IgnoreCase+WholeWord)
      	end
      	
      	// Call the WEBDEV site (return URL)
      	
      	if Position(sReturnURL,"?")>0 then
      sListParameters=sReturnURL[[Position(sReturnURL,"?")+1 to]]+"&"+sListParameters
      sReturnURL=sReturnURL[[to Position(sReturnURL,"?")-1]]
      	end
      	
      	//If it is a server to server action? 
      	if sAction=URL_S2S then				
      		//A/R to the bank
      		if (Supplier & MoneticoPaiementOld) = MoneticoPaiementOld then
      				XTRACE("Acknowledgements of receipt return server to server MoneticoPayment")
      				StringDisplay([
      				version=2
      				cdr=0
      				
      				],"text/plain")	
      		else			
      			XTRACE("Acknowledgements of receipt return server to server")
      StringDisplay("S2S return done","text/plain")	
      		end
      			
      		//call the script
      		
      		//stemps=ScriptExecute(sReturnURL, sListParameters)	
      		//httprequest to pass the parameters in POST
      		
      
      <if CibleEx√©cution=SiteWindows>
      HTTPParameter(httpParameterMode, 1) //uses the Wininet layer (Internet Explorer)
      	
      <end>
      
      	
      		//Adds an information that allows the code of the caller to check whether it is the call from server to server
      sListParameters+="&"+PARAM_RETURNS2S
      		
      		XTRACE("Return from server to server, call to site action in S2S <"+sReturnURL+">")
      		sRequestReturn 	is string
      		bRequestOK 		is boolean
      		if ReturnS2SEnGET then
      			(bRequestOK,sRequestReturn) = WebRequest(<sHTTPURL>: sReturnURL+["?"]+sListParameters,<nMethod>: httpGet,<bWithCookie>: True)
      		else		
      			(bRequestOK,sRequestReturn) = WebRequest(<sHTTPURL>: sReturnURL,<sContent>:sListParameters,<nMethod>: httpPost,<bWithCookie>: True)
      		end
      		if not bRequestOK then
      			XTRACE("Site code call failure for action S2S: <"+sRequestReturn+">")
      		else
      			XTRACE("Site action S2S OK, first 100 characters returned: <"+sRequestReturn[[ to 100]]+">") 
      		end
      	else	
      		//Otherwise, return to the store
      		XTRACE("Payment return call to return to site store <"+sReturnURL+">")
      		//therefore, the browser of the Web user must call the return URL
      		ScriptDisplayPOST(sReturnURL, sListParameters)		
      	end
      	
      return True
      
      case exception:
      	XERROR("Exception in OnPaymentReturn: "+ExceptionInfo(errFullDetails))
      	DisplayStringInHTML("Exception in OnPaymentReturn. "+ExceptionInfo(errFullDetails))		
      	return False
      	
      end:
      	// Marks the payment according to the mode
      	MarkPayment(Transaction.OrderNumber, nMode, sListParameters, sInformation)	
     type : 458752
   -
     name : OnReturnMoneticoPaiementPayment
     internal_properties : CAAAAAgAAAAImAzwELRR28hUkqWfUI9TW1fSDPTgBIQMcRL5jd7g2L09iKvYcFD50s+U/ciuf3HhV48junvxnvpezZewK0CL32ium5ga0nCrcZ1moBUPA2oM4dCJzVMClM2BzPrj7ABFGaUcq91emuQkXgyotsJZEtnqqtb+0tqDzyJVzzjJNwRHfDPKmphoEFKwO3OYwGQwVU5Yybe61bx67BcX9i/xF0ds1QyjpZSjkoMysfOSykNRngwwDF2vvCo6tl6usxgL
     procedure_id : 2220122836609120555
     type_code : 12
     group : 3
     code : |1-
      // Summary: Manage the MoneticoPaiement return
      // Syntax:
      //[ <Result> = ] OnMoneticoPaiementPaymentReturn (<sAction> is string, <nMode> is int, <sInformation> is string)
      //
      // Parameters:
      //	sAction (ANSI string): value among	URL_S2S, URL_CANCEL, URL_REFUSED, URL_OK
      //	nMode (integer): (output) Return mode
      //	sInformation (ANSI string): (output) Information about the return management
      // Return value:
      // 	boolean:         True if the return was managed, False otherwise
      //
      procedure public OnReturnMoneticoPaiementPayment(sAction is string,nMode is int, sInformation is string)
      
      	// Reset errors
      	XERROR()
      	
      sData		is string
      sMACKey			is string
      sHTTPHeader		is string
      	
      
      	
      	if sAction = URL_S2S then		
      		//S2S return 
      
      		// Check the issuer IP
      		// For the calls from servers to servers (URL called "Direct HTTP")
      		if not BankServerCheckAddress(nMode, sInformation)	 then
      			return False
      		end
      		
      		RetrieveParametersReceived()
      sData=MoneticoPrepareSignature(m_arrFormParameters)
      		// Creates the MAC key
      sMACKey = EncodeMAC(sData,True,AlgorithmHash)
      		
      		// If the MAC key differs from the one received in parameter, then the payment is forged
      		if not sMACKey ~= PageParameter("MAC") then
      			
      			// Saves as being forged
      nMode = PAYMENT_FORGED	
      sInformation += [CR] + StringBuild("The MAC key does not correspond (Calculated key: %1; Key received: %2, data: %3", sMACKey, PageParameter("MAC"),sData)
      			XERROR(sInformation)
      		else
      			XTRACE("MAC key verified successfully")
      			XTRACE("authentication  = "+Decode(PageParameter("authentication"),encodeBASE64URL))
      						// authentication: JSON/UTF-8 document encoded in base64 containing information related to customer authentication, especially for 3DSecure. 
      	//					status  Authentication result   
      	//					protocol  Protocol used   
      	//					version  Protocol version   
      	//					d√©tails  Details specific to the protocol and to the version   
      	//							liabilityShift  Liability shift   
      	//							VERes  Result contained in the VERes message   
      	//							PARes  Result contained in the PARes message   
      	//							ARes  Result contained in the ARes message   
      	//							CRes  Result contained in the CRes message   
      	//							merchantPreference  Merchant preference   
      	//							transactionID  Transaction identifier   
      	//							authenticationValue  Cryptogram linked to the transaction   
      	//							status3DS  3DSecure 1.X exchange indicator   
      	//							disablingReason  Reason for disabling 3DSecure 1.X  
      		end	
      
      
      			bNotOK is boolean
      			bNotOK=(nMode = PAYMENT_FORGED)
      			
      			if not bNotOK then
      				// Overloads the return mode according to the specified return code
      				switch Lower(PageParameter("code-retour"))
      					case "payetest"
      nMode = PAYMENT_VALID
      						XTRACE("test payment OK")
      					case "paiement"
      nMode = PAYMENT_VALID				
      						XTRACE("paymentOK")
      					case "annulation"
      nMode = PAYMENT_CANCELED
      						XTRACE("payment canceled")
      					other case 
      nMode = PAYMENT_FORGED
      						bNotOK=True
      						XTRACE("payment falsified")
      				end
      			else
      nMode = PAYMENT_FORGED
      				XTRACE("payment falsified")
      			end
      		
      				// Sends the acknowledgement of receipt OK to the CM-CIC server
      sHTTPHeader = StringBuild([
      version=2
      cdr=%1
      					
      			],bNotOK)
      			// Sends the acknowledgement of receipt not OK to the CM-CIC server
      StringDisplay(sHTTPHeader, "text/plain")
      	else
      		// Retrieves the TOKEN and checks it
      		if not TokenCheck("prvtk", nMode, sInformation) then return False
      		switch sAction
      			case URL_CANCEL
      nMode=PAYMENT_CANCELED
      			case URL_OK
      nMode=PAYMENT_VALID
      			other case //CASE URL_REFUSED
      nMode=PAYMENT_REFUSED
      		end
      		
      		
      	end
      		
      			
      	
      	
      return True
     type : 458752
   -
     name : MarkPayment
     internal_properties : CAAAAAgAAAC0lkByDlAZIlhxtjpWAqjd5oLTpimXa34bhqD5LYuqLmJT05DYr0XJQbNoFreOHMbTvCLZvV5RxcTAM1TjUGgikVE3cV6TeBdfrl+T/xLugHCgj7G6iQvbxmdIqdoF5mCvs0vfJZ4Xfyxjz2NOrEykfJ/sm2CdMRdhuqfgP+DZ1S0Ecyf7Mpu167wotEabLDiZ5SwhEQ==
     procedure_id : 2220122836609186091
     type_code : 12
     code : |1-
      // Summary: Marks a payment
      // Syntax:
      //MarkPayment (<vOrderNumber>, <nPaymentStatus> is int [, <sParameters> is string [, <sInformation> is string]])
      //
      // Parameters:
      //	vOrderNumber: Order number
      //	nPaymentStatus (integer): Status of payment
      //	sParameters (ANSI string - default value=""): Parameters received during the return
      //	sInformation (ANSI string - default value=""): Information for the payment
      // Return value:
      // 	None
      //
      procedure private MarkPayment(local vOrderNumber, local nPaymentStatus is int, local sParameters is string = "", local sInformation is string = "")
      
      	// Reset errors
      	XERROR()
      
      HReadSeekFirst(Transaction, OrderNumber, vOrderNumber)
      	if HFound(Transaction) then
      		
      		//is it to validate?
      		if nPaymentStatus = PAYMENT_VALID then
      			//Yes, check the previous status
      			//ok if pending payment or abandon 
      			//(but not OK if the payment was already refused!)
      			if Transaction.Status in (PAYMENT_AGREEMENT,PAYMENT_WAIT,PAYMENT_CANCELED) then
      				// Saves the state
      				Transaction.Status = PAYMENT_VALID				
      				// Saves the payment date
      				Transaction.PaymentDate = Today + Now		
      			end
      		else
      			// Saves the state
      			Transaction.Status = nPaymentStatus			
      		end
      		
      		// Saves the parameters received
      		if sParameters <> "" then
      			Transaction.Parameters +=[CR]+ sParameters
      		end
      		
      		// Saves the information
      		if sInformation <> "" then
      			Transaction.Information +=[CR]+ sInformation
      		end
      		
      HModify(Transaction)			
      	else
      		
      		XERROR("Order or transaction not found")
      	end
     type : 458752
   -
     name : OnPaymentReturnPayBox
     internal_properties : CAAAAAgAAAD/EjmT688elqut8P+aiB/OC/AHmqZj13Rr6iIzLxcpK3gKnrvMMAE9ZdyG0rRw+2fJj5Yc0zdiPmXOYzbMND4DRT2sKtPxeEALMIeFFAp5ji/TZHQvVZgcgLohXgm2QhJ0rHtvPVBOQwevwBVevHg/8vyNpAe1oHprPCKRa4/AiqDXUUh9H1MbsFlPaDyQSgofA3Fv85WvMuTWSZc/MWKWqT2S4iGqQg6U9NUW5pRSU5TqGaJSJXygTtBRpnwQ69yLXW+GtepkXa9wv1t+1sdOPJLAHFXUBoexjdnPMxw0tBCjK26V75fzQZW7XmKWKH8aPqrH01PUFsBCDHiGRPD67KXwd31uasDC1vA+DW7dAfEpdkySHRqbWMATkpY6hYXkHTXYyPYW5OdiHvOCxNRgQhXme5EG3jJ4L6pfI49natxOiJisDVJn7kcEMa2zPO3tNIJe1g==
     procedure_id : 2220122836609251627
     type_code : 12
     group : 3
     code : |1+
      // Summary: Managing the PayBox return
      // Syntax:
      //[ <Result> = ] OnPayBoxPaymentReturn (<sAction> is string, <nMode> is int, <sInformation> is string)
      //
      // Parameters:
      //	sAction (ANSI string): value among	URL_S2S, URL_CANCEL, URL_REFUSED, URL_OK
      //	nMode (integer): (output) Error mode
      //	sInformation (ANSI string): (output) Information about the return
      // Return value:
      // 	boolean:      True if the return was managed
      //
      procedure OnPaymentReturnPayBox(sAction is string,nMode is int, sInformation is string) : boolean
      	
      sSignature	is string 
      	// Reset errors
      	XERROR()
      	
      	// CardToken =  subscard=SLDLrcsLMPC  1903  ---
      	
      	//S2S return?
      	if sAction = URL_S2S then
      		// Check the IP of the issuer, must be a PayBox IP
      		// For the calls from servers to servers (URL called "Direct HTTP")
      		// the IP of the PayBox server corresponds (see p.22 of PayBox documentation): 195.101.99.76 or 194.2.122.158 
      		if not BankServerCheckAddress(nMode, sInformation)	 then
      			return False
      		end
      	end
      sParamList		is string
      	//Parameters received
      sParamList = ListIncomingParameters()
      
      	if CardRemember then
      		CardToken 			=  ExtractString(COL_SECUREPAYMENT.IncomingParameters["subscard"],1,"  ")
      		CardExpiryDate	=  ExtractString(COL_SECUREPAYMENT.IncomingParameters["subscard"],2,"  ")
      		CardCVV			=  ExtractString(COL_SECUREPAYMENT.IncomingParameters["subscard"],3,"  ")			
      		UpdateObjectTransaction()
      	end
      	
      	// Check the signature if the public key file was given in parameter
      	if not (nMode = PAYMENT_FORGED) _and_ CheckPayBoxSignature then
      		
      		sSignatureRes	is string
      		
      				
      
      	
      	// Loads the PayBox key
      	sNamePayboxPublicKey	is string
      	//to update the paybox public key without recompiling
      	if fFileExist(fSeparator(m_sDirectoryPublicKeyFile + [fSep] + "pubkey.txt")) then
      		sNamePayboxPublicKey=fSeparator(m_sDirectoryPublicKeyFile + [fSep] + "pubkey.txt")
      	else if fFileExist(fSeparator(m_sDirectoryPublicKeyFile + [fSep] + "pubkey.pem")) then
      			sNamePayboxPublicKey=fSeparator(m_sDirectoryPublicKeyFile + [fSep] + "pubkey.pem")
      	else
      		// "paybox_pubkey.pem" is a file included in the dependencies of the SecurePayment component
      		if InTestMode() _and_ not InComponentMode() then
      			//in test mode with the external component: no library, file path needed			
      			sProjectPath is string
      			<if CibleEx√©cution=Windows>
      				sProjectPath=RegistryQueryValue("HKEY_LOCAL_MACHINE\SOFTWARE\"+(In64bitMode() ? "" else "WOW6432Node\")+"PC SOFT\WEBDEV\"+ExtractString(WINDEVVersion(versionVM),1,".")+".0\Applications\"+ProjectInfo(piNameDeployedSite),"PROJECTPATH")			
      			<else>
      				sProjectPath=fDataDir()
      				
      			<end>
      			sNamePayboxPublicKey = sProjectPath+fSep+"SecurePayment"+fSep+"paybox_pubkey.pem"			
      		else
      			//is in the library/component, no path needed
      			sNamePayboxPublicKey =FolderPublicKeyFile+[fSep]+"paybox_pubkey.pem"			
      			if not fFileExist(sNamePayboxPublicKey) then
      					fExtractResource("paybox_pubkey.pem",sNamePayboxPublicKey)			
      			end
      		end
      	end
      
      	
      	if sAction = URL_S2S then
      		
      		//	during the Paybox response from server to server (URL IPN), only the information requested in the PBX_RETURN variable are signed,
      		// m_sPayboxReturnVariables = "amount:M;reference:R;auto:A;trans:T;abo:B;payment:P;card:C;transid:S;error:E;sign:K"
      		// m_sPayboxReturnVariablesWithSubscription = "amount:M;reference:R;auto:A;trans:T;subs:B;payment:P;card:C;transid:S;error:E;subscard:U;sign:K"
      		sPayboxReturnVariables is string
      		if CardRemember then
      			sPayboxReturnVariables=m_sPayboxReturnVariablesWithSubscription
      		else
      			sPayboxReturnVariables=m_sPayboxReturnVariables
      		end
      sParamList=""
      		FOR EACH ELEMENT sValue,sName of COL_SECUREPAYMENT.IncomingParameters
      			if sName <> "sign" _and_ Position(sPayboxReturnVariables,sName,0, IgnoreCase+WholeWord)>0 then
      sParamList+=["&"]+sName+"="+sValue		
      			end
      		end		
      		
      	else
      		//	in the 4 other cases (redirection via the client browser,PBX_EFFECTUE, PBX_REFUSE et PBX_ANNULE, PBX_ATTENTE), it is the data found after ‚Äò ? ‚Äò 
      		// (the URL parameters).
      		// Retrieves the position of the parameter containing the signature
      		
      		
      		nPosSignature is int=Position(sParamList, "&sign=")
      		nPosNext is int=Position(sParamList, "&",nPosSignature+1)
      		if nPosNext>0 then
      sParamList=sParamList[[to (nPosSignature-1)]]+sParamList[[nPosNext to]]
      		else
      sParamList=sParamList[[to (nPosSignature-1)]]  //the signature us at the end, remove it
      		end
      		
      	end
      	
      sParamList=URLEncodeSpaces(sParamList) //URL encode spaces
      sSignature = COL_SECUREPAYMENT.IncomingParameters["sign"]
      	
      	// Checks the signature
      	when exception in
      		//sSignatureRes = (OpenSSLCheck(sParamList, sSignature, sKey) ? "1" ELSE "0")		
      		sSignatureRes = (CertificateCheckString(sParamList,Decode(Replace(sSignature,CR,""),encodeBASE64URL),sNamePayboxPublicKey,"","",certSignatureOnly+certSHA160)=certificateOk  ? "1" else "0")		
      	do
      		sSignatureRes="0"
      sInformation+=[CR]+"PayBox signature verification failed"+CR+ExceptionInfo()
      	end
      		if sSignatureRes <> "1" then
      nMode = PAYMENT_FORGED
      sInformation += [CR] + StringBuild("PayBox server signature not recognized ("+(CardRemember ? "card stored" else "")+") : " + sSignatureRes)+CR+sParamList+CR+sNamePayboxPublicKey
      			XERROR(sInformation)
      		else
      			XTRACE("SSL signature successfully checked")
      		end
      	end	
      	
      	//payment OK?
      	if not nMode in (PAYMENT_FORGED) _and_ (PageParameter("auto")<>"" _and_ PageParameter("error")="00000") then
      		//payment OK
      nMode = PAYMENT_VALID
      	else	
      		//canceled?
      		if sAction=URL_CANCEL then
      nMode = PAYMENT_CANCELED
      		else
      			//Otherwise, consider the paiement as being refused 
      nMode = PAYMENT_REFUSED
      		end
      		
      		//error
      		switch PageParameter("error")
      			// 00000    operation successful. 		
      			case "00000"
      				//no action
      				XTRACE("No error code (operation successful)")
      				
      			// 001xx    payment refused by the authorization center (the "xx" characters represent the code returned by the center.)		
      			case "00100" < * < "00199"
      sInformation+="Payment refused by the authorization center"
      				XERROR(sInformation)
      				
      			case "00001"
      sInformation+="The connection to the authorization center failed."
      				XERROR(sInformation)
      			// 00003    PayBox error. 
      			case "00003"
      sInformation+="Paybox error"
      				XERROR(sInformation)
      			// 00004   	invalid holder number or visual cryptogram. 
      			case "00004"
      sInformation+="invalid holder number or visual cryptogram."
      				XERROR(sInformation)
      			// 00006    access refused or incorrect site/rang/identifier. 
      			case "00006"
      sInformation+="access refused or incorrect site/rang/identifiant."
      				XERROR(sInformation)
      			// 00008    incorrect validity end date. 
      			case "00008"
      sInformation+="incorrect validity end date."
      				XERROR(sInformation)
      			// 00009    behavior check error 
      			case "00009"
      sInformation+="behavior check error"
      				XERROR(sInformation)
      			// 00010    unknown currency. 
      			case "00010"
      sInformation+="unknown currency."
      				XERROR(sInformation)
      			// 00011    incorrect amount. 
      			case "00011"
      sInformation+="incorrect amount."
      				XERROR(sInformation)
      			// 00015    payment already done
      			case "00015"
      sInformation+="payment already performed"
      				XERROR(sInformation)
      			// 00016    subscriber already found (registration of new subscriber). ‚ÄòU‚Äô value of the PBX_RETURN variable.
      			case "00016"
      sInformation+="subscriber already found (registration of new subscriber). ‚ÄòU‚Äô value of PBX_RETURN variable"
      				XERROR(sInformation)
      			// 00021    unauthorized card bin. 
      			case "00021"
      sInformation+="unauthorized card bin."
      				XERROR(sInformation)
      			case "00029"
      sInformation+="Incorrect card (BX_PRINT)."
      				XERROR(sInformation)
      			case "00030"
      sInformation+="Time-out > 15 mn."
      				XERROR(sInformation)
      			case "00033"
      sInformation+="Country code of the IP address of the browser of the unauthorized buyer."
      				XERROR(sInformation)
      			other case
      sInformation+="return error code <"+PageParameter("error")+"> unexpected"
      				XERROR(sInformation)
      				
      		end
      sInformation += " (code " + PageParameter("error") + ")"
      		if nMode = PAYMENT_FORGED then sInformation += ". This payment reference was marked as forged."
      	end
      	
      return True
     type : 458752
   -
     name : XTRACE
     internal_properties : CAAAAAgAAABYA3VRhWOK0aCLH7ZuEG9qWoypHWU2me6hccKuimSVAVH5TTBMfAzvdksRaEYprD8E/33PcesJ9fcBWDFslOTfein5g+yjlkYFsp5r38Ua2RKF11wBJVfmKbEVDNrapkZY2QeFEMqa8LpwReQXmzzpTZj8aXbTd9Z3y0HXH/1Sb0rI
     procedure_id : 2220122836609317163
     type_code : 12
     code : |1-
      // Summary: Trace
      // Syntax:
      //XTRACE ([...])
      //
      // Parameters:
      // 	<*>: <specify the role of <*>>
      // Return value:
      // 	None
      //// Automatic process of exceptions:   run CASE EXCEPTION:
      //
      
      Proc√©dure XTRACE(*)
      
      sTrace est une cha√Æne
      // Concatenates all the lines
      POUR i = 1 _a_ MesParam√®tres..Occurrence
      	sTrace += [RC] + MesParam√®tres[i]
      FIN
      	
      SI MesParam√®tres..NbRe√ßus>0 _et_ m_nTransactionID>0 _ET_ HLitRecherchePremier(Transaction,TransactionID,m_nTransactionID) ALORS
      	Transaction.Loginfo += [RC]+"- "+DateVersCha√Æne(DateHeureSys(),"MM/DD/YYYY at HH:mm:SS AP")+", information: "+sTrace
      	HModifie(Transaction)
      FIN
      
      CAS EXCEPTION:
     type : 458752
   -
     name : XERROR
     internal_properties : CAAAAAgAAABYA3VRhWOK0aCLH7ZuEG9qWoypHWU2me6hccKuimSVAVH5TTBMfAzvdksRaEYprD8E/33PcesJ9fcBWDFslOTfein5g+yjlkYFsp5r38Ua2RKF11wBJVfmKbEVDNrapkZY2QeFEMqa8LpwReQXmzzpTZj8aXbTd9Z3y0HXH/1Sb0rI
     procedure_id : 2220122836609382699
     type_code : 12
     code : |1-
      // Summary: Saves an error
      // Syntax:
      //[ <Result> = ] XERROR ([...])
      //
      // Parameters:
      // 	<*>: <specify the role of <*>>
      // Return value:
      // 	ANSI string: Error saved
      //
      // 	<*>: <specify the role of <*>>// Automatic process of exceptions:   run CASE EXCEPTION:
      //
      
      // 	<*>: <specify the role of <*>>
      Proc√©dure privee XERROR(*)
      
      	sError est une chaine
      	
      	// Reset errors if no message was passed as parameter
      	Si MesParametres..NbRe√ßus = 0 ALORS 
      		m_sErrorInfo = ""
      		renvoyer ""
      	FIN
      	
      	// Concatenates all the lines
      	pour i = 1 _a_ MesParam√®tres..Occurrence
      		sError += [rc] + MesParam√®tres[i]
      	FIN
      		
      	// Keeps the error	
      	m_sErrorInfo += [rc] + sError
      	
      	si MesParam√®tres..NbRe√ßus >0 _et_ m_nTransactionID>0 _et_ HLitRecherchePremier(Transaction,TransactionID,m_nTransactionID) ALORS
      		Transaction.Loginfo += [rc]+"- "+DateVersCha√Æne(DateHeureSys(),"MM/DD/YYYY at HH:mm:SS AP")+", Error: "+sError
      		HModifie(Transaction)
      	FIN
      	
      renvoyer sError
      CAS EXCEPTION:
     type : 458752
   -
     name : LanguageToDirectory
     procedure_id : 2220122836609448235
     type_code : 12
     code : |1-
      // Summary: Returns the directory code of a language
      // Syntax:
      //[ <Result> = ] LanguageToDirectory ()
      //
      // Parameters:
      //	None
      // Return value:
      // 	string: Directory code
      //
      Proc√©dure globale LanguageToDirectory()
      
      	selon nation()
      		cas 1 : renvoyer "DE/"
      		cas 2 : RENVOYER "US/"
      		cas 3 : RENVOYER "UK/"
      		cas 4 : RENVOYER "AU/"
      		cas 5 : RENVOYER "UK/"
      		cas 6 : RENVOYER "DK/"
      		cas 7 : RENVOYER "ES/"
      		cas 8 : RENVOYER "FI/"
      		cas 9 : RENVOYER "CAFR/"
      		cas 10 : RENVOYER "IS/"
      		cas 11 : RENVOYER "IT/"
      		cas 12 : RENVOYER "NL/"
      		cas 13 : RENVOYER "PO/"
      		cas 14 : RENVOYER "PT/"
      		cas 15 : RENVOYER "BRPT/"
      		cas 16 : RENVOYER "RU/"
      		cas 17 : RENVOYER "SU/"
      		cas 18 : RENVOYER "TC/"
      		AUTRE CAS
      			renvoyer "L" + nation() + "/"
      	FIN
     type : 458752
   -
     name : ATOSPayment_FromBank
     internal_properties : CAAAAAgAAADEw4vBOId1BsQ6rRRgVyZXlqA/p1XMMnQgOnseo2+XZfbVpxBSFS3IvcPUsv6vYdJw2X+RSLxsc9OR3thwY1wvAJSDVi2VoB1z0nxcV1A/kImOo2BEdVgGBvbTwg+5d9KhS0/JHl8fzOjUo9Z1XWl8qiROzF+dCJCamkmfEsZr7XSB4Lv7VFvuQ/Ly4C8jW/7VcjQtMkhMm9SPJaQWFDTBijPCmbLi3nV1dIDUY1z+hMtp1llbjoNdZO1oMe2KFU0MMDn46zXjqwK4pXaB5p9kNKOP4/hOcuAIaW2C0O1gQUb2S3rL5CtFGZdNjyPHcgLdStl0XTlC/OD61Lv9WexQy2X2OpiKAxQfDEVZxXnNkG2VyOK3PMk0c5dslohAypKTgb/p9ZB0K3LjpDCjS1MruA1f4LKFQTPjSDp4LnEvN9UGPk0b52bhCnQluiuXEC6j18nha1al3ixahNA4RHizOklo2P8Z3IC97d1qObrGEtPbyhou3H10JDMVHBLJP4SRqBKH5rCyUFdEOMSdpZCu4TY1doa45fwIBm5iIaqE7JXxCNrvjp/Kg25og5KonOHqO5ZYpZWcemcU2PSB/nhYTkMe15RbzukmhwMZTn0jcLaAqhGhPjIasfiVBwyChJoVgbluEgW3i5jWzmKOotdKZG7aStLLpDAyZJnF5rNBlR9esF62VV4JEm2pVXAQwqqaXhS2GI5u1cyXP3NTJZZSgBJ1y+sV82JL+oTFQKLHoB8R3aYh1VAqWdy+5gTDljGDlP8kAlVAtHW4YFFrAt3dUl/PWclKZXQ+9xcKRW4=
     procedure_id : 2220122836609513771
     type_code : 12
     group : 3
     code : |1+
      // Summary: Performs the request for payment via SIPS
      // Syntaxe :
      //[ <R√©sultat> = ] ATOSPayment_FromBank (<cyAmount> est mon√©taire, <sEmailAddress> est cha√Æne)
      //
      // Param√®tres :
      //	cyAmount (mon√©taire) : Amount of payment to perform
      //	sEmailAddress (cha√Æne ANSI) : Email address of the customer
      // Traitement automatique des exceptions :   ex√©cuter le bloc de code CAS EXCEPTION:
      //
      
      // Return value:
      // 	boolean: // 	None
      // Automatic process of exceptions:   run CASE EXCEPTION:
      Proc√©dure privee ATOSPayment_FromBank(local cyAmount est un mon√©taire, local sEmailAddress est une chaine)
      
      	// Reset errors
      	XERROR()
      	
      	bReturn 	 		 est un bool√©en
      	sRequestReturn	 	 est une chaine
      	sQueue		 		 est une chaine ansi
      	sSupplier 		 est une chaine
      	sFormData 	est une chaine ansi
      	sResultFile 	 est une cha√Æne
      	sCommandLine 		 est une chaine
      	bStartupResult 	 est un bool√©en
      	sBatchFile		est une chaine
      	
      	// Assign the mandatory parameters
      	sFormData += AddFormControl("pathfile", PathFile + [fsep] + "pathfile", *, *, "CMD")
      	sFormData += AddFormControl("merchant_id", CompanyCode, *, *, "CMD")
      	sFormData += AddFormControl("amount", Remplace(Num√©riqueVersCha√Æne(cyAmount, ".2f"), ".", ""), *, *, "CMD")
      	sFormData += AddFormControl("currency_code", CurrencyToCodeISO4217(), *, *, "CMD")
      	// Identifier of transaction
      	sFormData += AddFormControl("transaction_id", m_sTransactionIdentifier, *, *, "CMD")
      	// Other parameters
      	sFormData += AddFormControl("normal_return_url", PaybackURL(URL_OK), *, *, "CMD")
      	sFormData += AddFormControl("cancel_return_url", PaybackURL(URL_CANCEL), *, *, "CMD")
      	sFormData += AddFormControl("automatic_response_url", PaybackURL(URL_S2S), *, *, "CMD")
      	sFormData += AddFormControl("language", Minuscule(Language), *, *, "CMD")
      	sFormData += AddFormControl("customer_email", sEmailAddress, *, *, "CMD")
      	sFormData += AddFormControl("order_id", OrderNumber, *, *, "CMD")
      	sFormData += AddFormControl("return_context", m_sToken, *, *, "CMD")
      	sFormData += AddFormControl("capture_day", 0, *, *, "CMD")
      	
      	// Custom data
      	POUR TOUT sValue,sControlName DE m_aaParamDelPaymentForm
      		SI TableauCherche(m_arrFormParameters, tcLin√©aire, "Name", sControlName) <= 0 ALORS
      			sFormData += AddFormControl(sControlName,sValue, *, *, "CMD", vrai)
      		fin
      	FIN
      	
      	si NameAtosSupplier="" ALORS
      		
      		// Defines the name of the provider for the setting file
      		SELON Supplier
      			CAS Soci√©t√©G√©n√©rale
      				sSupplier = "sogenactif"
      				
      			CAS Cr√©ditAgricole
      				sSupplier = "e-transactions"	
      				
      			CAS LaBanquePostale
      				sSupplier = "scellius"
      				
      			CAS BNP
      				sSupplier = "mercanet"
      				
      			CAS CreditLyonnais
      				sSupplier = "sherlocks"
      				
      			CAS CreditDuNord
      				sSupplier = "webaffaires"
      				
      			CAS Atos
      				sSupplier = NameAtosSupplier
      				
      			AUTRE CAS
      				sSupplier = ""
      		FIN
      	sinon
      		//takes the specified provider
      		sSupplier = NameAtosSupplier
      	FIN
      	
      	// Generates the PathFile
      	sQueue = <¬ß$0000¬ß>
      	sQueue = Cha√ÆneConstruit(sQueue, PathFile + [fsep] , ("NO"), FolderWebLogo, "", sSupplier)
      //	sFile += StringBuild(sFilem ShortPath(PathFile) + [fsep], ("NO"), WebDirLogo, "", sSupplier)
      	si pas fSauveTexte(PathFile + [fsep] + "pathfile", sQueue) ALORS
      		
      		XERROR(wl.erreurinfo(),"Check whether the file is not read-only")
      		bReturn = Faux	
      		renvoyer faux
      	FIN
      	
      	si EnModeLinux() alors
      		
      		sResultFile = ShortPath(PathFile) + [fsep] + "request" + DateheureSys() + DonneIdentifiant() + ".html"
      		
      		SI EnModeLinux() ALORS
      			fSauveTexte(sResultFile, "!1!request (ATOS module) has return no result. Make sure that 'request' and 'response' have the execution rights on the server (Linux chmod command).")
      		sinon
      			fSauveTexte(sResultFile, "!1!request (ATOS module) has returned no result")
      		FIN
      		
      		si ErreurD√©tect√©e  ALORS
      			XERROR("Unable to prepare the result file for the ATOS module: " + wl.Erreurinfo(errComplet))
      			RENVOYER Faux
      		FIN
      	fin
      	
      	// Start and redirect the result into a file
      	sCommandLine = ShortPath(m_sProviderURL)
      	
      	XTRACE("Calls to ATOS URL <"+m_sProviderURL+">")
      	XTRACE("PathFile <"+PathFile+">")
      	XTRACE("Result file <"+sResultFile+">")
      	
      	si pas fFichierExiste(sCommandLine) ALORS
      		XERROR("The 'request' module was not found (" + sCommandLine + ")")
      		RENVOYER Faux
      	FIN
      	
      	// Add quotes if a space is found in the name of the executable to run
      	SI Position(sCommandLine, " ")>0 ALORS
      		sCommandLine= """" + sCommandLine + """"
      	FIN
      	
      	sCommandLine += " " + sFormData	
      	
      
      <SI CibleEx√©cution=SiteLinux>
      	//In Linux, redirection into a file with "bash"
      	
      	// Quote in the name of the result file
      	SI Position(sResultFile, " ")>0 ALORS
      		sResultFile = """" + sResultFile + """"
      	FIN
      	
      	// Prefixes the special characters with a backslash
      	sCommandLine = Remplace(sCommandLine, """", "\""")
      	sCommandLine = Remplace(sCommandLine, "&", "\&")
      	
      	//sCommandLine = "/bin/bash -c " + """" + sCommandLine + " > " + sResultFile + """"
      	
      	//Batch file (.sh) with the same name as the return file except for the extension
      	sBatchFile=fExtraitChemin(sResultFile,fDisque+fFichier+fR√©pertoire)+".sh"
      	//Save the content of this batch
      	fsauvebuffer(sBatchFile,sCommandLine + " > " + sResultFile)
      	//Launch command line
      	sCommandLine="/bin/bash "+sBatchFile
      	
      <FIN>
      
      
      	// In Windows with the APIs to retrieve STDOUT
      	bStartupResult = StartAdvancedApp(sCommandLine, exeIconise, PathFile, ...
      										  sRequestReturn, ...
      										  AccountStartupUser, ...
      										  AccountStartupPassword)
      
      			
      
      	
      	SI PAS bStartupResult ALORS		
      		
      		XERROR("Unable to start 'request' <"+sCommandLine+">: "+WL.ErreurInfo(errComplet),fChargeBuffer(HTMLVersTexte(sResultFile)))		
      		SI EnModeLinux() ALORS
      			XERROR("Make sure that 'request' and 'response' have the execution rights on the serve (Linux chmod command).")
      			RENVOYER Faux
      		FIN		
      		bReturn = Faux	
      		
      	SINON		
      		
      		// Return generated by the executable:!code!error!buffer!
      		SI EnModeLinux() ALORS
      		
      			// The stdout must be retrieved in the redirection file
      			// Does the redirection file of the stdout exist?
      			SI PAS fFichierExiste(sResultFile) ALORS
      				// No
      				XERROR("The page was not generated by 'request'.")
      				SI EnModeLinux() ALORS
      					XERROR("Make sure that 'request' and 'response' have the execution rights on the serve (Linux chmod command).")
      				FIN
      				bReturn = Faux	
      				RENVOYER Faux			
      			SINON
      				// Yes
      				// Return generated by the executable:!code!error!buffer!
      				sRequestReturn = fChargeTexte(sResultFile)
      				fSupprime(sResultFile)							
      			FIN
      		fin
      				
      		// Error code?
      		si ExtraitCha√Æne(sRequestReturn, 2, "!")<> 0 ALORS
      			
      			si sRequestReturn ~= "" ALORS
      				XERROR("No value was returned by 'request', check whether this executable exists (as well as 'response'): " + ShortPath(m_sProviderURL))
      			sinon
      				XERROR("Error returned by 'request': "+sRequestReturn)
      			FIN
      			
      			bReturn = Faux	
      			RENVOYER Faux
      		sinon
      			// OK
      			// The buffer is found after the 3rd "!"				
      			// Fills the HTML body
      			sRequestReturn = "<HTML><BODY>" + ExtraitCha√Æne(sRequestReturn, 4, "!") + "</BODY></HTML>"	
      			Cha√ÆneAffiche(sRequestReturn, typeMimeHTML)
      		FIN				
      	FIN
      
      renvoyer bReturn
      CAS EXCEPTION:
      	XERROR("WL_EXCEPTION [ATOSPayment]: " + ExceptionInfo)
      	RENVOYER Faux
      
      FIN:
      SI fFichierExiste(sBatchFile) ALORS fSupprime(sBatchFile)	
     type : 458752
   -
     name : OnPaymentReturnAtos
     internal_properties : CAAAAAgAAACRsorZXr4Lxy0ygJ/Yl9NvlhIAjoXUo1iRu4+g0EeLyxaGRDWCdpooKyl3vciz0VF5sJgrx9hNQZDmOGx7HgRGYBu9KaBZuqOkO8gYzgfktO3lcBmXLr9YsUSB7bZfxxdwtEVc7aDCfhtvITH5BXDt5RvLNHCYMhPPWs2L6h7vrq2sb0YX8q0Msjj4u0AiGkaZndO5JTVTxAhmkt9Ejym/lHNKcVfGZCHjfvCGJyOr5a24xIYdLwHuCY9lYadIeIPsrg/4IBQ+dHo5yELV2i1MbyC0r5w8JAPkvWxL4XUbQWwfJ1+n1npftpHgYesyOHIwW9UN55iBcsTgIRe2fFFuJOe5U9mCbmf58ItFPyjIHNy8MsutcwsHBKblQzfo/+mTw6yAqWh3L736VgPz0O12IZPL2NIHvCMm1YzQXqCuZdDC8OkJhA4sUbwdOScIJ+7Ul1FaARhVW54NyYPDs2aOq99U6lCCV/SBTetRS5Qa44GWZds/r1hnfuR51PQcio0KxcHQDRZdKCqhD6RzPXJTF2YD3+kkpqInClsO8tgNcMkC3XtX7+OSWR46xwF52It6zqoc2Mzjtny5TLwR9rf5i5rNYyE/g6C6v2IrjfF/v6p+MS83lRZJPSO3zI/RZdrUGDUnxawF+oV+GmEgmVVvvbeI/TEhOtQfSZ4G4ybvnJ5qpswFnpW5oOrlgjfohKgbOg2JelYUkbVYN5Ntkd7rNCmLLjORQkMRQzJsHIK4uwxM4EpA4Maj/MjVcbRDbmQwhYitoYYMUN8RWTV/I0NzjkRpfpDrmQ4+ULK5BIab1rxeEOIW
     procedure_id : 2220122836609579307
     type_code : 12
     group : 3
     code : |1-
      // Summary: Managing the ATOS return
      // Syntax:
      //[ <Result> = ] OnAtosPaymentReturn (<sAction> is string, <nMode> is int, <sInformation> is string)
      //
      // Parameters:
      //	sAction (ANSI string): value among	URL_S2S, URL_CANCEL, URL_REFUSED, URL_OK
      //	nMode (integer): (output) Return mode
      //	sInformation (ANSI string): (output) Information about the return management
      // Return value:
      // 	boolean:      True if the return was managed
      //
      // Automatic process of exceptions:   run CASE EXCEPTION:
      //
      
      Proc√©dure OnPaymentReturnAtos(sAction est une chaine,nMode est un entier, sInformation est une chaine)
      
      	sData 			est une chaine 
      	sResponseReturn		est une chaine
      	sBatchFile		est une chaine
      	
      	//S2S return?
      	SI sAction = URL_S2S ALORS
      		// Check the issuer IP
      		SI PAS BankServerCheckAddress(nMode, sInformation)	 ALORS
      			RENVOYER Faux
      		FIN
      	FIN
      	
      	// Retrieves the TOKEN and checks it
      	SI PAS TokenCheck("prvtk",nMode,sInformation) ALORS RENVOYER faux
      	 
      	// Retrieves the POST data (DATA=)
      	sData = extraitchaine(PageParam√®tre(1), rangdernier, "DATA=")
      	
      	sFormData est une chaine
      	
      	// Assign the mandatory parameters
      	SI EnModeLinux() ALORS
      		sFormData += AddFormControl("pathfile", ShortPath(PathFile)+ [fsep] +"pathfile" ,*,*,"CMD")
      	sinon
      		sFormData += AddFormControl("pathfile","."+ [fsep] +"pathfile" ,*,*,"CMD")
      	FIN
      //	sFormData += AddControlHTTPForm("pathfile", ShortPath(PathFile) + [fsep] + "pathfile", *, *, "CMD")
      	sFormData += AddFormControl("message",sData ,*,*,"CMD")
      		
      	sResultFile est une cha√Æne
      	sResultFile=ShortPath(PathFile)+[fsep]+"return"+DateSys()+HeureSys()+DonneIdentifiant()+".html"
      	
      	SI EnModeLinux() ALORS
      		fSauveTexte(sResultFile,"!1!request (ATOS module) has return no result. Make sure that 'request' and 'response' have the execution rights on the server (Linux chmod command).")
      		SI ErreurD√©tect√©e ALORS
      			XERROR("Unable to prepare the result file for the ATOS module: "+WL.ErreurInfo(errComplet))
      		FIN
      	FIN
      	//Start and redirect the result into a file
      	BuildProviderURL()
      	
      	sCommandLine est une chaine
      	sCommandLine=ShortPath(Remplace(m_sProviderURL,m_sEXE_ATOSRequest,m_sEXE_ATOSResponse))
      	si pas ffichierexiste(sCommandLine) ALORS
      		XERROR("'Response' does not exist: "+ShortPath(Remplace(m_sProviderURL,m_sEXE_ATOSRequest,m_sEXE_ATOSResponse)))
      	FIN
      	
      	//add quotes if a space is found in the name of the executable to run
      	SI Position(sCommandLine," ")>0 ALORS
      		sCommandLine=""""+sCommandLine+""""
      	FIN
      	sCommandLine+=" "+sFormData
      	
      	bStartupResult est un bool√©en
      
      
      si EnModeLinux() ALORS
      	//In Linux, redirection to a file with "batch".
      	
      	//quote in the name of the result file
      	SI Position(sResultFile," ")>0 ALORS
      		sResultFile=""""+sResultFile+""""
      	FIN
      	
      	
      	//Prefixes the special characters with a backslash
      	sCommandLine=Remplace(sCommandLine,"""","\""")
      	sCommandLine=Remplace(sCommandLine,"&","\&")
      	
      	//sCommandLine="/bin/bash -c "+""""+sCommandLine+" > "+sResultFile+""""
      	
      	//Batch file (.sh) with the same name as the return file except for the extension
      	sBatchFile=fExtraitChemin(sResultFile,fDisque+fFichier+fR√©pertoire)+".sh"
      	//Save the content of this batch
      	fSauveBuffer(sBatchFile,sCommandLine + " > " + sResultFile)
      	//Launch command line
      	sCommandLine="/bin/bash "+sBatchFile
      	
      	XTRACE("Starting 'response' to study the response (Linux mode)")
      	bStartupResult=LanceAppli(sCommandLine,exeIconise,exeBloquant,PathFile)
      sinon
      	//in Windows with the APIs to retrieve STDOUT
      	XTRACE("Starting 'response' to study the response (Windows mode)")
      	bStartupResult=StartAdvancedApp(sCommandLine,exeIconise,PathFile,...
      			sResponseReturn,...
      			AccountStartupUser,...
      			AccountStartupPassword)
      	
      FIN
      
      
      SI PAS bStartupResult ALORS		
      	// Abandon the payment
      	XERROR("Unable to start 'response' <"+sCommandLine+">: "+WL.ErreurInfo())
      	sInformation = "&error=Unable to start 'response': "+URLEncode(WL.ErreurInfo())
      	nMode = PAYMENT_FORGED
      	RENVOYER Faux
      SINON		
      	SI EnModeLinux() ALORS
      		//the stdout must be retrieved in the redirection file
      		//does the redirection file of the stdout exist?
      		SI PAS fFichierExiste(sResultFile) ALORS
      			//no
      			XERROR("The page was not generated by 'response'.")
      			sInformation = "&error=Unable to retrieve the 'response' return."
      			SI EnModeLinux() ALORS
      				XERROR("Make sure that 'request' and 'response' have the execution rights on the serve (Linux chmod command).")
      			FIN
      			nMode = PAYMENT_FORGED
      			RENVOYER Faux			
      		SINON
      			//Yes
      			// Return generated by the executable:!code!error!buffer!
      			sResponseReturn=fChargeTexte(sResultFile)
      			fSupprime(sResultFile)			
      		FIN
      	FIN
      
      	//error code?
      	SI ExtraitCha√Æne(sResponseReturn,2,"!")<>0 ALORS
      		nMode = PAYMENT_FORGED
      		si sResponseReturn~="" ALORS
      			XERROR("No value returned by 'response', check whether it exists: "+ShortPath(Remplace(m_sProviderURL,m_sEXE_ATOSRequest,m_sEXE_ATOSResponse)))
      			sInformation = "&error=No value returned by 'response', check whether it exists: "+ ShortPath(Remplace(m_sProviderURL,m_sEXE_ATOSRequest,m_sEXE_ATOSResponse))		
      		sinon
      			XERROR("Error returned by 'response': "+sResponseReturn)
      			sInformation = "&error=Error returned by 'response': "+ ExtraitCha√Æne(sResponseReturn,2,"!")+" : "+ ExtraitCha√Æne(sResponseReturn,3,"!")		
      		FIN
      		RENVOYER Faux					
      	SINON
      		//OK
      		//the other information is found after the 3rd "!"		
      		// Example of return:!0!!014213245611111!fr!15254!36!VISA!20110308084224!!!17!!!978!!!!!!!60dfdedd0212c8f341e37eafd6359a2ed61a779c!!!fr!fr!!123546!ad@pcsoft.fr!!!!		
      		nInformationPos est un entier=1
      		TableauSupprimeTout(m_aaParamDelPaymentForm)
      		nInformationPos++; m_aaParamDelPaymentForm["code"]=ExtraitCha√Æne(sResponseReturn,nInformationPos,"!")
      		nInformationPos++; m_aaParamDelPaymentForm["error"]=ExtraitCha√Æne(sResponseReturn,nInformationPos,"!")
      		nInformationPos++; m_aaParamDelPaymentForm["merchant_id"]=ExtraitCha√Æne(sResponseReturn,nInformationPos,"!")
      		nInformationPos++; m_aaParamDelPaymentForm["merchant_country"]=ExtraitCha√Æne(sResponseReturn,nInformationPos,"!")
      		nInformationPos++; m_aaParamDelPaymentForm["amount"]=ExtraitCha√Æne(sResponseReturn,nInformationPos,"!")
      		nInformationPos++; m_aaParamDelPaymentForm["transaction_id"]=ExtraitCha√Æne(sResponseReturn,nInformationPos,"!")
      		nInformationPos++; m_aaParamDelPaymentForm["payment_means"]=ExtraitCha√Æne(sResponseReturn,nInformationPos,"!")
      		nInformationPos++; m_aaParamDelPaymentForm["transmission_date"]=ExtraitCha√Æne(sResponseReturn,nInformationPos,"!")
      		nInformationPos++; m_aaParamDelPaymentForm["payment_time"]=ExtraitCha√Æne(sResponseReturn,nInformationPos,"!")
      		nInformationPos++; m_aaParamDelPaymentForm["payment_date"]=ExtraitCha√Æne(sResponseReturn,nInformationPos,"!")
      		nInformationPos++; m_aaParamDelPaymentForm["response_code"]=ExtraitCha√Æne(sResponseReturn,nInformationPos,"!")
      		nInformationPos++; m_aaParamDelPaymentForm["payment_certificate"]=ExtraitCha√Æne(sResponseReturn,nInformationPos,"!")
      		nInformationPos++; m_aaParamDelPaymentForm["authorization_id"]=ExtraitCha√Æne(sResponseReturn,nInformationPos,"!")
      		nInformationPos++; m_aaParamDelPaymentForm["currency_code"]=ExtraitCha√Æne(sResponseReturn,nInformationPos,"!")
      		nInformationPos++; m_aaParamDelPaymentForm["card_number"]=ExtraitCha√Æne(sResponseReturn,nInformationPos,"!")
      		nInformationPos++; m_aaParamDelPaymentForm["cvv_flag"]=ExtraitCha√Æne(sResponseReturn,nInformationPos,"!")
      		nInformationPos++; m_aaParamDelPaymentForm["cvv_response_code"]=ExtraitCha√Æne(sResponseReturn,nInformationPos,"!")
      		nInformationPos++; m_aaParamDelPaymentForm["bank_response_code"]=ExtraitCha√Æne(sResponseReturn,nInformationPos,"!")
      		nInformationPos++; m_aaParamDelPaymentForm["complementary_code"]=ExtraitCha√Æne(sResponseReturn,nInformationPos,"!")
      		nInformationPos++; m_aaParamDelPaymentForm["complementary_info"]=ExtraitCha√Æne(sResponseReturn,nInformationPos,"!")
      		nInformationPos++; m_aaParamDelPaymentForm["return_context"]=ExtraitCha√Æne(sResponseReturn,nInformationPos,"!")
      		nInformationPos++; m_aaParamDelPaymentForm["cart"]=ExtraitCha√Æne(sResponseReturn,nInformationPos,"!")
      		nInformationPos++; m_aaParamDelPaymentForm["receipt_complement"]=ExtraitCha√Æne(sResponseReturn,nInformationPos,"!")
      		nInformationPos++; m_aaParamDelPaymentForm["merchant_language"]=ExtraitCha√Æne(sResponseReturn,nInformationPos,"!")
      		nInformationPos++; m_aaParamDelPaymentForm["language"]=ExtraitCha√Æne(sResponseReturn,nInformationPos,"!")
      		nInformationPos++; m_aaParamDelPaymentForm["customer_id"]=ExtraitCha√Æne(sResponseReturn,nInformationPos,"!")
      		nInformationPos++; m_aaParamDelPaymentForm["order_id"]=ExtraitCha√Æne(sResponseReturn,nInformationPos,"!")
      		nInformationPos++; m_aaParamDelPaymentForm["customer_email"]=ExtraitCha√Æne(sResponseReturn,nInformationPos,"!")
      		nInformationPos++; m_aaParamDelPaymentForm["customer_ip_address"]=ExtraitCha√Æne(sResponseReturn,nInformationPos,"!")
      		nInformationPos++; m_aaParamDelPaymentForm["capture_day"]=ExtraitCha√Æne(sResponseReturn,nInformationPos,"!")
      		nInformationPos++; m_aaParamDelPaymentForm["capture_mode"]=ExtraitCha√Æne(sResponseReturn,nInformationPos,"!")
      		nInformationPos++; m_aaParamDelPaymentForm["data"]=ExtraitCha√Æne(sResponseReturn,nInformationPos,"!")
      		
      	FIN			
      FIN
      
      
      
      si m_sToken <> "" _et_ m_aaParamDelPaymentForm["return_context"] <> m_sToken ALORS
      	nMode = PAYMENT_FORGED
      	sInformation = "&error=Security token invalid or not found (2)"
      	XERROR(sInformation)
      	RENVOYER Faux
      FIN
      
      //
      
      // Retrieves and checks the amount
      SI (Transaction.Amount*100) <> val(m_aaParamDelPaymentForm["amount"]) ALORS
      	nMode = PAYMENT_FORGED
      	sInformation = "&error="+Cha√ÆneConstruit("Incorrect amount: Expected: %1, Received: %2",(Transaction.Amount*100) , m_aaParamDelPaymentForm["amount"])
      	XERROR(sInformation)
      	RENVOYER Faux
      FIN
      // Retrieves and checks the reference
      SI Transaction.OrderNumber <> m_aaParamDelPaymentForm["order_id"] ALORS
      	nMode = PAYMENT_FORGED
      	sInformation = "&error="+Cha√ÆneConstruit("Incorrect order number: Expected: %1, Received: %2",Transaction.OrderNumber , m_aaParamDelPaymentForm["order_id"])
      	XERROR(sInformation)
      	RENVOYER Faux
      FIN
      
      
      SELON m_aaParamDelPaymentForm["response_code"]
      	// Transaction accepted
      	CAS "00"
      		// Retur valid only if we have an authorization number
      		SI (m_aaParamDelPaymentForm["authorization_id"] ~= "") ALORS
      			nMode = PAYMENT_FORGED
      			sInformation = "&error=No authorization number"
      			XERROR(sInformation)
      			RENVOYER Faux
      		sinon
      			nMode = PAYMENT_VALID			
      			XTRACE("Payment OK")
      			//			sInformations=m_aaAdditionalParameterPaymentForm["authorization_id"]+
      			//							"&date="+m_aaAdditionalParameterPaymentForm["payment_date"]+
      			//							"&time="+m_aaAdditionalParameterPaymentForm["payment_time"]+
      			//							"&certificate="+m_aaAdditionalParameterPaymentForm["payment_certificate"]+
      			//							"&card="+m_aaAdditionalParameterPaymentForm["card_number"]
      		FIN			
      		
      		
      	// Payment refused
      	CAS "05"
      		nMode = PAYMENT_REFUSED
      		sInformation = "&error= Refusal, code:"+m_aaParamDelPaymentForm["response_code"]+", message:"+m_aaParamDelPaymentForm["error"]
      		XTRACE(sInformation)
      	// Transaction canceled
      	CAS "17"
      		sInformation = "&error= Abandon, code:"+m_aaParamDelPaymentForm["response_code"]+", message:"+m_aaParamDelPaymentForm["error"]
      		nMode = PAYMENT_CANCELED
      		XTRACE(sInformation)
      		//			// Error in the process
      		//			CASE "30", "02", "03", "34", "75", "90"
      		//				sAction = URL_CANCEL
      		//			==> OTHER CASE
      		
      	// Case not managed
      	AUTRE CAS
      		nMode = PAYMENT_FORGED
      		sInformation = "&error= code:"+m_aaParamDelPaymentForm["response_code"]+", message:"+m_aaParamDelPaymentForm["error"]
      		XTRACE(sInformation)
      FIN		
      
      
      renvoyer vrai
      
      
      
      CAS EXCEPTION:
      sInformation=exceptioninfo(errComplet)
      XERROR(sInformation)
      renvoyer Faux
      
      fin:
      si fFichierExiste(sBatchFile) alors fSupprime(sBatchFile)
      
      //Add all the incoming parameters
      POUR TOUT sValue,sControlName DE m_aaParamDelPaymentForm
      	sInformation +=["&"]+sControlName+"="+sValue
      FIN
     type : 458752
   -
     name : PayPalPayment_FromBank
     internal_properties : CAAAAAgAAACHPGWL1klvQ524hBQi7KmAGBl+A5dtiQrP1oLRqiCLH7KtHE34PPg0CLsdLn8bXYj3rBRQQLuBBAHpPn1VmKuykm76Ww6sO2IROYqC7vFk0bihXtdaOzkm81/O8BZQscR6cR0Q16dBxTeiEeeMTZ4oX507VVz0bYZ8ftjXQPk9w3QIAoNGUSt2E0EemQ1ZpF7TFHk7LIqNYpAIp3tZnvdq0MaKixFTa8xFF2o43hrClbNFKjDeRvCd0jlbbQep+hPQaiCF04XSpHDHiKkN251JLGs23OleGLwW2nhTxwRkRRXT34H1HFjDqYBXAneXMPZ4qGQ=
     procedure_id : 2220122836609644843
     type_code : 12
     group : 3
     code : |1-
      // Summary: Performs the request for payment via PayPal
      // Syntaxe :
      //[ <R√©sultat> = ] PayPalPayment_FromBank (<cyAmount> est mon√©taire, <sEmailAddress> est cha√Æne)
      //
      // Param√®tres :
      //	cyAmount (mon√©taire) : Amount of payment to perform
      //	sEmailAddress (cha√Æne ANSI) : Email address of the customer
      // Traitement automatique des exceptions :   ex√©cuter le bloc de code CAS EXCEPTION:
      //
      
      // Return value:
      // 	boolean:        True if the payment call was performed, False otherwise
      // Automatic process of exceptions:   run CASE EXCEPTION:
      Proc√©dure privee PayPalPayment_FromBank(LOCAL cyAmount est un mon√©taire, local sEmailAddress est une chaine)
      	
      	// Reset errors
      	XERROR()
      	
      	sHTTPResponse 	est une chaine
      	XFORM			est une chaine = "PAL_" + OrderNumber
      	sURL			est une chaine
      	bufTransaction	est un buffer
      	sError			est une chaine
      	
      	// Create a form
      	PayPalCreateForm(XFORM)
      	
      	// Method to call
      	// https://cms.paypal.com/us/cgi-bin/?cmd=_render-content&content_ID=developer/e_howto_api_nvp_r_SetExpressCheckout
      	AddHTTPFormControl(XFORM, "METHOD", 	"SetExpressCheckout")
      	
      	// Parameters of the method
      	
      	AddHTTPFormControl(XFORM, "RETURNURL",		PaybackURL(URL_OK))
      	AddHTTPFormControl(XFORM, "CANCELURL",		PaybackURL(URL_CANCEL))
      	
      	AddHTTPFormControl(XFORM, "LOCALECODE",		Language)
      	AddHTTPFormControl(XFORM, "NOSHIPPING",		"1") //PayPal does not display shipping address fields whatsoever
      	AddHTTPFormControl(XFORM, "ALLOWNOTE",		"0") //does not authorize the note	
      	AddHTTPFormControl(XFORM, "EMAIL",			sEmailAddress)
      	
      	AddHTTPFormControl(XFORM, "SOLUTIONTYPE",	"Sole") //PayPal account or bank card
      	AddHTTPFormControl(XFORM, "LANDINGPAGE",	"Billing") //the page to display is not the account page
      		
      		//Payment
      	AddHTTPFormControl(XFORM, "PAYMENTREQUEST_0_AMT", Num√©riqueVersCha√Æne(cyAmount, ".2f")) //total price
      	AddHTTPFormControl(XFORM, "PAYMENTREQUEST_0_CURRENCYCODE",	CurrencyToString()) //Currency
      	AddHTTPFormControl(XFORM, "PAYMENTREQUEST_0_PAYMENTACTION",	"Sale")
      	AddHTTPFormControl(XFORM, "PAYMENTREQUEST_0_INVNUM",	OrderNumber)
      	
      	si m_arrBasket..Occurrence=0 ALORS
      		
      		// Basket not described
      		AddHTTPFormControl(XFORM, "L_PAYMENTREQUEST_0_AMT0",	Num√©riqueVersCha√Æne(cyAmount, ".2f"))
      		AddHTTPFormControl(XFORM, "L_PAYMENTREQUEST_0_NAME0",	"Total")
      	sinon
      		
      		// Basket described
      		nArticleSubscript est un entier
      		nArticleSubscript = 0
      		POUR TOUT stABasketLine DE m_arrBasket
      			AddHTTPFormControl(XFORM, "L_PAYMENTREQUEST_0_AMT" + nArticleSubscript,		Num√©riqueVersCha√Æne(stABasketLine.ArticleUnitPrice, ".2f"))
      			AddHTTPFormControl(XFORM, "L_PAYMENTREQUEST_0_NAME" + nArticleSubscript,		stABasketLine.ArticleName)
      			AddHTTPFormControl(XFORM, "L_PAYMENTREQUEST_0_DESC" + nArticleSubscript,		stABasketLine.ArticleDescription)
      			AddHTTPFormControl(XFORM, "L_PAYMENTREQUEST_0_QTY" + nArticleSubscript,		"" + stABasketLine.Quantity)
      			AddHTTPFormControl(XFORM, "L_PAYMENTREQUEST_0_ITEMURL" + nArticleSubscript,	stABasketLine.URL)
      			nArticleSubscript++
      		FIN
      	FIN
      	
      	// Custom data
      	POUR TOUT sValue, sControlName DE m_aaParamDelPaymentForm
      		SI TableauCherche(m_arrFormParameters, tcLin√©aire, "Name", sControlName) <= 0 ALORS
      			AddHTTPFormControl(XFORM, sControlName, sValue, *, *, vrai)
      		fin
      	FIN
      	
      	// Send the command
      	si pas PayPalSendForm(XFORM, sError, sHTTPResponse) alors 
      		XERROR(sError)
      		renvoyer faux
      	FIN
      	
      	// Retrieves the token
      	m_sToken = ReadHTTPResponse("TOKEN", sHTTPResponse)
      	si m_sToken = "" alors 
      		XERROR("The PayPal token was not found")
      		renvoyer faux
      	FIN
      	
      	//// Re-saves the payment object (to take the token into account)	
      	HLitRecherchePremier(Transaction, TransactionID, m_sTransactionIdentifier)
      	dbgAssertion(HTrouve(Transaction),"Transaction not found for updating the PayPal token")
      	// Serializes the object
      	S√©rialise(objet, bufTransaction, psdBinaire)
      	Transaction.PaymentObject = bufTransaction
      	hmodifie(Transaction)	
      	////
      	
      	// Build the URL
      	sURL = "https://www." + (Simulation ? "sandbox." sinon "") + "paypal.com/cgibin/webscr" 
      	
      	// Redirection to PayPal
      	ScriptAffiche(sURL, "cmd=_express-checkout&token=" + Remplace(m_sToken, "%2d", "-"))	
      	
      renvoyer vrai
      	
      CAS EXCEPTION:
      	XERROR("WL_EXCEPTION [PayPalPayment]: " + ExceptionInfo)
      	renvoyer faux
     type : 458752
   -
     name : PayPalCreateForm
     procedure_id : 2220122836609710379
     type_code : 12
     code : |1-
      // Summary: Creates the PayPal NVP form
      // Syntax:
      //PayPalCreateForm (<sForm> is string)
      //
      // Parameters:
      //	sForm (string): Name of the form
      // Return value:
      // 	None
      //
      Proc√©dure privee PayPalCreateForm(local sForm est une chaine)
      
      	// Creates the form
      	CreateForm(sForm)
      
      	// Adds the mandatory parameters
      	AddHTTPFormControl(sForm, "USER", 			PayPalIdentifier)
      	AddHTTPFormControl(sForm, "PWD", 			PayPalPassword)
      	AddHTTPFormControl(sForm, "SIGNATURE", 	PayPalSignature)
      	AddHTTPFormControl(sForm, "VERSION", 		PAYPAL_VERSION)
      	
     type : 458752
   -
     name : ReadHTTPResponse
     procedure_id : 2220122836609775915
     type_code : 12
     code : |1-
      // Summary: Reads a PayPal NVP response
      // Syntax:
      //[ <Result> = ] ReadHTTPResponse (<sValueName> is string, <sHTTPResponse> is string)
      //
      // Parameters:
      //	sValueName (ANSI string): Name of the value to read
      //	sHTTPResponse (ANSI string): HTTP response
      // Return value:
      // 	ANSI string: Value read or empty string ("") if an error occurred 
      //
      Proc√©dure privee ReadHTTPResponse(local sValueName est une chaine, local sHTTPResponse est une chaine)
      	
      	arrValues	est un tableau de chaines
      	
      	// If the list of values is empty
      	si m_aaValueTab..Vide alors
      	
      		// Extracts the values
      		Cha√ÆneVersTableau(sHTTPResponse, arrValues, "&")
      		
      		pour i = 1 _a_ arrValues..Occurrence
      			m_aaValueTab[extraitchaine(arrValues[i], 1, "=")] = (arrValues[i][[position(arrValues[i], "=") + 1 a]])
      		FIN
      	fin
      	
      renvoyer m_aaValueTab[sValueName]
     type : 458752
   -
     name : PayPalSendForm
     internal_properties : CAAAAAgAAAC89R4TFqYB40y5yQovF2a7g+xQlv66ic8udUyubwTXwvUuJKfp39glmzS4F4MZ1xu9Lk6azO1tce3Wf0GKh+7RfOIieO+lMo8eBOCj9tMTtx0mXu2UsaQCx47DJQMn1sPXDoSM/cMN9n65pYdKmfydN5cD8+ycE9jfPFGWtbffTG52kClP6cJvV7SAoRB4YVvaGZJ6CK1RY9PCIb4lH+IRxgRJsoEcAxQvzrd2ytNGekWuaDIHsEyFKdbTXnvfoRlegKGqqkKOhn3WZG8=
     procedure_id : 2220122836609841451
     type_code : 12
     code : |1-
      // Summary: Sends the PayPal NVP form
      // Syntax:
      //[ <Result> = ] PaypalSendForm (<sForm> is string, <sError> is string, <sHTTPResponse> is string)
      //
      // Parameters:
      //	sForm (ANSI string): Name of the form
      //	sError (ANSI string): (output) Error message
      //	sHTTPResponse (ANSI string): (output) HTTP response
      // Return value:
      // 	boolean:  True if the order was sent, False otherwise
      //
      Proc√©dure privee PayPalSendForm(local sForm est une chaine, sError est une chaine, sHTTPResponse est une chaine)	
      	
      	// Clears the list of values
      	SupprimeTout(m_aaValueTab)	
      	
      	sRequestReturn 	est une chaine
      	bRequestOK 		est un bool√©en
      	
      	sFormContent est une chaine
      	pour tout sFormData de m_arrFormParameters
      		sFormContent+=["&"]+sFormData.Name+"="+sFormData.Value
      	FIN		
      	XTRACE("Send a PAYPAL request with: "+sFormContent)	
      	
      	// Send the command	
      	(bRequestOK,sRequestReturn) = WebRequest(<sHTTPURL>: m_sProviderURL,<sFormName>: sForm)
      	SI PAS bRequestOK ALORS 
      		sError = sRequestReturn
      		RENVOYER Faux
      	FIN
      		
      	sHTTPResponse = sRequestReturn		
      	
      	// Checks whether the response is correct
      	SI PAS (ReadHTTPResponse("ACK",sHTTPResponse) [= "Success") ALORS 
      		
      		sError = "ACK: " + URLD√©code(m_aaValueTab["ACK"]) + [rc] + URLD√©code(m_aaValueTab["L_SHORTMESSAGE0"]) + [RC] + URLD√©code(m_aaValueTab["L_LONGMESSAGE0"]) + [rc] + "Error code: " + URLD√©code(m_aaValueTab["L_ERRORCODE0"])
      		
      		XERROR("PAYPAL ACK ERROR "+sHTTPResponse)	
      		
      //		if:m_nSimulation THEN
      //			sError += [cr] + [
      //				Caution: In simulation mode, there must be an open browser on your test PayPal SandBox (http://developer.paypal.com/), in parallel with the WEBDEV test. 
      //				It must be the same type of browser as the one used for your test (do not mix Internet Explorer and Firefox, for example).
      //				If you are connected to a Sandbox account, check your login credentials against the Sandbox account you are connected to.
      //				]
      //		END
      		
      		RENVOYER Faux
      	FIN
      	
      	// Checks whether the token matches
      	si m_sToken <> "" _et_ pas (ReadHTTPResponse("TOKEN", sHTTPResponse) = m_sToken) alors 
      		sError = "The PayPal token was not found"
      		XERROR(sError)	
      		renvoyer faux
      	FIN
      	
      renvoyer vrai
     type : 458752
   -
     name : OnPaymentReturnPayPal
     internal_properties : CAAAAAgAAAB0VoCpwRhEyLatQsAgzjTBQKo9LlcdZ2QhQuRnF5cOWrCfwUwmiWUz7+8wHNmWRBZlHHQZd/Cx25p0S84J/Kz+w4HlveApZK1lanw4WulRZ1kLomJJwLQQM6QRBm10eYdk9p4E8IkMeB1E8ODBQzeLRebz/M+sMhS6E0wFGscwqD4fzlT+fXCOSOnpHfXGxNA0JezhUQ==
     procedure_id : 2220122836609906987
     type_code : 12
     group : 3
     code : |1-
      // Summary: Managing the PayPal return
      // Syntax:
      //[ <Result> = ] OnPaymentReturnPayPal (<nMode> is int, <sInformation> is string, <sError> is string, <cyAmount> is currency, <trsID> is string)
      //
      // Parameters:
      //	nMode (integer): (output) Return mode
      //	sInformation (string): (output) Information about the return management
      //	sError (string): (output) System error message
      //	cyAmount (currency): Amount of transaction
      //	trsID (string): (output) Identifier of the PayPal transaction
      // Return value:
      // 	boolean:      True if the payment was actually performed, False if an error occurred
      //
      Proc√©dure OnPaymentReturnPayPal(nMode est un entier, sInformation est une chaine, sError est une chaine, local cyAmount est un mon√©taire, trsID est une chaine)
      	
      	// Reset errors
      	XERROR()
      	
      	sHTTPResponse 	est une chaine
      	XFORM			est une chaine = "PAL_" + OrderNumber
      	XTRACE("PAYPAL completes payment of "+cyAmount+" for order "+OrderNumber)
      	// Creates a NVP form
      	PayPalCreateForm(XFORM)
      	
      	// Method to call
      	AddHTTPFormControl(XFORM, "METHOD", 	"GetExpressCheckoutDetails")
      	
      	// Parameters of the method
      	AddHTTPFormControl(XFORM, "TOKEN", 		remplace(m_sToken, "%2d", "-"))
      	
      	// Sends the form
      	si PayPalSendForm(XFORM,sError, sHTTPResponse) = Faux ALORS
      		nMode 			= PAYMENT_REFUSED
      		sInformation	= urldecode(ReadHTTPResponse("L_LONGMESSAGE0", sHTTPResponse))
      		renvoyer faux
      	FIN
      	
      	// Retrieves the identifier of the payer
      	m_sPayerID = ReadHTTPResponse("PAYERID",sHTTPResponse)
      	
      	// Creates a NVP form
      	PayPalCreateForm(XFORM)
      	
      	// Method to call
      	AddHTTPFormControl(XFORM, "METHOD", 	"DoExpressCheckoutPayment")
      	
      	// Parameters of the method
      	AddHTTPFormControl(XFORM, "TOKEN", 			 Remplace(m_sToken, "%2d", "-"))
      	AddHTTPFormControl(XFORM, "PAYERID", 		 m_sPayerID)
      	AddHTTPFormControl(XFORM, "AMT", 			 Num√©riqueVersCha√Æne(cyAmount, ".2f"))
      	AddHTTPFormControl(XFORM, "LOCALECODE",	 Language)
      	AddHTTPFormControl(XFORM, "INVNUM",			 OrderNumber)
      	AddHTTPFormControl(XFORM, "CURRENCYCODE",	 CurrencyToString())
      	AddHTTPFormControl(XFORM, "PAYMENTACTION", "Sale")
      	AddHTTPFormControl(XFORM, "SOLUTIONTYPE",	 "Sole")	
      	AddHTTPFormControl(XFORM, "LANDINGPAGE",	 "Billing")
      	
      	// Sends the form
      	SI PayPalSendForm(XFORM,sError,sHTTPResponse) = Faux ALORS
      		nMode 			= PAYMENT_REFUSED
      		sInformation	= urldecode(ReadHTTPResponse("L_LONGMESSAGE0",sHTTPResponse))
      		MarkPayment(OrderNumber, PAYMENT_REFUSED, sInformation + [" "] + sError)
      		RENVOYER Faux
      	FIN
      	
      	// Retrieves the TRANSACTIONID
      	trsID = URLD√©code(ReadHTTPResponse("TRANSACTIONID", sHTTPResponse))
      	XTRACE("TRANSACTIONID : "+trsID)
      	sInformation += [rc] + "Identifier of PayPal transaction: " + trsID
      	MarkPayment(OrderNumber, PAYMENT_VALID, sInformation + [" "] + sError)
      	
      	// Default error code
      	sError = "00000"
      	
      renvoyer vrai
     type : 458752
   -
     name : CyberPaymentPayment_FromBank
     internal_properties : CAAAAAgAAADQ8rR+Ccys8KKnAJiAIBoPwKDl2PMNbrbmnughyxf/KAj3AWRGSQ0jT8+YjPGOvDalTJzZ//ix48IMe1YZPNxGi8nlxVCpTF2VKhhcjp1d0yVXbm7tpKBsl0jtSqEIJSOQkupw1O1Y1HFY7OT190P38QKvCNOGRyUp8m/4HD29JY1sI4urjo+tq7zUQN4vj4ut8SA99Q==
     procedure_id : 2220122836609972523
     type_code : 12
     group : 3
     code : |1-
      // Summary: Performs the payment request toward Banque Populaire
      // Syntaxe :
      //[ <R√©sultat> = ] CyberPaymentPayment_FromBank (<cyAmount> est mon√©taire, <sEmailAddress> est cha√Æne)
      //
      // Param√®tres :
      //	cyAmount (mon√©taire) : Amount of payment to perform
      //	sEmailAddress (cha√Æne ANSI) : Email address of the customer
      // Traitement automatique des exceptions :   ex√©cuter le bloc de code CAS EXCEPTION:
      //
      
      // Return value:
      // 	boolean:         True if the payment call was performed, False otherwise
      // Automatic process of exceptions:   run CASE EXCEPTION:
      Proc√©dure privee CyberPaymentPayment_FromBank(LOCAL cyAmount est un mon√©taire, local sEmailAddress est une chaine)
      
      	// Reset errors
      	XERROR()
      	
      	sForm 			est une chaine ansi
      	sFormData		est une chaine ansi
      	
      	// Describes the sending form
      	sForm = chaineconstruit(HTML_FORM, "%2", "PaymentRequest", "%3", "%1")
      	
      	// Merchant data
      	sFormData += AddFormControl("CONTROL000", SubscriberNumber)
      	sFormData += AddFormControl("CONTROL001", Num√©riqueVersCha√Æne(BP_MCC))
      	sFormData += AddFormControl("CONTROL002", Contract)
      	sFormData += AddFormControl("CONTROL003", "I")
      	sFormData += AddFormControl("CONTROL004", URLCurrentDomain())
      	sFormData += AddFormControl("CONTROL005", PaybackURL(URL_S2S) + ["&"] + "reference=" + OrderNumber  + "&BPXCONTROL")
      	sFormData += AddFormControl("CONTROL006", ".")
      	sFormData += AddFormControl("CONTROL008", ".")
      	sFormData += AddFormControl("CONTROL009", ".")
      	sFormData += AddFormControl("CONTROL010", ".")
      
      	// Customer data
      	sFormData += AddFormControl("CONTROL100", ".")
      	sFormData += AddFormControl("CONTROL101", ".")
      	sFormData += AddFormControl("CONTROL102", ".")
      	sFormData += AddFormControl("CONTROL103", ".")
      	sFormData += AddFormControl("CONTROL104", sEmailAddress)
      	sFormData += AddFormControl("CONTROL105", ".")
      	sFormData += AddFormControl("CONTROL106", ".")
      	sFormData += AddFormControl("CONTROL107", ".")
      	sFormData += AddFormControl("CONTROL108", ".")
      	sFormData += AddFormControl("CONTROL109", ".")
      	sFormData += AddFormControl("CONTROL110", ".")
      
      	// Information about the order
      	sFormData += AddFormControl("CONTROL200", OrderNumber)
      	sFormData += AddFormControl("CONTROL201", Num√©riqueVersCha√Æne(cyAmount, ",2f"))
      	sFormData += AddFormControl("CONTROL202", CurrencyToString())
      	
      	// Member code
      	sFormData += AddFormControl("CONTROL900", "01")
      	
      	// Custom data
      	POUR TOUT sValue,sControlName DE m_aaParamDelPaymentForm
      		SI TableauCherche(m_arrFormParameters, tcLin√©aire, "Name", sControlName) <= 0 ALORS
      			sFormData += AddFormControl(sControlName, sValue, *, *, *, vrai)
      		fin
      	FIN
      
      	// Complete
      	sForm = Cha√ÆneConstruit(sForm, ConvertTextToTML(TransitionText), m_sProviderURL, sFormData)
      	
      	// Displays the data
      	Cha√ÆneAffiche(sForm, typeMimeHTML)	
      
      renvoyer vrai
      
      CAS EXCEPTION:
      	XERROR("WL_EXCEPTION [BanquePopulairePayment]: " + ExceptionInfo)
      	renvoyer faux
     type : 458752
   -
     name : OnPaymentReturnCyberPayment
     internal_properties : CAAAAAgAAAA8DsjqrKC+SBYdcqCAPiSh0Ep97lf99+SxQsR3J3dOClAP8Ty22aVjT7/g3HlG9PZ1nJQ5d/Che4r0S16ZvIyOozHVrbBZRP0FmnRggnHJb1GDGsqBiIxYi/wJ7hW88e88TnYsKLEkIPV8qMjp608z/R6rBKf0ClyyS0QNYu/IMFY3Jtw2xSjWwKHBpR3+Qs4xfbSpmQ==
     procedure_id : 2220122836610038059
     type_code : 12
     group : 3
     code : |1-
      // Summary: Managing the CyberPayment return (Banque Populaire)
      // Syntax:
      //[ <Result> = ] OnCyberPaiementPaymentReturn (<sAction> is string, <nMode> is int, <sInformation> is string)
      //
      // Parameters:
      //	sAction (ANSI string): value among	URL_S2S, URL_CANCEL, URL_REFUSED, URL_OK
      //	nMode (integer): (output) Error mode
      //	sInformation (ANSI string): (output) Information about the return
      // Return value:
      // 	boolean:         True if the return was managed
      //
      
      Proc√©dure OnPaymentReturnCyberPayment(sAction est une chaine,nMode est un entier, sInformation est une chaine)
      
      	// Reset errors
      	XERROR()
      
      	//S2S return?
      	SI sAction = URL_S2S ALORS
      		// Check the issuer IP
      		SI PAS BankServerCheckAddress(nMode, sInformation)	 ALORS
      			RENVOYER Faux
      		FIN
      	FIN
      		
      	// Retrieves the TOKEN and checks it
      	SI PAS TokenCheck("prvtk",nMode,sInformation) ALORS RENVOYER Faux
      
      
      	selon PageParam√®tre("CONTROL906")
      		cas ""
      			nMode = PAYMENT_REFUSED
      			sInformation	 = "Return with CONTROL906 control missing "
      			XTRACE(sInformation)
      		cas "0000"
      			nMode = PAYMENT_VALID
      			sInformation = ""
      			XTRACE("Payment validated")
      			
      		AUTRE CAS
      			nMode = PAYMENT_REFUSED
      			sInformation	 = "Return with CONTROL906 control incorrect:  " + PageParam√®tre("CONTROL906")
      			XTRACE(sInformation)
      	FIN
      
      renvoyer vrai
     type : 458752
   -
     name : OgonePayment_FromBank
     internal_properties : CAAAAAgAAAASNOIYqs61iGaPPFSMPOaT1LjtrNed4t4SVqQVJ9Mz/PwvyUASqVEzK+eEqB1CsKJ5JIy9Ezh1G17E/zItkMjCn1FV+SThEI3pAoY2hNNv9dcJQMDLWtoqEdLDVK82Nz2KnDT6EsNCOivSAhY7/YXhO9TxWoHUieNTrCWakhMnpz8ebTX53FHrlTaqsmzdbJRHC8qDsw==
     procedure_id : 2220122836610103595
     type_code : 12
     group : 3
     code : |1-
      // Summary: Performs the payment request toward Banque Populaire
      // Syntaxe :
      //[ <R√©sultat> = ] OgonePayment_FromBank (<cyAmount> est mon√©taire, <sEmailAddress> est cha√Æne)
      //
      // Param√®tres :
      //	cyAmount (mon√©taire) : Amount of payment to perform
      //	sEmailAddress (cha√Æne ANSI) : Email address of the customer
      // Traitement automatique des exceptions :   ex√©cuter le bloc de code CAS EXCEPTION:
      //
      
      // Return value:
      // 	boolean:        True if the payment call was performed, False otherwise
      // Automatic process of exceptions:   run CASE EXCEPTION:
      Proc√©dure privee OgonePayment_FromBank(LOCAL cyAmount est un mon√©taire, local sEmailAddress est une chaine)
      
      	// Reset errors
      	XERROR()
      	
      	sForm 			est une chaine ansi
      	sFormData		est une chaine ansi
      		
      	// Describes the sending form
      	sForm = chaineconstruit(HTML_FORM, "%2", "PaymentRequest", "%3", "%1")
      		
      	//Name of controls in uppercase in the form
      	// Merchant data
      	sFormData += AddFormControl("PSPID", CompanyCode										   )
      	sFormData += AddFormControl("ORDERID", OrderNumber                                      )
      	sFormData += AddFormControl("AMOUNT", Num√©riqueVersCha√Æne(cyAmount * 100)                 )
      	sFormData += AddFormControl("CURRENCY", CurrencyToString()                                 )
      	sFormData += AddFormControl("USERID", OgoneUserID                                          )
      	sFormData += AddFormControl("LANGUAGE", Language                                             )
      	sFormData += AddFormControl("CN", ""                                                       )
      	sFormData += AddFormControl("EMAIL", sEmailAddress                                         )
      	sFormData += AddFormControl("REMOTE_ADDR", NavigateurAdresseIP()                           )	                                                                                                            
      	sFormData += AddFormControl("ACCEPTURL", PaybackURL(URL_OK)                                )
      	sFormData += AddFormControl("DECLINEURL", PaybackURL(URL_REFUSED)                          )
      	sFormData += AddFormControl("EXCEPTIONURL", PaybackURL(URL_REFUSED)                        )
      	sFormData += AddFormControl("CANCELURL", PaybackURL(URL_CANCEL)                            )
      	
      	// Custom data
      	POUR TOUT sValue,sControlName DE m_aaParamDelPaymentForm
      		SI TableauCherche(m_arrFormParameters, tcLin√©aire, "Name", Majuscule(sControlName)) <= 0 ALORS
      			sFormData += AddFormControl(Majuscule(sControlName), sValue, Vrai,"hidden","HTML", vrai)
      		fin
      	FIN
      	
      	// Fills with the signature
      	sFormData += AddFormControl("SHASIGN", EncodeSHAOgone()										)
      
      	sForm = Cha√ÆneConstruit(sForm, ConvertTextToTML(TransitionText), m_sProviderURL, sFormData)
      	
      	// Displays the data
      	Cha√ÆneAffiche(sForm, typeMimeHTML)	
      
      renvoyer vrai
      
      CAS EXCEPTION:
      	XERROR("WL_EXCEPTION [OgonePayment]: " + ExceptionInfo)
      	renvoyer faux
     type : 458752
   -
     name : EncodeSHAOgone
     internal_properties : CAAAAAgAAAA25y1GnFKpTO01/Iykg9P1Vweg8tKnb65v61ubOilTCtekg/ZYnHl9aNWKzrCqyzOJkoHRkyRyH8QjycKLdBk0abZ6m7pkagBzZGt/hX9x/gm6+sF7/By7qDzs11sgMTMsSdR1YFWsx9oWO3kxoWUrEYWJdbWq0NfP2694Ls9k1xPdbxjLehcylkxfu4YEPHc4T+9x9sm25sdIvsG3fHx8sfl1
     procedure_id : 2220122836610169131
     type_code : 12
     code : |1-
      // Summary: Encodes the Ogone data and creates a SHA1 key
      // Syntax:
      //[ <Result> = ] EncodeSHAOgone ()
      //
      // Parameters:
      //	None
      // Return value:
      // 	ANSI string: SHA1 key of Ogone data
      //
      //	cyAmount (currency): Amount of transaction
      Proc√©dure privee EncodeSHAOgone()
      
      	sSHAKey  est une chaine
      	stParam  est un FormParameter
      	arrParam est un tableau de FormParameter
      	
      	tableaucopie(m_arrFormParameters, arrParam)
      	tableautrie(arrParam, ttMembre, "Name")
      	
      	pour tout stParam de arrParam
      		si pas stParam.Value ~= "" alors sSHAKey += stParam.Name + "=" + stParam.Value + Keyphrase
      	FIN
      	
      	sSHAKey = BufferVersHexa(HashCha√Æne(AlgorithmHash, Cha√ÆneVersUTF8(sSHAKey)),SansRegroupement)
      	
      renvoyer sSHAKey
     type : 458752
   -
     name : OnPaymentReturnOgone
     internal_properties : CAAAAAgAAACTLgg9dYo8m5LcZbUaFhwHcMKF+YaqGlfstolw3Q4iBignEZIEchXREgGR7Jvdl7VX4mMGbFVaGm7yKGjO2hmZOOOxqvWkKcXUq+GozQWLObReHoTACIPHWDWkV+a7yQG5Os1cK0WJMDdrJBh/mfab0kDOC/lc+5B1IoFdnGENbq1Tc8GiI0wpwe7QBH94EItcghiTBiTt3xH4NaYdgMvdJMvros/RuLOqEF9xP4maGiNmAhO9tLaftC8NIu8V0wAup6kfNbFtx3U47OznmyJWmmAriWRv
     procedure_id : 2220122836610234667
     type_code : 12
     group : 3
     code : |1-
      // Summary: Managing the Ogone return
      // Syntax:
      //[ <Result> = ] OnPaymentReturnOgone (<sAction> is ANSI string, <nMode> is int, <sInformation> is ANSI string)
      //
      // Parameters:
      //	sAction (ANSI string): value among	URL_S2S, URL_CANCEL, URL_REFUSED, URL_OK
      //	nMode (integer): (output) Error mode
      //	sInformation (ANSI string): (output) Information about the return
      // Return value:
      // 	boolean:  True if the return was properly managed, False otherwise
      //
      Proc√©dure OnPaymentReturnOgone(sAction est une chaine,nMode est un entier, sInformation est une chaine)
      
      	// Reset errors
      	XERROR()
      	
      	sOgoneSignature est une chaine
      	sCalculatedKey	est une chaine
      
      	// Retrieves the Ogone signature
      	sOgoneSignature = PageParam√®tre("SHASIGN")
      	si pas SentenceKeyOut="" _et_ sOgoneSignature <> "" alors
      		
      		// Calculates the signature of parameters
      		//all incoming parameters 
      		sNameAndValueOneParameter est une cha√Æne
      		nEqualPosition est un entier
      		AParameter est un FormParameter
      		arrParametersReceivedForm est un tableau de FormParameter
      		nParameterSubscript est un entier
      		BOUCLE
      			nParameterSubscript++
      			sNameAndValueOneParameter=PageParam√®tre(nParameterSubscript)
      			SI sNameAndValueOneParameter ~= "" ALORS SORTIR 
      			// Finds the = that separates the name of the parameter from its value
      			nEqualPosition = Position(sNameAndValueOneParameter, "=")		
      			// Name
      			AParameter.Name = Majuscule(sNameAndValueOneParameter[[A (nEqualPosition - 1)]])
      			// Value
      			AParameter.Value = sNameAndValueOneParameter[[(nEqualPosition + 1) A]]			
      			//ignore the returned hash key as well as the parameters"added" by the component 
      			SI PAS AParameter.Name DANS ("SHASIGN","ACT","FPAY","SECID") ALORS
      				TableauAjoute(arrParametersReceivedForm,AParameter)				
      			FIN
      		FIN
      		//in alphabetical order
      		TableauTrie(arrParametersReceivedForm,ttMembre,"Name")
      		POUR TOUT AParameter DE arrParametersReceivedForm
      			SI PAS AParameter.Value~="" ALORS sCalculatedKey+=AParameter.Name+"="+AParameter.Value+SentenceKeyOut
      		FIN	
      		
      		sCalculatedKey = Majuscule(BufferVersHexa(HashCha√Æne(AlgorithmHash, Cha√ÆneVersUTF8(sCalculatedKey)),SansRegroupement))
      				
      		// If the keys are identical
      		si sCalculatedKey = sOgoneSignature ALORS
      			selon sAction
      				CAS URL_S2S
      					
      					//Check the IP address of the issuern in S2s
      					si BankServerCheckAddress(nMode, sInformation) ALORS
      						SI PageParam√®tre("ACCEPTANCE")<>"" ALORS
      							nMode=PAYMENT_VALID	
      							XTRACE("S2S: PAYMENT_VALID")
      						SINON
      							nMode=PAYMENT_REFUSED
      							XTRACE("S2S: PAYMENT_REFUSED")
      						FIN
      					sinon
      						RENVOYER faux
      					FIN
      
      				CAS URL_OK
      					si PageParam√®tre("ACCEPTANCE")<>"" ALORS
      						nMode = PAYMENT_VALID	
      					sinon
      						nMode = PAYMENT_FORGED
      					FIN
      					
      				CAS URL_CANCEL
      					nMode = PAYMENT_CANCELED
      				AUTRE CAS
      					nMode = PAYMENT_REFUSED
      			FIN
      			
      			// The transaction is valid
      			renvoyer vrai
      		sinon
      		
      			// Otherwise, detect a fraud
      			nMode = PAYMENT_FORGED
      			sInformation = XERROR("The SHASign SHA-1-OUT signature does not correspond (Signature received: " + sOgoneSignature +...
      														 " Non-encoded signature: "+PageParam√®tre("orderID") + PageParam√®tre("currency") + PageParam√®tre("amount") + PageParam√®tre("PM") + PageParam√®tre("ACCEPTANCE") + PageParam√®tre("STATUS") + PageParam√®tre("CARDNO") + PageParam√®tre("PAYID") + PageParam√®tre("NCERROR") + PageParam√®tre("BRAND") + SentenceKeyOut...
      														+" Calculated signature: " + sCalculatedKey + ")")
      			XERROR(nMode )
      		fin
      	sinon
      		si PAS SentenceKeyOut="" ALORS		
      			//Signature not found
      			sInformation="Ogone signature missing"	
      			XERROR(nMode )
      		sinon
      			//no signature when going back to the store
      			renvoyer vrai
      		FIN		
      	fin
      	
      renvoyer faux
     type : 458752
   -
     name : GetURLServerCall
     internal_properties : CAAAAAgAAAAqfDrgo45hKDqN3nSkklgtVDqV+msd04RVGnDDg8MyrsRneehCCfmjW3dsiAVqyBLZRDTdW9A1UwZcD9oN4Cga5+nlodRhCC2polqS8A/j2duNJPSnpq5+rR7ncItye/HO0Lg+Du9mzqd+1hI3yakFL0hl3k0KFGqMFaofQA0qEui5uG6sQ6pEegvXz3tsnSUvc6K7iw==
     procedure_id : 2220122836610300203
     type_code : 12
     code : |1-
      // Summary: Returns the URL called during a server call
      // Syntax:
      //[ <Result> = ] GetURLServerCall (<nIDTransaction> is int [, <bAutoUpd> is boolean])
      //
      // Parameters:
      //	nIDTransaction (integer): Identifier of the transaction whose return URL from server to server is requested
      //	bAutoUpd (boolean - default value=1): True to update the transaction file for return information from server to server
      // Return value:
      // 	ANSI string:     URL called during a server call
      //
      Proc√©dure PRIV√âE GetURLServerCall(local nTransactionID est un entier, local bAutoUPD est un bool√©en = vrai)
      
      	// Reset errors
      	XERROR()
      	
      	sURL est une chaine
      	HLitRecherchePremier(Transaction,TransactionID,nTransactionID)
      	si HTrouve(Transaction) ALORS
      	
      		sURL = Transaction.URLS2S
      		
      		si bAutoUPD ALORS
      			Transaction.ReturnS2S = vrai
      			HModifie(Transaction)
      		FIN
      	FIN
      	
      RENVOYER sURL
     type : 458752
   -
     name : URLAccordingToAction
     procedure_id : 2220122836610365739
     type_code : 12
     code : |1-
      // Summary: <specify the action of the procedure>
      // Syntax:
      //[ <Result> = ] URLAccordingToAction (<sReturnAction> is ANSI string)
      //
      // Parameters:
      //	sReturnAction (ANSI string): <specify the role of sAction>
      // Return value:
      // 	ANSI string:   // 	None
      //
      Proc√©dure privee URLAccordingToAction(local sReturnAction est une chaine)
      
      	sURL est une chaine
      	
      	// Address of the current page
      	sURL = m_sCurrentURL
      	
      	SI PAS sReturnAction = "" ALORS
      		
      		// Checks whether it's a control
      		SI ChampExiste(sReturnAction) ALORS
      			
      			// In AWP mode
      			si enmodeawp() ALORS			
      				
      				// Generates the URL for calling the button
      				si droite(sURL, 1) <> "?" ALORS
      					sURL += "&"
      				FIN
      				
      				sURL += "WD_BUTTON_CLICK_=" + {sReturnAction, indChamp}..Alias + "&WD_ACTION_="
      			
      			// In dynamic mode
      			sinon
      				
      				// Adds the name of the button to the URL
      				sURL += "?" + {sReturnAction, indChamp}..Alias
      			FIN
      			
      		// Checks whether it's a full URL
      		SINON SI minuscule(sReturnAction) [= "http:" _OU_ Minuscule(sReturnAction) [= "https:" ALORS 
      			
      			// The return URL is the URL of the action
      			sURL = sReturnAction
      			
      		// Checks whether it's a relative URL
      		SINON SI sReturnAction [= "./" _OU_ sReturnAction [= "/" _OU_ sReturnAction [= ".."
      			
      			// The return URL is the URL of the action
      			sURL = URLCurrentDomain() + ["/"] + R√©pertoireWeb() + ["/"] + LanguageToDirectory() + sReturnAction
      		FIN		
      	FIN
      
      renvoyer sURL
     type : 458752
   -
     name : TokenCheck
     internal_properties : CAAAAAgAAACVauwsvYAQO4qRfvGTN1nXN7qsCNImK/fbWikIOBlw+R08pnUTTSv43n3XjB9SSAMImAXEa7J8AQDyZGag9RnNKLwe8eJy0axMUH8aIWsuzDD+X92E8sNW0VYhdhaiPB57l3Y8N720X1cDNHVfCQu2M2WYYlJLwfmsSnFWtp3S6pkeD6cdsqbS3R5aX4IideMV4Sz7p7EHFOsGrRTloMCYSF8jAl6YXtWK0xEMkKWLn0AL6pZNANTedW946BUvMCu2M0Tut2HE+NehneJ3t5Y3N1vPl5t5P4Aawfbc1k3R/yPHLEPCF3E81Q2jKSd9K5qxEmiGsg==
     procedure_id : 2220122836610431275
     type_code : 12
     code : |1-
      // Summary: Checks the token received in parameter
      // Syntax:
      //[ <Result> = ] TokenCheck (<sNameTokenParameter> is ANSI string, <nMode> is int [, <sInformation> is ANSI string])
      //
      // Parameters:
      //	sNameTokenParameter (ANSI string): Name of the parameter that contains the token to check
      //	nMode (integer): Mode (in output, in case of failure)
      //	sInformation (ANSI string - default value=""): (output) Eventual failure message
      // Return value:
      // 	boolean:  True if the token is valid, False otherwise
      //
      Proc√©dure privee TokenCheck(local sNameTokenParameter est une chaine, nMode est un entier, sInformation est une chaine = "")
      
      	sToken est une chaine
      	sToken = PageParam√®tre(sNameTokenParameter)
      		
      	// Checks the token
      	SI sToken <> m_sToken ALORS
      		
      		nMode 			= PAYMENT_FORGED
      		sInformation 	= "Security token <"+sToken+"> invalid or not found (1)"	
      		XERROR(sInformation)
      		// Invalid token
      		RENVOYER Faux
      	SINON
      		
      		// Checks the validity of the token
      		SI sToken <> BufferVersHexa(HashCha√Æne(TokenAlgorithmHash , OrderNumber + "*" + CompanyCode + "*TOK" + AliasWEBDEVEngine(), "PCSOFT"),SansRegroupement) ALORS
      			
      			nMode 			= PAYMENT_FORGED
      			sInformation 	= "Security token invalid or not found (2)"
      			XERROR(sInformation)
      			// Invalid token
      			RENVOYER Faux
      		sinon
      			XTRACE("Security token successfully checked")
      		FIN
      	FIN
      	
      renvoyer vrai
     type : 458752
   -
     name : URLEncodeEx
     procedure_id : 2220122836610496811
     type_code : 12
     code : |1-
      // Summary: Replaces the specific characters found in the URLs
      // Syntax:
      //[ <Result> = ] URLEncodeEx (<sEntryString> is ANSI string)
      //
      // Parameters:
      //	sEntryString (ANSI string): String to pass in the URL
      // Return value:
      // 	ANSI string: String for URL
      
      Proc√©dure globale privee URLEncodeEx(sEntryString est une cha√Æne)
      	
      	// Local variables
      	sEncodedURL est une cha√Æne
      	
      	// Encode the URL
      	sEncodedURL = URLEncode(sEntryString)
      	
      	// Replace the special characters
      	sEncodedURL = Remplace(sEncodedURL, "=", "%3D", SansCasse)
      	sEncodedURL = Remplace(sEncodedURL, "&", "%26", SansCasse)
      	sEncodedURL = Remplace(sEncodedURL, "+", "%2B", SansCasse)
      
      RENVOYER sEncodedURL
     type : 458752
   -
     name : getUsableKey
     internal_properties : CAAAAAgAAAA8dZ7Qrjx75YAFGzrJAnNHXhDg6nZm0WtC46mLT0593ekyCGmtM8qz9wPaKcL5908zpPQm6v8xUVPAs68zs8YJeB6KVIfhcpPqyKS3UrejNxFidjlEjXSWGzr3wefrvmubgvQ4bV+LFFADO3WE3yqXwX0BqUa6Ubb5RicsTz1llhhcdjd5xyA96Xbu12oenxrLMtWxDWAomAbl0PGUPr8DwlKAgXJrSu3OdealzMEE/hgqZuh5BroDoyB55QijYpgz6RTFr4U/yf1W5O8=
     procedure_id : 2220122836610562347
     type_code : 12
     code : |1-
      // Summary: Returns the usable characters of the MAC key passed in parameter
      // Syntax:
      //[ <Result> = ] getUsableKey (<sValueMACKey>)
      //
      // Parameters:
      //	sValueMACKey: Initial value of the MAC key
      // Return value:
      // 	string:  Value of the MAC key with the usable characters
      Proc√©dure globale privee getUsableKey(sValueMACKey)
      
      	//The first 38 characters
      	hexStrKey  est une chaine=sValueMACKey[[1 sur 38]]
      	//the characters 39 and 40, plus "00"
      	hexFinal   est une chaine= sValueMACKey[[39 sur 2]] + "00";
      	//ASCII code of the 39th character
      	cca0 est un entier=asc(hexFinal[[1]]); 
      	
      	//ASCII code between 70 and 97 (outside bounds)?
      	SI ( 70 < cca0 < 97) ALORS
      		//Adds the ASCII code character of the 39th minus 23 and the 40th character to the first 38 characters 
      		hexStrKey += caract(cca0-23) + hexFinal[[2 sur 1]]
      	SINON
      		//The 40th character is an M?
      		si (hexFinal[[2 sur 1]]="M") alors
      			//Adds the 39th and zero to the first 38 characters
      			hexStrKey += hexFinal[[1 sur 1]]+ "0"	
      		sinon
      			//Adds the 39th and 40th to the first 38 characters
      			hexStrKey += hexFinal[[1 sur 2]]
      		FIN
      	fin
      
      renvoyer hexStrKey
     type : 458752
   -
     name : BankServerAddressAdd
     procedure_id : 2220122836610627883
     type_code : 12
     code : |1-
      // Summary: Adds an IP address or a range of IP addresses of bank server
      // Syntax:
      //BankServerAddressAdd (<sIPRangeStart> is ANSI string [, <sIPRangeEnd> is ANSI string])
      //
      // Parameters:
      //	sIPRangeStart (ANSI string): IP address of the server or IP address of start of range
      //	sIPRangeEnd (ANSI string - default value=""): empty string if a single IP address, otherwise IP address of end or range (the first three digits of the IP address must be identical)
      // Return value:
      // 	None
      //// Example:
      // ServerBankAddressAdd("84.233.249.112","84.233.249.127")
      //
      Proc√©dure BankServerAddressAdd(local sIPRangeStart est une chaine, local sIPRangeEnd est une chaine = "")
      
      	// Includes the specified IP address in the array
      	m_aaIPAddressBankServers[sIPRangeStart] = vrai
      	
      	// Do we have to include other ones? (was it a range of IP addresses)?
      	si sIPRangeEnd<>"" ALORS
      		//Yes
      		si sIPRangeStart[[a PositionOccurrence(sIPRangeStart, "." , 3)]] <> sIPRangeEnd[[A PositionOccurrence(sIPRangeEnd, ".", 3)]] ALORS
      			ExceptionD√©clenche(1,"Only the ranges of IP addresses with identical first 3 numbers are accepted")
      		sinon
      			pour n = val(ExtraitCha√Æne(sIPRangeStart, 4, ".")) + 1 _a_ Val(ExtraitCha√Æne(sIPRangeEnd, 4, "."))
      				m_aaIPAddressBankServers[sIPRangeStart[[a PositionOccurrence(sIPRangeStart, ".", 3)]] + "" + n] = Vrai
      			FIN
      		FIN
      	FIN	
     type : 458752
   -
     name : BankServerAddressDeleteAll
     procedure_id : 2220122836610693419
     type_code : 12
     code : |1-
      // Summary: Deletes the IP addresses of the servers to check in S2S
      // Syntax:
      //BankServerAddressDeleteAll ()
      //
      // Parameters:
      //	None
      // Return value:
      // 	None
      //// Example:
      // IPAddressDeleteAll
      //
      Proc√©dure BankServerAddressDeleteAll()
      
      	SupprimeTout(m_aaIPAddressBankServers)
     type : 458752
   -
     name : BankServerCheckAddress
     internal_properties : CAAAAAgAAABWeRsfXHwx5nnSlcZ42K8s0z5oqi13/tTxfBU6U52eFM4M/MRznjGP9FW6rfrFR6mz5FjU+gjTltIODI7GVMqmrWTlQapkZpK7MDKVeeqX/dTG4+5hFcD7+nVT4BNhs95+8WOOcDDoP8CJYio9Yll0kwWQBNEb8jUv6nyPjCS4eCUNKuMbZZsikPdMskDspVIfCQ5yArdixmoPd6w5ITf3WMjbrA==
     procedure_id : 2220122836610758955
     type_code : 12
     code : |1-
      // Summary: Checks the issuing address
      // Syntax:
      //[ <Result> = ] BankServerCheckAddress (<nMode> is int, <sInformation> is ANSI string)
      //
      // Parameters:
      //	nMode (integer): Payment mode, modified by the procedure in case of falsification
      //	sInformation (ANSI string): (output) string containing an additional information in case of falsification
      // Return value:
      // 	boolean:  True if the address is checked, False otherwise
      
      Proc√©dure priv√©e BankServerCheckAddress(nMode est un entier, sInformation est une chaine)
      
      	// No IP address to check
      	si m_aaIPAddressBankServers..Occurrence = 0 ALORS
      		renvoyer vrai
      	FIN
      
      	// Retrieves the issuer IP
      	sRefer est une chaine = NavigateurAdresseIP(Faux)
      	
      	// If the referrer was retrieved
      	SI sRefer <> "" ALORS	
      		
      		// If the IP is not recognized
      		SI m_aaIPAddressBankServers[sRefer]..vide _ou_ PAS m_aaIPAddressBankServers[sRefer] ALORS
      			
      			// Consider the payment as being forged
      			nMode 		  = PAYMENT_FORGED		 
      			sInformation += [RC] + Cha√ÆneConstruit("The IP address of issuer was not recognized as an IP address of bank server (valid IP addresses: %1 ; Source IP address: %2", BankServerAddressList(), NavigateurAdresseIP(Faux), sRefer)
      			XERROR(sInformation)
      			RENVOYER Faux
      		FIN
      	SINON
      		
      		// No referrer
      		nMode = PAYMENT_FORGED		
      		sInformation += [RC] + Cha√ÆneConstruit("The IP address of the issuer was not retrieved in order to be checked with the one of the bank server" + NavigateurAdresseIP(Faux))
      		XERROR(sInformation)
      		RENVOYER Faux
      	FIN
      
      RENVOYER Vrai
     type : 458752
   -
     name : BankServerAddressList
     procedure_id : 2220122836610824491
     type_code : 12
     code : |1-
      // Summary: Lists the possible IP addresses of the bank for the return from server to server
      // Syntax:
      //[ <Result> = ] BankServerAddressList ([<sSeparator>])
      //
      // Parameters:
      //	sSeparator (default value=";"): separator of IP addresses
      // Return value:
      // 	ANSI string:  // 	None
      
      Proc√©dure BankServerAddressList(local sSeparator = ";")
      
      	sList est une chaine
      	
      	POUR TOUT ELEMENT bOk, sIPAddress DE m_aaIPAddressBankServers
      		sList += [sSeparator] + sIPAddress
      	FIN
      
      renvoyer sList
     type : 458752
   -
     name : LyraPayment_FromBank
     internal_properties : CAAAAAgAAAAlsV5RiEWWUT+EWG/afUZk0usjlSSuFWrTXEhnLI9H0fAaFK7d8ZZ1aHpdPBaY5kgxqp4mSfrVWuZco8I8+UH5P5RLJuYRAIClSenGnEr8Q5fVtCzczP3/f/MpH0FC7iELiCUxQzYacG/R3K3VMhhGCCGHEJrHmejdTfyHcPwytmQJ0p+aR0V6cIiKrxuOt4ZOkEqs3WH227imDMTqeCKprS6jDOL84hsDf12XKMED/Lw9bZJavdtUOtBvix9K3k377nA/isGRJoco/YwW0f3a09XliVb3V5BP55mDupRDsCW0syyVKWn3/Q==
     procedure_id : 2220122836610890027
     type_code : 12
     group : 3
     code : |1-
      // Summary: Asks to perform the payment via the Lyra platform
      // Syntaxe :
      //[ <R√©sultat> = ] LyraPayment_FromBank (<cyAmount> est mon√©taire, <sEmailAddress> est cha√Æne)
      //
      // Param√®tres :
      //	cyAmount (mon√©taire) : Amount of payment to perform
      //	sEmailAddress (cha√Æne ANSI) : Email address of the customer
      // Traitement automatique des exceptions :   ex√©cuter le bloc de code CAS EXCEPTION:
      //
      
      // Return value:
      // 	boolean:        True if the payment call was performed, False otherwise
      // Automatic process of exceptions:   run CASE EXCEPTION:
      PROCEDURE privee LyraPayment_FromBank(LOCAL cyAmount est un mon√©taire, local sEmailAddress est une chaine)
      
      	// Reset errors
      	XERROR()
      	
      	sForm 			est une chaine ansi
      	sFormData	est une chaine ansi
      	
      	TableauSupprimeTout(m_arrFormParameters)
      	
      	// Describes the sending form
      	sForm = chaineconstruit(HTML_FORM, "%2", "PaymentRequest", "%3", "%1")
      	
      	////// Merchant data
      	
      	// Acquisition of interactive data
      	sFormData += AddFormControl("vads_action_mode", "INTERACTIVE", vrai)
      	
      	si pas SolutionIdentifier~="" ALORS
      		sFormData += AddFormControl("vads_contrib", SolutionIdentifier, vrai)		
      	FIN
      	
      	// Amount in Cents without decimals
      	sFormData += AddFormControl("vads_amount", PartieEnti√®re(cyAmount * 100), vrai)
      	
      	// Test mode or production
      	si m_nSimulation ALORS
      		sFormData += AddFormControl("vads_ctx_mode", "TEST" ,Vrai)
      	sinon
      		sFormData += AddFormControl("vads_ctx_mode", "PRODUCTION" ,Vrai)
      	FIN
      	
      	// Currency
      	sFormData += AddFormControl("vads_currency", CurrencyToCodeISO4217(), Vrai)
      	
      	////// Customer data
      	
      	// Email
      	sFormData += AddFormControl("vads_cust_email", sEmailAddress, Vrai)
      
      	// Language for payment display
      	sFormData += AddFormControl("vads_language", Language, Vrai)
      	
      	// Identifier of the order
      	sFormData += AddFormControl("vads_order_id", OrderNumber, Vrai)
      	
      	// Optional free controls that can be used to store a summary of the order for example.
      	// vads_order_info, vads_order_info2, vads_order_info3
      
      	sFormData += AddFormControl("vads_page_action", "PAYMENT", Vrai)
      	
      	// Single payment (SINGLE) or multiple payments (MULTI)
      	sFormData += AddFormControl("vads_payment_config", "SINGLE", Vrai)
      	
      	// Return method of parameters (GET or POST)
      	sFormData += AddFormControl("vads_return_mode", "POST", Vrai)
      	
      	// ID of site, its value can be viewed on the interface of the tool for till management, in the "Settings"/"Store" tab by all authorized persons.
      	sFormData += AddFormControl("vads_site_id", SiteIdentifier, Vrai)
      
      	// Timestamp in YYYYMMDDHHMMSS format in GMT (or UTC) in 24-hour format.
      	sFormData += AddFormControl("vads_trans_date", DateHeureLocaleVersUTC(DateHeureSys)[[a 14]], Vrai)
      	
      	// ID of the transaction (unique over the day, numeric on 6 positions with zeros on the left)
      	sFormData += AddFormControl("vads_trans_id", Num√©riqueVersCha√Æne(Transaction.TransactionID, "06d"), Vrai)
      	
      	//Automatic validation (0) or manual validation (1), otherwise store config
      	//bufFormData += AddFormControl("vads_validation_mode","0",True)
      	
      	sFormData += AddFormControl("vads_version", "V2", Vrai)
      	
      	// Return URL in case of cancelation
      	sFormData += AddFormControl("vads_url_cancel", 	PaybackURL(URL_CANCEL) 	+ ["&"] + "reference=" + OrderNumber + "&amount=" + PartieEnti√®re(cyAmount * 100), Vrai)
      	// Return URL in case of error                                                                                                                                        
      	sFormData += AddFormControl("vads_url_error", 	PaybackURL(URL_REFUSED) + ["&"] + "reference=" + OrderNumber + "&amount=" + PartieEnti√®re(cyAmount * 100), Vrai)
      	// Return URL in case of refusal (other than authorization)                                                                                                               
      	sFormData += AddFormControl("vads_url_refused",	PaybackURL(URL_REFUSED) + ["&"] + "reference=" + OrderNumber + "&amount=" + PartieEnti√®re(cyAmount * 100), Vrai)
      	// Return URL in case of payment OK                                                                                                                                  
      	sFormData += AddFormControl("vads_url_success",	PaybackURL(URL_OK) 		+ ["&"] + "reference=" + OrderNumber + "&amount=" + PartieEnti√®re(cyAmount * 100), Vrai)
      	// Return URL otherwise                                                                                                                                                  
      	sFormData += AddFormControl("vads_url_return", 	PaybackURL(URL_CANCEL) 	+ ["&"] + "reference=" + OrderNumber + "&amount=" + PartieEnti√®re(cyAmount * 100), Vrai)
      		
      	// Custom data
      	POUR TOUT sValue,sControlName DE m_aaParamDelPaymentForm
      		SI TableauCherche(m_arrFormParameters, tcLin√©aire, "Name", sControlName) <= 0 ALORS
      			sFormData += AddFormControl(sControlName, sValue, vrai, *, *, vrai)
      		fin
      	FIN
      	
      	// Signature: all controls whose name starts with ¬´ vads_ ¬ª, sorted in alphabetical order
      	sSignature 			est une chaine ansi
      	stParameter 			est un FormParameter
      	
      	Trie(m_arrFormParameters, ttMembre, "Name")
      	
      	pour TOUT stParameter DE m_arrFormParameters
      		si Cha√ÆneCommencePar(stParameter.Name, "vads_", ccSansCasse) ALORS
      			sSignature += ["+"] + stParameter.Value
      		FIN
      	FIN
      	
      	sSignature += ["+"] + Certificate
      	
      	// Adds the signature
      	sFormData += AddFormControl("signature", BufferVersHexa(HashCha√Æne(AlgorithmHash, sSignature),SansRegroupement), vrai)
      	
      	// Complete
      	sForm = Cha√ÆneConstruit(sForm, ConvertTextToTML(TransitionText), m_sProviderURL, sFormData)
      	
      	// Displays the data
      	Cha√ÆneAffiche(sForm, typeMimeHTML)	
      
      RENVOYER Vrai
      
      CAS EXCEPTION:
      	XERROR("WL_EXCEPTION [LyraPayment]: " + ExceptionInfo)
      	RENVOYER Faux
     type : 458752
   -
     name : AddFormControl
     internal_properties : CAAAAAgAAACvlWU8nqGUqssLF8INcTsp1lqCFCVEvItsvFy990ygwFDuTbzIOdQEeigqTxGNTSVGo875iWh3+4iwRYF1I3EeqWgqXAKUiQCX9XhuP/j9S3voCdp0mREp3AfHCNTz5GD7nKF409Dh6tnrePx8xGgoTJDy/Dwjn0Q00JbzoapjXoQgUIteSSMu2xlkUb3cGHJvYLD+g0jPF8FZRLWBYNkAp61guIneRF4Gi2MKTVWIVaNwnA==
     procedure_id : 2220122836610955563
     type_code : 12
     code : |1-
      // Summary: Adds a control into an HTTP form
      // Syntax:
      //[ <Result> = ] AddFormControl (<sControlName> is string, <sControlValue> is string [, <bUTF8Conversion> is boolean [, <sControlType> is string [, <sEncodingType> is string [, <bDeleteFromArray> is boolean]]]])
      //
      // Parameters:
      //	sControlName (ANSI string): Name of the control in the form
      //	sControlValue (ANSI string): Value of the control in the form
      //	bUTF8Conversion (boolean - default value=0): Boolean set to true to convert the value into UTF8
      //	sControlType (ANSI string - default value="hidden"): Type of the control in the form
      //	sEncodingType (ANSI string - default value="HTML"): Type of encoding among HTTP, URL and TXT
      //	bDeleteFromArrat (boolean - default value=0): True to delete additional arrays if found
      
      // 	Undefined type:        // 	None
      PROCEDURE privee AddFormControl(local sControlName est une chaine, local sControlValue est une chaine, local bUTF8Conversion est un bool√©en = faux, local sControlType est une chaine = "hidden", local sEncodingType est une chaine = "HTML", local bDeleteFromArray est un bool√©en = faux)
      
      	stAFormValue 			est un FormParameter
      	sValueControlsInForm			est une chaine
      	
      	//the additional parameters have priority
      	//is there a custom parameter for this control?
      	si pas m_aaParamDelPaymentForm[sControlName]..vide ALORS
      		//Yes
      		//retrieve its value
      		sControlValue=m_aaParamDelPaymentForm[sControlName]
      		//delete it from the array
      		si bDeleteFromArray alors TableauSupprime(m_aaParamDelPaymentForm,sControlName)
      	FIN
      	
      	//do we have to convert into UTF 8?
      	si bUTF8Conversion ALORS
      		//yes
      		sControlValue=Cha√ÆneVersUTF8(sControlValue,alphabetAnsi)
      	FIN
      	
      	//stores the parameter and its value
      	stAFormValue.Name=sControlName
      	stAFormValue.Value=sControlValue
      	
      	tableauajoute(m_arrFormParameters,stAFormValue)
      	
      	//do we have to encode the data?
      	selon Majuscule(sEncodingType)
      		cas "HTML" : sValueControlsInForm=ConvertTextToTML(sControlValue)// HTMLEncode(sControlValue)	
      		cas "URL" : sValueControlsInForm=URLEncode(sControlValue)	
      		cas "CMD" //for ATOS (command line)
      			sValueControlsInForm=sControlValue	
      			sValueControlsInForm=Remplace(sValueControlsInForm," ","%20")
      			si EnModeLinux() _ou_ position(sValueControlsInForm,"&")<1 ALORS
      				RENVOYER sControlName+"="+sValueControlsInForm+" "	
      			sinon
      				//In Windows with & characters in the value
      				RENVOYER sControlName+"="""+sValueControlsInForm+""" "	
      			FIN
      			
      			
      		cas "TXT","TEXT" //for PAYBBOX and SaferPay
      			sValueControlsInForm=sControlValue
      			renvoyer sControlName+"="+sValueControlsInForm+rc
      		AUTRE CAS : sValueControlsInForm=sControlValue	
      	FIN
      
      
      renvoyer Cha√ÆneConstruit([
      	<input type="%1" name="%2" value="%3">
      	
      	],sControlType,sControlName,sValueControlsInForm)
     type : 458752
   -
     name : StringDisplayHTML
     procedure_id : 2220122836611021099
     type_code : 12
     code : |1-
      PROCEDURE globale privee StringDisplayHTML(local sText est une chaine)
      Cha√ÆneAffiche("<HTML>" + ConvertTextToTML(sText) + "</HTML>", typeMimeHTML)
     type : 458752
   -
     name : OnReturnLyraPayment
     procedure_id : 2220122836611086635
     type_code : 12
     group : 3
     code : |1-
      // Summary: Manage the Lyra return
      // Syntax:
      //[ <Result> = ] OnLyraPaymentReturn (<nMode> is int, <sInformation> is string, <sAction> is string)
      //
      // Parameters:
      //	nMode (integer): (output) Error mode
      //	sInformation (ANSI string): (output) Information about the return
      //	sAction (ANSI string): value among	URL_S2S, URL_CANCEL, URL_REFUSED, URL_OK
      // Return value:
      // 	boolean:             True if the return was managed
      //
      Proc√©dure OnReturnLyraPayment(nMode est un entier, sInformation est une chaine, sAction est une chaine)
      
      	// Reset errors
      	XERROR()
      
      	//S2S return?
      	SI sAction = URL_S2S ALORS
      		// Check the issuer IP
      		SI PAS BankServerCheckAddress(nMode, sInformation)	 ALORS
      			RENVOYER Faux
      		FIN
      	FIN
      
      	////checks the signature
      	
      	// Regenerates the list of parameters received
      	nParameterSubscript 	est un entier
      	AParameterInString est une chaine
      	stAParameter 		est un FormParameter
      	
      	TableauSupprimeTout(m_arrFormParameters)
      	
      	nParameterSubscript=1
      	boucle
      		AParameterInString = PageParam√®tre(nParameterSubscript)
      		si AParameterInString ~= "" alors sortir
      		
      		stAParameter.Name = ExtraitCha√Æne(AParameterInString, 1, "=")
      		stAParameter.Value = AParameterInString[[taille(stAParameter.Name) + 2 a]]
      		
      		TableauAjoute(m_arrFormParameters, stAParameter)
      		
      		nParameterSubscript++
      	FIN
      	
      	// Sort the parameters
      	Trie(m_arrFormParameters, ttMembre, "Name")
      	
      	//build the parameters used for the signature
      	sSignature 				est une chaine
      	sNameSignatureParameter 	est une chaine
      	
      	POUR TOUT stAParameter DE m_arrFormParameters
      		SI Cha√ÆneCommencePar(stAParameter.Name, "vads_", ccSansCasse) ALORS
      			
      			sSignature += stAParameter.Value + "+"
      			sNameSignatureParameter += ["+"] + stAParameter.Name	
      		FIN		
      	FIN
      	
      	sSignature += Certificate
      	sNameSignatureParameter += ["+"] + "Certificate"
      	
      	// Does it correspond?
      	si Majuscule(PageParam√®tre("signature")) <> majuscule(BufferVersHexa(HashCha√Æne(AlgorithmHash, Cha√ÆneVersUTF8(sSignature)),SansRegroupement)) ALORS
      		nMode = PAYMENT_FORGED
      		sInformation = "Signature not found or not recognized" +rc+"Type of hash:"+AlgorithmHash+ rc + "Signature data: " + sSignature + rc + ...
      						"Parameters: " + sNameSignatureParameter + rc + "Calculated signature: " + BufferVersHexa(HashCha√Æne(AlgorithmHash, Cha√ÆneVersUTF8(sSignature)),SansRegroupement) + rc + "Signature received: " + PageParam√®tre("signature")
      		XERROR(sInformation)
      		RENVOYER faux
      	sinon
      		XTRACE("Signature successfully checked")
      	FIN
      	
      	selon PageParam√®tre("vads_result")
      		CAS "00"
      			nMode = PAYMENT_VALID
      			sInformation = ""
      			
      		CAS "02"
      			nMode = PAYMENT_REFUSED
      			sInformation	 = "The vendor must contact the bank of the holder"
      		
      		cas "05"
      			nMode = PAYMENT_REFUSED
      			sInformation	 = "Return with vads_result control missing "
      						
      		cas "17"	
      			nMode = PAYMENT_CANCELED
      			sInformation	 = "Payment canceled"
      				
      		CAS "30"	
      			nMode = PAYMENT_FORGED
      			sInformation	 = "Error regarding the query format" + RC + PageParam√®tre("vads_extra_result")
      		
      		CAS "96"	
      			nMode = PAYMENT_FORGED
      			sInformation	 = "Technical error" + RC + PageParam√®tre("vads_extra_result")
      				
      		AUTRE CAS
      			nMode = PAYMENT_REFUSED
      			sInformation	 = "Return with vads_result control incorrect:  "+ PageParam√®tre("vads_result") + rc + PageParam√®tre("vads_extra_result")
      	FIN
      	
      XTRACE(sInformation)
      
      renvoyer vrai
     type : 458752
   -
     name : ScriptDisplayPOST
     internal_properties : CAAAAAgAAAAi+xEQ6Ki1KPnpqECAp7dBQ1t5tv5Fj4zRE1V77Ev5IpHAa+643uXn4uUg/g74NRf3gk29h+Y+ncLPbxKhEi+Mty7Sj65+bsrtXJGHA6XDUlMhQ8pswSck1QvdJOihtrDzUA1u+epHANcJIBKC/pZc+DAGqnLrJzwI/rxhz5xx1FbcGInETxpH44cE3OchaTzYp/c5LpG2lk84pjG/5vJone1h
     procedure_id : 2220122836611152171
     type_code : 12
     code : |1-
      // Summary: Equivalent to the WLanguage ScriptDisplay function but in POST mode (to pass the parameters) instead of GET
      // Syntax:
      //ScriptDisplayPOST (<sActionURL> is string [, <sListParameters> is string [, <sFormName> is string [, <sParameterSeparator> is ASI string]]])
      //
      // Parameters:
      //	sActionURL (ANSI string): URL to display
      //	sListParameters (ANSI string - default value=""): List of parameters
      //	sFormName (ANSI string - default value="WWFORM"): Name of the form
      //	sParameterSeparator (ANSI string - default value="&"): Separator of parameters
      // Return value:
      // 	None
      //
      PROCEDURE globale privee ScriptDisplayPOST(local sActionURL est une chaine, local sListParameters est une chaine = "", local sFormName est une chaine = "WWFORM", local sParameterSeparator est une chaine = "&")
      
      	sFormData	est une chaine
      	sParameterName		est une chaine
      	sParameterValue	est une chaine
      	sOneParameter			est une chaine
      
      	// Builds an HTML form
      	sForm est une chaine = HTML_FORM
      	
      	// Inserts the parameters into the form
      	POUR TOUTE CHAINE sOneParameter DE sListParameters SEPAREE PAR sParameterSeparator	
      		
      		// Extracts the name of the parameter
      		sParameterName 	 = ExtraitCha√Æne(sOneParameter, 1, "=")
      		sParameterValue = HTMLEncode(sOneParameter[[Position(Cha√ÆneVersUTF8(sOneParameter), "=") + 1 A]])
      		
      		sFormData += Cha√ÆneConstruit([
      			<input type="hidden" name="%1" value="%2">
      		], sParameterName, sParameterValue)
      	FIN
      	
      	// Fills the form
      	sForm = Cha√ÆneConstruit(sForm, sActionURL, sFormName, sFormData, "")
      
      	// Displays
      	chaineAffiche(sForm, typeMimeHTML)
     type : 458752
   -
     name : FormParameterAdd
     internal_properties : CAAAAAgAAABOcp7AtLVCjE61S7tuTWTQybFIbSRZErYKi4nmy+KvYbrkIuP2RRSADO68jYOpvO+hkAYJT79edSZ9mfDNFkuDzvexMZ8r3yLg0WReiydPm+1Usq01PREszYKZQASu9GoaVOtnS2gQKJnDlZKRraGvDZuaLruAssgiSGOPvHtgegBO/QaQeQvbJiRS8vVopJrP0vpEWEwz5rVLBI6RdiK1MMJfzE3HJyl/7bgMINOZ8KbGXQ8kLH15iFZR0qsJTA6hSrlWZJGzHX2cKxlN
     procedure_id : 2220122836611217707
     type_code : 12
     group : 3
     code : |1-
      // Summary: used to add parameters to the payment form sent to the bank
      // Syntax:
      //FormParameteradd (<sParameterName> is string, <sParameterValue> is string [, <bEncodeBase64> is boolean])
      //
      // Parameters:
      //	sParameterName (ANSI string): Name of the parameter that must be added into the form
      //	sParameterValue (ANSI string): Value of the parameter
      // 	bEncodeBase64 (boolean - default value=0): True to encode the value of the parameter in base64
      // Return value:
      // 	None
      //
      // Example:
      //	Systempay: Name of the person
      // MyPayment.FormParameterAdd("vads_cust_name","DOE") 
      
      // Ogone: Title
      // MyPayment.FormParameterAdd("title","Custom title") 
      
      //	PayPal: Title of the company
      // MyPayment.FormParameterAdd("BRANDNAME ","My Company  (to pay "+cyAmount+" Euros)") 
      
      // ATOS
      // MyPayment.FormParameterAdd("sfBgColor ","000") 
      
      //	PayBox: Time-out
      //		MyPayment:FormParameterAdd("pbx_display","300") //To set the time-out to 300 seconds (5 minutes)
      
      PROCEDURE FormParameterAdd(LOCAL sParameterName est une chaine, LOCAL sParameterValue est une chaine,local bEncodeBase64 est un bool√©en=faux)
      si bEncodeBase64 ALORS
      	m_aaParamDelPaymentForm[sParameterName] = Encode(sParameterValue,encodeBASE64URL)
      sinon
      	m_aaParamDelPaymentForm[sParameterName] = sParameterValue
      fin
      
      	
     type : 458752
   -
     name : SaferpayPayment_FromBank
     internal_properties : CAAAAAgAAABYA3VRhWOK0aCLH7ZuEG9qWoypHWU2me6hccKuimSVAVH5TTBMfAzvdksRaEYprD8E/33PcesJ9fcBWDFslOTfein5g+yjlkYFsp5r38Ua2RKF11wBJVfmKbEVDNrapkZY2QeFEMqa8LpwReQXmzzpTZj8aXbTd9Z3y0HXH/1Sb0rI
     procedure_id : 2220122836611283243
     type_code : 12
     group : 3
     code : |1-
      // Summary: Starts the payment with Saferpay (Sicx cards)
      // Syntaxe :
      //[ <R√©sultat> = ] SaferpayPayment_FromBank (<cyAmount> est mon√©taire, <sEmailAddress> est cha√Æne)
      //
      // Param√®tres :
      //	cyAmount (mon√©taire) : Amount of payment to perform
      //	sEmailAddress (cha√Æne ANSI) : Email address of the customer
      // Traitement automatique des exceptions :   ex√©cuter le bloc de code CAS EXCEPTION:
      //
      
      // Return value:
      // 	boolean:        True if the payment call was performed, False otherwise
      // Automatic process of exceptions:   run CASE EXCEPTION:
      PROCEDURE PRIV√âE SaferpayPayment_FromBank(LOCAL cyAmount est un mon√©taire, local sEmailAddress est une chaine <utile>)
      
      	sURL					est une chaine
      	sFormData		est une chaine
      
      	// Reset errors
      	XERROR()
      
      	TableauSupprimeTout(m_arrFormParameters)
      	
      	sFormData += AddFormControl("ACCOUNTID", SiteIdentifier, *, *, "TXT")
      	
      	//information about the payment
      	sFormData += AddFormControl("AMOUNT", PartieEnti√®re(cyAmount * 100), *, *, "TXT")// ' 120.50 EUR
      	sFormData += AddFormControl("CURRENCY", CurrencyToString(), *, *, "TXT")
      	sFormData += AddFormControl("ORDERID", OrderNumber, *, *, "TXT")
      	
      	sDescription est une chaine = TransitionText
      	si sDescription ~= "" ALORS
      		sDescription = projetinfo(piNomSiteD√©ploy√©)
      	FIN
      	sFormData += AddFormControl("DESCRIPTION", sDescription, *, *, "TXT")
      	
      	//Return URL
      	sFormData += AddFormControl("SUCCESSLINK", PaybackURL(URL_OK), *, *, "TXT")
      	sFormData += AddFormControl("BACKLINK", PaybackURL(URL_CANCEL), *, *, "TXT")
      	sFormData += AddFormControl("FAILLINK", PaybackURL(URL_REFUSED), *, *, "TXT")
      	sFormData += AddFormControl("NOTIFYURL", PaybackURL(URL_S2S), *, *, "TXT")
      
      	sFormData += AddFormControl("LANGID", Language, *, *, "TXT")	
      	sFormData += AddFormControl("CCCVC","yes", *, *, "TXT")
      	sFormData += AddFormControl("CCNAME","yes", *, *, "TXT")	
      	
      	//custom data
      	POUR TOUT sValue, sControlName DE m_aaParamDelPaymentForm		
      		SI TableauCherche(m_arrFormParameters, tcLin√©aire, "Name", sControlName) <= 0 ALORS
      			sFormData +=AddFormControl(sControlName, sValue, *, *, "TXT", vrai)
      		fin
      	FIN
      	
      	
      	bRequestOK est un bool√©en
      	(bRequestOK,sURL) = WebRequest(<sHTTPURL>: m_sProviderURL, <sContent>: Remplace(sFormData, RC, "&"),<nMethod>: httpPost)
      	
      	// URL or error message?
      	SI pas bRequestOK _ou_ Majuscule(SansEspace(sURL[[A 4]])) <> "HTTP" ALORS
      
      		XERROR("Error returned by Saferpay: " + sURL)
      		RENVOYER Faux
      	SINON
      		
      		sParameters est une chaine = urldecode(remplace(extraitchaine(sURL, 2, "?"), eot, ""))
      		sURL = extraitchaine(sURL, 1, "?")
      		
      		// Displays the data	
      		ScriptAffiche(sURL, sParameters)	
      	FIN
      
      RENVOYER Vrai
      
      CAS EXCEPTION:
      	XERROR("WL_EXCEPTION [SaferpayPayment]: " + ExceptionInfo)
      	RENVOYER Faux
     type : 458752
   -
     name : BuildProviderURL
     procedure_id : 2220122836611348779
     type_code : 12
     code : |1-
      // Summary: Builds the URL to call according to the payment provider
      // Syntax:
      //BuildProviderURL ()
      //
      // Parameters:
      //	None
      // Return value:
      // 	None
      //
      PROCEDURE priv√©e BuildProviderURL()
      
      	// Reset errors
      	XERROR()
      
      	Selon m_nSimulation
      		cas TEST_MODE 
      			// URL of the API in test mode
      			si (m_nSupplier & Lyra) = Lyra _et_ m_aaURL_Test_Suppliers[m_nSupplier]..vide ALORS
      				m_sProviderURL = m_aaURL_Test_Suppliers[Lyra]
      			sinon
      				SI (m_nSupplier & MoneticoPaiement) = MoneticoPaiement _ET_ m_aaURL_Test_Suppliers[m_nSupplier]..Vide ALORS
      					m_sProviderURL = m_aaURL_Test_Suppliers[MoneticoPaiement]
      				sinon
      					m_sProviderURL = m_aaURL_Test_Suppliers[m_nSupplier]
      				FIN
      			FIN
      		CAS SIMULATION_MODE
      			// URL of the API in test mode
      			SI (m_nSupplier & SIPS2) = SIPS2 _ET_ m_aaURL_Simu_Suppliers[m_nSupplier]..Vide ALORS
      				m_sProviderURL = m_aaURL_Simu_Suppliers[SIPS2]
      			SINON
      				m_sProviderURL = m_aaURL_Simu_Suppliers[m_nSupplier]
      			FIN
      			
      		autre cas //REAL_MODE		
      		// URL of API in production mode
      		SI (m_nSupplier & MoneticoPaiement) = MoneticoPaiement _ET_ m_aaURL_Suppliers[m_nSupplier]..Vide ALORS
      			m_sProviderURL = m_aaURL_Suppliers[MoneticoPaiement]
      		SINON
      			m_sProviderURL = m_aaURL_Suppliers[m_nSupplier]
      		FIN
      		
      	FIN
      	
      	SI PAS (Cha√ÆneCommencePar(m_sProviderURL,"HTTP",ccSansAccent+ccSansCasse) _OU_ m_sProviderURL[[1]] DANS ("/",".")) ALORS
      			//path not specified therefore in the path of WEBDEV engine
      			m_sProviderURL = URLCurrentDomain() + ["/"] + AliasWEBDEVEngine() + ["/"] + m_sProviderURL 
      	FIN
      	
      	SELON vrai 
      		
      		// PayBox
      		CAS (m_nSupplier=PayBox)
      			
      			// Payment URL
      			//The method BuildPayboxURL() IS no longer called from this code, the call is made in the methods PayBoxPayment_Direct and PayBoxPayment_FromBank
      
      		// Soci√©t√© g√©n√©rale, Cr√©dit Agricole
      		CAS (m_nSupplier &  Atos) = Atos
      			
      			// Path of the API
      			si EnModeLinux() ALORS
      				m_sProviderURL = COL_SECUREPAYMENT.gsSiteDirectories + [fsep]+"ATOS_Linux"+ [fsep] + m_sEXE_ATOSRequest
      			sinon
      				m_sProviderURL = COL_SECUREPAYMENT.gsSiteDirectories + [fsep] +"ATOS_Windows"+ [fsep]+ m_sEXE_ATOSRequest
      			FIN
      
      			
      		// Supplier not automatically supported
      		AUTRES CAS
      			
      	FIN
     type : 458752
   -
     name : AddHTTPFormControl
     internal_properties : CAAAAAgAAAA3DX0kloeIPmMXG+L1yZfp7rpOfp2U3KtsvJxNt8yQwHAOjcy4meQ0Shgab+H9jXWWc16ZaXjXGwiw5bEVw6F+6SgKjDJ0mXCHZUguL8i922tYWVr0SVFpXN8vgEz77GgzZAlgC+j5cqGjQDS0LPAwZJj65DQ7dyzciD4L+ZILhvxIGLMWgVvWg9GsCXUEIHpHCNgm2yCnv+lRbK356FkKNcMiAqPoSnQEsRV8N12ATbsIJA==
     procedure_id : 2220122836611414315
     type_code : 12
     code : |1-
      // Summary: Adds a control into an HTTP form
      // Syntax:
      //[ <Result> = ] AddControlHTTPForm (<sForm>, <sControlName> is ANSI string, <sControlValue> is ANSI string [, <sControlType> is ANSI string [, <sEncodingType> is ANSI string [, <bBrowseArray> is boolean]]])
      //
      // Parameters:
      //	sForm: Name of the HTTP form
      //	sControlName (ANSI string): Name of the control in the form
      //	sControlValue (ANSI string): Value of the control in the form
      //	sControlType (ANSI string - default value="hidden"): Type of the control in the form
      //	sEncodingType (ANSI string - default value="TXT"): Encoding type among HTML, URL and TXT
      //	bBrowseArray (boolean - default value=0): <specify the role of bBrowseArray>
      // Return value:
      // 	Undefined type:        // 	None
      //
      PROCEDURE privee AddHTTPFormControl(sForm, LOCAL sControlName est une cha√Æne, local sControlValue est une cha√Æne, local sControlType est une chaine = "hidden", local sEncodingType est une chaine="TXT", local bArrayBrowse est un bool√©en = faux)
      
      	stAFormValue 			est un FormParameter
      	sValueControlsInForm			est une chaine
      	
      	//the additional parameters have priority
      	//is there a custom parameter for this control?
      	SI pas bArrayBrowse _et_ PAS m_aaParamDelPaymentForm[sControlName]..Vide ALORS
      		//Yes
      		//retrieve its value
      		sControlValue = m_aaParamDelPaymentForm[sControlName]
      		//XTRACE("Redefined value: "+sControlName+" : "+ sControlValue)
      		//delete it from the array
      		Supprime(m_aaParamDelPaymentForm, sControlName)
      	FIN
      	
      	//stores the parameter and its value
      	stAFormValue.Name = sControlName
      	stAFormValue.Value = sControlValue
      	Ajoute(m_arrFormParameters, stAFormValue)
      	
      	//Add to the form
      	HTTPAjouteParam√®tre(sForm, sControlName,	sControlValue)
      	
      	//do we have to encode the data?
      	SELON Majuscule(sEncodingType)
      		CAS "HTML" : sValueControlsInForm=HTMLEncode(sControlValue)	
      		CAS "URL" 	: sValueControlsInForm=URLEncode(sControlValue)	
      		CAS "TXT","TEXT" //for PAYBBOX and SaferPay
      			sValueControlsInForm = sControlValue
      			RENVOYER sControlName + "=" + sValueControlsInForm + RC
      		AUTRE CAS : sValueControlsInForm = sControlValue	
      	FIN
      
      RENVOYER Cha√ÆneConstruit([
      	<input type="%1" name="%2" value="%3">
      	
      	], sControlType, sControlName, sValueControlsInForm)
     type : 458752
   -
     name : PayPalBasketAddLine
     procedure_id : 2220122836611479851
     type_code : 12
     code : |1-
      // Summary: Adds a line into the basket in order to get the details of the basket in the PayPal payment
      // Syntax:
      //PayPalBasketAddLine (<cyArticleUnitPrice> is currency, <sArticleName> is ANSI string [, <sArticleDescription> is ANSI string [, <nQuantity> is int [, <sURL> is ANSI string]]])
      //
      // Parameters:
      //	cyArticleUnitPrice (currency): Amount of an article
      //	sArticleName (ANSI string): Name of the article
      //	sArticleDescription (ANSI string - default value=""): description of the line
      //	nQuantity (integer - default value=1): Quantity of articles
      //	sURL (ANSI string - default value=""): URL to the article
      // Return value:
      // 	None
      //
      // Example:
      // 	PayPalBasketAddLine(5.99, "Socks", "Long red socks", 1)
      //
      PROCEDURE PayPalBasketAddLine(local cyArticleUnitPrice est un mon√©taire, local sArticleName est une chaine, local sArticleDescription est une chaine = "", local nQuantity est un entier = 1, local sURL est une chaine ="")
      
      	// Keeps the data
      	stBasketLine est un BasketLine
      	stBasketLine.ArticleUnitPrice 	= cyArticleUnitPrice
      	stBasketLine.ArticleName			= sArticleName
      	stBasketLine.ArticleDescription	= sArticleDescription
      	stBasketLine.Quantity			 	= nQuantity
      	stBasketLine.URL				 	= sURL
      
      	ajoute(m_arrBasket, stBasketLine)
     type : 458752
   -
     name : PayPalBasketDeleteAll
     procedure_id : 2220122836611545387
     type_code : 12
     code : |1-
      // Summary: Clears the content of the basket
      // Syntax:
      //PayPalBasketDeleteAll ()
      //
      // Parameters:
      //	None
      // Return value:
      // 	None
      //
      PROCEDURE PayPalBasketDeleteAll()
      
      	// Clears the array
      	TableauSupprimeTout(m_arrBasket)
     type : 458752
   -
     name : OnPaymentReturnSaferpay
     procedure_id : 2220122836611610923
     type_code : 12
     group : 3
     code : |1-
      // Summary: <specify the action of the procedure>
      // Syntax:
      //[ <Result> = ] OnPaymentReturnSaferpay (<nMode> is int, <sInformation> is ANSI string, <sAction> is ANSI string, <sDataParameters> is ANSI string)
      //
      // Parameters:
      //	nMode (integer): (output) Error mode
      //	sInformation (ANSI string): (output) Information about the return
      //	sAction (ANSI string): value among	URL_S2S, URL_CANCEL, URL_REFUSED, URL_OK
      //	sDataParameters (ANSI string): <specify the role of sDataParameters>
      // Return value:
      // 	boolean: // 	None
      //
      // Example:
      // Indicate an example.
      //
      PROCEDURE OnPaymentReturnSaferpay(nMode est un entier, sInformation est une chaine, sAction est une chaine,sDataParameters est une chaine)
      
      
      	// Reset errors
      	XERROR()
      	
      	//S2S return?
      	SI sAction = URL_S2S ALORS
      		// Check the issuer IP
      		SI PAS BankServerCheckAddress(nMode, sInformation)	 ALORS
      			RENVOYER Faux
      		FIN
      	FIN
      	SELON sAction
      				
      		CAS URL_OK, URL_S2S
      						
      			// Check the signature via the URL found in ms_URL_SAFERPAY_VERIFICATION
      			TableauSupprimeTout(m_arrFormParameters)
      			sFormData 		est une chaine
      			sResponse				est une chaine
      			bRequestOK 				est un bool√©en
      			
      			sFormData += AddFormControl("DATA", PageParam√®tre("DATA"), *, *, "TXT")
      			sFormData += AddFormControl("SIGNATURE", PageParam√®tre("SIGNATURE"), *, *, "TXT")
      			sFormData = Cha√ÆneFormate(sFormData, ccSansEspace)
      		
      		
      			(bRequestOK,sResponse) = WebRequest(<sHTTPURL>: SettingURL_SaferPayCheck,<sContent>: Remplace(sFormData, RC, "&"),<nMethod>: httppost)
      					
      			// OK or error message?
      			SI pas bRequestOK _OU_ Majuscule(SansEspace(sResponse[[A 3]])) <> "OK:" ALORS
      				XERROR("Signature NOT checked by Saferpay: " + sResponse+rc+"data_: "+sFormData)
      				sInformation = "Signature NOT checked by Saferpay: " + sResponse
      				nMode = PAYMENT_FORGED
      			sinon
      				
      				// Retrieve the payment information
      				xmlSaferpayData est un xmlDocument=XMLOuvre(PageParam√®tre("DATA"),depuisCha√Æne)
      				
      				// Is it the proper payment and the proper amount?
      				si xmlSaferpayData.IDP:ORDERID = OrderNumber _et_ xmlSaferpayData.IDP:AMOUNT = m_cyAmount * 100 ALORS
      					
      					nMode = PAYMENT_VALID		
      					//the information found in the XML of the DATA parameter is used as "standard" page parameters								
      					POUR nAttributeSubscript = 1 _a_ xmlSaferpayData.IDP..Attribut..Occurrence
      							sDataParameters += ["&"] + xmlSaferpayData.IDP..Attribut[nAttributeSubscript]..Nom + "=" + xmlSaferpayData.IDP..Attribut[nAttributeSubscript]..Valeur
      					FIN		
      					XTRACE(PAYMENT_VALID)
      				sinon
      					nMode = PAYMENT_FORGED
      					XERROR("Order identifier or Saferpay amount are different: " + xmlSaferpayData.IDP:ORDERID + " <> " + OrderNumber + " or " + xmlSaferpayData.IDP:AMOUNT + " <> " + m_cyAmount * 100)
      					sInformation="Order identifier or Saferpay amount are different: " + xmlSaferpayData.IDP:ORDERID + " <> " + OrderNumber + " or " + xmlSaferpayData.IDP:AMOUNT + " <> " + m_cyAmount * 100
      				FIN						
      			fin	
      					
      		CAS URL_CANCEL
      			nMode = PAYMENT_CANCELED
      		AUTRE CAS
      			nMode = PAYMENT_REFUSED
      	FIN
      
      RENVOYER Vrai
     type : 458752
   -
     name : BuildPayboxURL
     internal_properties : CAAAAAgAAABWoRH/jNihD4sukMZ4ODvipKHVGrtEshqPCZoz/sEparnEDcBRjwws56Fw5GSDWOy99/hz8bfgAakFKSxXevbfd4L/HFNdTf//WhhhzzMAtbGVeAkPl4uVASNKx6/mf6za9gqn3iIFre8fgQO3h4Pg5+p7FzOZd6umuBvcVonW2K2W0bjHwRpw2U0jV6Z9ZF1/Jj9p/itm5I7UlLAO2zMzwg==
     procedure_id : 2220122836611676459
     type_code : 12
     code : |1+
      // Summary: <specify the action of the procedure>
      // Syntax:
      //BuildPayboxURL ()
      //
      // Parameters:
      //	None
      // Return value:
      // 	None
      //
      // Example:
      // Indicate an example.
      //
      Proc√©dure BuildPayboxURL()
      sPreprod  est une cha√Æne
      
      
      
      //https://tpeweb.paybox.com/cgi/RemoteMPI.cgi
      
      // Test identifier: test environment
      SI m_sIdentifier = IDENTIFIER_PAYBOX_TEST ALORS
      	
      	// Test URL
      	SI DirectMode ALORS
      		si m_bMode3DS ALORS
      			m_sProviderURL ="https://preprod-tpeweb.paybox.com"
      		sinon
      			m_sProviderURL ="https://preprod-ppps.paybox.com"
      		FIN
      	sinon
      		m_sProviderURL ="https://preprod-tpeweb.paybox.com"
      	FIN
      SINON	
      	// In pre-production, adds the prefix of pre-production servers
      	SI m_nSimulation=TEST_MODE ALORS
      		sPreprod = "preprod-"			
      	FIN
      	bServerOK est un bool√©en= Faux
      	arrPayboxServers 				est un tableau de cha√Ænes
      	SI DirectMode ALORS
      		SI m_bMode3DS ALORS
      			arrPayboxServers=m_arrPayboxDirect3DSServers
      		sinon
      			arrPayboxServers=m_arrPayboxDirectServers
      		fin
      	sinon
      		arrPayboxServers=m_arrPayboxServers
      	FIN
      	// Defines the Paybox server
      	POUR TOUT sServer DE arrPayboxServers
      		// Server call
      		sRequestReturn 	est une chaine
      		bRequestOK 		est un bool√©en
      		(bRequestOK,sRequestReturn) = WebRequest("https://" + sServer + "/load.html")
      		SI bRequestOK ALORS
      			// Reads the value of <DIV id="server_status">
      		 	si ExtraitCha√Æne(ExtraitCha√Æne(ExtraitCha√Æne(sRequestReturn,2,"id=""server_status"""),2,">"),1,"<")~="OK" ALORS
      		 		bServerOK = Vrai
      		 	fin
      		 	
      //			// Read the results
      //			XMLDocument("DOC_TPE", sRequestReturn, xdHTML)
      //			IF NOT ErrorOccurred THEN
      //				// Root (HTML)
      //				XMLRoot("DOC_TPE")
      //				// BODY
      //				XMLChild("DOC_TPE"); XMLNext("DOC_TPE")
      //				// DIV[2]
      //				XMLChild("DOC_TPE"); XMLNext("DOC_TPE"); XMLNext("DOC_TPE")
      //				IF XMLData("DOC_TPE") = "OK" THEN
      //					bServerOK = True
      //				END
      //			END			
      //			// End of reading
      //			XMLClose("DOC_TPE")
      		FIN
      		
      		// If the server was found
      		SI bServerOK ALORS
      			
      			// Stores the server
      			m_sProviderURL = "https://" + sPreprod + sServer
      			SORTIR
      		FIN
      	FIN
      	
      
      	// No server to call
      	SI PAS bServerOK ALORS
      		//no server is OK, take the first one (there may be an access problem from the deployment server)
      		m_sProviderURL = "https://" + sPreprod + arrPayboxServers[1]		
      		XERROR("No Paybox server is accessible, the first server will be used")
      	FIN	
      FIN
      
      si DirectMode alors
      	SI m_bMode3DS ALORS
      		m_sProviderURL+="/cgi/RemoteMPI.cgi"
      	sinon
      		m_sProviderURL+="/PPPS.php"
      	FIN
      sinon
      	SI DisplayFormat = Computers ALORS
      		m_sProviderURL+= "/cgi/MYchoix_pagepaiement.cgi"
      	sinon
      		m_sProviderURL+="/cgi/ChoixPaiementMobile.cgi"
      	FIN
      
      FIN
      
     type : 458752
   -
     name : DataCashMastercardPayment_FromBank
     internal_properties : CAAAAAgAAADPy/UEcGHawqpXFB5YbOish5YSHy08Z0vXnOc2/cdshwVLL17eaPfp96oHYeFbGpzB3SFKroM/5ONUe3bvjAXmK7CJ8jTmIIyl60n3VCbDeUPSTfabXuH4sUM34kWlQ39fqeTRqj2AbKW7VJbZP5ZvR+CUvQ0IlRb8Meqgc0jArQ8rEgbE+piIv0MzkgjBSOIxmAEInd4NVnVd1pvvV9Vxx5ya2IYNuPC3AXSCKRCH3DrRLVPpGYERNIhUczo0ImZV1Q5RcQm7UZpHD3E16mRfDpZXpYsFwzWuWLHbyFyvOg41UEMeYbgyKcXYj3kZL/mu6D6SUmYBQE4IhyRySklGXQmtQI3pdhRYmfVVkbR/JdIPC4Esc+cjBgJGIECEMsxrcdYn5jQXK+F7hIc8y4OcaodgS+ZmeSPFm1MEvFK75O3JzpvqFg2bwcn+ghQIE+e3BUJ/qosq55WLBJYus6j4Kfn4bx2Fq/GYk/FSk1wZVu4CLQr/oIkUem2VmF28Nx716myzLDHVFQ/UkwhWN8D7W29Af+8+kM3hhZWQiCu0PS8lJf1sjfKVti4ptfSi5JehlkOIydWDL3iBDr2Ri9qwVk+h93gVxxv1kFCZqFyU5V6dGWmaXUM2yZUlEIWgcNA/5t6eRgzy2PeVgYxzdWnQYat5ISDb/j1dlfqAVTfbzMKZAyZJ3IzbOixjt1tpgdkGAfInaqv/B/Et1LANOesZCiKG0NxclF6oGB8XuWm6W//2wPHspLJI9cir6LzoB8dsvIXAucKWZCYL5yXzB0vGJl/cchXQerM1i/XHpe1QryPCSg==
     procedure_id : 2220122836611741995
     type_code : 12
     group : 3
     code : |1-
      // Summary: Asks to perform the payment via Mastercard
      // Syntax:
      //[ <Result> = ] DataCashMastercardPayment_FromBank (<cyAmount> is currency, <sEmailAddress> is string)
      //
      // Parameters:
      //	cyAmount (currency): Amount of payment to perform
      //	sEmailAddress (ANSI string): Email address of the customer
      // Return value:
      // 	boolean:        True if the payment call was performed, False otherwise
      //
      // Automatic process of exceptions:   run CASE EXCEPTION:
      //
      
      PROCEDURE privee DataCashMastercardPayment_FromBank(LOCAL cyAmount est un mon√©taire, local sEmailAddress est une chaine)
      
      	// Reset errors
      	XERROR()
      	
      	
      	//vpc_AccessCode => AccessCode
      	//vpc_Merchant => CompanyCode
      	//Secure Hash Secret 1 => KeyMAC
      	
      	sForm 			est une chaine ansi
      	sFormData		est une chaine ansi
      	sMACCode 				est une chaine
      	TableauSupprimeTout(m_arrFormParameters)
      	
      	// Describes the sending form
      	sForm = chaineconstruit(HTML_FORM, "%2", "PaymentRequest", "%3", "%1")
      	
      	////// Merchant data
      	
      	//The version of the Virtual Payment Client API being used. The current version is 1. 
      	sFormData += AddFormControl("vpc_Version", "1", vrai)
      	//Indicates the transaction type.  This must be equal to 'pay' for a 2 or 3-Party payment. 
      	sFormData += AddFormControl("vpc_Command", "pay", vrai)
      	//Authenticates the merchant on the Payment Server. This means that a merchant cannot access another merchant's Merchant Id.  
      	//The access code is provided when the merchant profile is registered with a Payment Provider. 
      	sFormData += AddFormControl("vpc_AccessCode", AccessCode, vrai) //"6AQ89F3"
      	//The unique Merchant Id assigned to a merchant by the Payment Provider. The Merchant ID 
      	//identifies the merchant account against which settlements will be made. 
      	sFormData += AddFormControl("vpc_Merchant", CompanyCode, vrai) //"TESTMERCHANT01"
      	
      	
      	
      	//A unique value created by the merchant. 
      	sFormData += AddFormControl("vpc_MerchTxnRef", Num√©riqueVersCha√Æne(Transaction.TransactionID, "06d"), vrai) //"ORDER958743-1"
      	//The merchant's identifier used to identify the order on the Payment Server. For example, a 
      	//shopping cart number, an order number, or an invoice number. 
      	//This identifier will be displayed in the Transaction Search results in the Merchant 
      	//Administration portal on the Payment Server. 
      	sFormData += AddFormControl("vpc_OrderInfo", OrderNumber, vrai) //"ORDER958743"
      	
      	//The amount of the transaction, expressed in the smallest currency unit. The amount must not 
      	//contain any decimal points, thousands separators or currency symbols. For example, $12.50 is 
      	//expressed as 1250. 
      	//This value cannot be negative or zero. The maximum valid value is 2147483647. 
      	sFormData += AddFormControl("vpc_Amount", PartieEnti√®re(cyAmount * 100), vrai)
      	// The currency of the order expressed as an ISO 4217 alphanumeric code. This field is case-
      	//sensitive and must include uppercase characters only. 
      	//The merchant must be configured to accept the currency used in this field. To obtain a list of 
      	//supported currencies and codes, please contact your Payment Provider. 
      	sFormData += AddFormControl("vpc_Currency", CurrencyToCodeISO4217(), Vrai)	
      	
      	// Language for payment display
      	//Specifies the language used on the Payment Server pages that are displayed to the cardholder, 
      	//in 3-Party transactions. Please check with your Payment Provider for the correct value to use. 
      	//In a 2-Party transaction the default value of 'en' is used.   
      	sFormData += AddFormControl("vpc_Local", Language, Vrai)
      	
      	// Email
      	sFormData += AddFormControl("user_email", sEmailAddress, Vrai)
      
      
      //	//Automatic validation (0) or manual validation (1), otherwise store config
      //	//bufFormData += AddFormControl("vads_validation_mode","0",True)
      //	
      //	// Return URL in case of cancelation
      //	sFormData += AddFormControl("vpc_url_cancel", 	PaybackURL(URL_CANCEL) 	+ ["&"] + "reference=" + OrderNumber + "&amount=" + IntegerPart(cyAmount * 100), True)
      //	// Return URL in case of error                                                                                                                                        
      //	sFormData += AddFormControl("vpc_url_error", 	PaybackURL(URL_REFUSED) + ["&"] + "reference=" + OrderNumber + "&amount=" + IntegerPart(cyAmount * 100), True)
      //	// Return URL in case of authorization refusal                                                                                                                         
      //	sFormData += AddFormControl("vpc_url_referral", 	PaybackURL(URL_REFUSED) + ["&"] + "reference=" + OrderNumber + "&amount=" + IntegerPart(cyAmount * 100), True)
      //	// Return URL in case of refusal (other than authorization)                                                                                                               
      //	sFormData += AddFormControl("vpc_url_refused", 	PaybackURL(URL_REFUSED) + ["&"] + "reference=" + OrderNumber + "&amount=" + IntegerPart(cyAmount * 100), True)
      //	// Return URL in case of payment OK                                                                                                                                  
      //	sFormData += AddFormControl("vpc_url_success", 	PaybackURL(URL_OK) 	+ ["&"] + "reference=" + OrderNumber + "&amount=" + IntegerPart(cyAmount * 100), True)
      	
      	// Return URL                                                                                                                                                   
      	//URL supplied by the merchant in a 3-Party transaction. It is used by the Payment Server to 
      	//redirect the cardholder's browser back to the merchant's website. The Payment Server sends 
      	//the encrypted Digital Receipt with this URL for decryption. 
      	//It must be a fully qualified URL starting with HTTP:// or HTTPS:// and if typed into a browser 
      	//with Internet access, would take the browser to that web page. 
      	//	It is recommended that the browser is returned to an SSL secured page. This will prevent the 
      	//	browser pop-up indicating that the cardholder is being returned to an unsecure site. If the 
      	//	cardholder clicks 'No' to continue, then neither the merchant nor the cardholder will obtain 
      	//	any receipt details. 
      
      	//sFormData += AddFormControl("vpc_ReturnURL", 	PaybackURL(URL_RETURN) 	+ ["&"] + "reference=" + OrderNumber + "&amount=" + IntegerPart(cyAmount * 100), True)
      	//sFormData += AddFormControl("vpc_ReturnURL", 	URLEncodeEx(PaybackURL(URL_RETURN)) , True)
      	sFormData += AddFormControl("vpc_ReturnURL", 	PaybackURL(URL_RETURN) , Vrai)
      	
      	//Specifies whether the authorisation response data must be included in the Transaction 
      	//Response. 
      	//Valid values for this field are: 
      	//Y - indicates that the authorisation response data may be included in the Transaction 
      	//Response, depending on the card type and acquirer used. 
      	//N - indicates that the authorisation response data must not be included in the Transaction 
      	//Response. This is the default value. 
      	sFormData += AddFormControl("vpc_ReturnAuthResponseData", "Y", Vrai) //Y 
      //		
      	// Custom data
      	POUR TOUT sValue,sControlName DE m_aaParamDelPaymentForm
      		SI TableauCherche(m_arrFormParameters, tcLin√©aire, "Name", sControlName) <= 0 ALORS
      			sFormData += AddFormControl(sControlName, sValue, vrai, *, *, vrai)
      		fin
      	FIN
      	
      	
      	// Signature: all controls whose name starts with ¬´ mos_ ¬ª or ¬´ user_ ¬ª (except for mos_SecureHash and mos_SecureHashType), sorted in alphabetical order
      	// - parameter name and parameter value joined by "="
      	// - different values joined by "&"
      	sSignature 			est une chaine ansi
      	stParameter 			est un FormParameter
      	
      	Trie(m_arrFormParameters, ttMembre, "Name")	
      	pour TOUT stParameter DE m_arrFormParameters
      		si Cha√ÆneCommencePar(stParameter.Name, ["vpc_","user_"], ccSansCasse) ALORS
      			sSignature += ["&"] + stParameter.Name+"="+stParameter.Value
      		FIN
      	FIN
      
      //Example of PDF 
      //	sSignature="user_SessionId=567890&vpc_AccessCode=75A6GH9&vpc_Amount=1000&vpc_CardExp=1305&vpc_CardNum=345678901234564&vpc_Command=pay&vpc_MerchTxnRef=txn1&vpc_Merchant=TNSITESTMERCHANT&vpc_Version=1"
      //	Cl√©MAC ="BB48A64077A1CBF08FF0D91C5A9FE42B"
      	//HMAC SHA256 encoding
      	sMACCode=EncodeMAC(sSignature,vrai,AlgorithmHash)
      	
      	// Add the security hash
      	//A secure hash which allows the Virtual Payment Client to authenticate the merchant and check 
      	//the integrity of the Transaction Request. Secure hash provides better security to merchants 
      	//than Access Code. 
      	sFormData += AddFormControl("vpc_SecureHash", sMACCode, Vrai) //3812B7C7D21726AAC9633E1D42BD43A73A329F8906C248EFAF9CEC354F8B0C08  
      	//The type of hash algorithm used to generate the secure hash of the Transaction Request and 
      	//the Transaction Response.  
      	//It is strongly recommended that you generate your secure hash using SHA256 HMAC, in which 
      	//case vpc_SecureHashType=SHA256 
      	
      	// Complete
      	sForm = Cha√ÆneConstruit(sForm, ConvertTextToTML(TransitionText), m_sProviderURL, sFormData)
      	
      	// Displays the data
      	Cha√ÆneAffiche(sForm, typeMimeHTML)	
      
      RENVOYER Vrai
      
      CAS EXCEPTION:
      	XERROR("WL_EXCEPTION [DataCashMastercardPayment]: " + ExceptionInfo)
      	RENVOYER Faux
     type : 458752
   -
     name : OnReturnDataCashMastercardPayment
     internal_properties : CAAAAAgAAADqu2UrObSJZ/jCK6aJmnORKLOShwtRo/sIOh9IM4bRKJe9Gdw70AS7rXG65zJjHJbgucYEQ4HzRM6EO5cWR5LWgzQ+4wdQr5H9/lgxuP0hiBdff8wDHA9US8UtoqhpomQpcNRcXuCi/yIROVYmAJicf3iA5TR9ATGBtzwYwNx2clnLOxl5i1sIGTka9T78Zj/sBaqTNC42SGcl+OeTLRVBVQAhF52791juAxXCmpjd62g9aCo6/wPaFWdqN4fFC4mfFVPoeXuYMKG1dfgnHkZ8NSO+mBJbBn/9BCzJol9l3jF1nfQGDAqE8WrEGdNYhAW7wrvnOTf2GNiUUD7gVJelryBJsyZyMaOQWF+RWy41jUELdcob4jw1fyebMBR1FqxcMW0rXsFO2ZoL6y/aM3dMSz+2LkltyPDX83blbUwPwCxcixB+tYBvcupKTu2LDeLz0eidYNEa/Q4ZzTE7XQOK5E+P/dp8B+muDx4zxW/ETfaGGhZip9+SHnlFFYbPYP4gy54zSUfLWg==
     procedure_id : 2220122836611807531
     type_code : 12
     group : 3
     code : |1-
      // Summary: Manage the Mastercard return
      // Syntax:
      //[ <Result> = ] OnDataCashMastercardPaymentReturn (<sAction> is string, <nMode> is int, <sInformation> is string)
      //
      // Parameters:
      //	sAction (ANSI string): value among	URL_S2S, URL_CANCEL, URL_REFUSED, URL_OK
      //	nMode (integer): (output) Error mode
      //	sInformation (ANSI string): (output) Information about the return
      // Return value:
      // 	boolean:             True if the return was managed
      //
      //	sAction (ANSI string): value among	URL_S2S, URL_CANCEL, URL_REFUSED, URL_OK
      Proc√©dure OnReturnDataCashMastercardPayment(sAction est une chaine,nMode est un entier, sInformation est une chaine)
      
      	// Reset errors
      	XERROR()
      
      	//S2S return?
      	SI sAction = URL_S2S ALORS
      		// Check the issuer IP
      		SI PAS BankServerCheckAddress(nMode, sInformation)	 ALORS
      			RENVOYER Faux
      		FIN
      	FIN
      
      	////checks the signature
      	
      	// Regenerates the list of parameters received
      	nParameterSubscript 	est un entier
      	AParameterInString est une chaine
      	stAParameter 		est un FormParameter
      	
      	TableauSupprimeTout(m_arrFormParameters)
      	
      	nParameterSubscript=1
      	boucle
      		AParameterInString = PageParam√®tre(nParameterSubscript)
      		si AParameterInString ~= "" alors sortir
      		
      		stAParameter.Name = ExtraitCha√Æne(AParameterInString, 1, "=")
      		stAParameter.Value = AParameterInString[[taille(stAParameter.Name) + 2 a]]
      		
      		TableauAjoute(m_arrFormParameters, stAParameter)
      		
      		nParameterSubscript++
      	FIN
      	
      	// Signature: all controls whose name starts with ¬´ mos_ ¬ª or ¬´ user_ ¬ª (except for mos_SecureHash and mos_SecureHashType), sorted in alphabetical order
      	// - parameter name and parameter value joined by "="
      	// - different values joined by "&"
      	// Sort the parameters
      	Trie(m_arrFormParameters, ttMembre, "Name")	
      	//build the parameters used for the signature
      	sSignature 				est une chaine
      	sNameSignatureParameter 	est une chaine	
      	POUR TOUT stAParameter DE m_arrFormParameters
      		SI Cha√ÆneCommencePar(stAParameter.Name, ["vpc_","user_"], ccSansCasse) _et_ pas stAParameter.Name dans ("vpc_SecureHash","vpc_SecureHashType") ALORS
      			sSignature += ["&"] + stAParameter.Name+"="+stAParameter.Value						
      		FIN		
      	FIN
      	sMACCode est une chaine	
      	sMACCode=EncodeMAC(sSignature,Vrai,AlgorithmHash)
      
      	// Does it correspond?
      	si Majuscule(PageParam√®tre("vpc_SecureHash")) <> majuscule(sMACCode) ALORS
      		nMode = PAYMENT_FORGED
      		sInformation = "Signature not found or not recognized" + rc + "Signature data: " + sSignature + rc + ...
      						"Parameters: " + sNameSignatureParameter + rc + "Calculated signature: " + sMACCode + rc + "Signature received: " + PageParam√®tre("vpc_SecureHash")
      		XERROR(sInformation)
      		RENVOYER faux
      	FIN
      
      //PageParameter("vpc_AcqResponseCode")
      //PageParameter("vpc_RiskOverallResult")
      //PageParameter("vpc_Message")
      	
      	selon PageParam√®tre("vpc_TxnResponseCode")
      		CAS "0"
      			nMode = PAYMENT_VALID
      			sInformation = ""
      			XTRACE("Payment accepted")
      		CAS "C"	
      			nMode = PAYMENT_CANCELED
      			sInformation	 = "Payment canceled"
      			XTRACE(sInformation)
      					
      		AUTRE CAS
      			nMode = PAYMENT_REFUSED			
      			XTRACE("Payment refused")
      			SELON PageParam√®tre("vpc_TxnResponseCode")
      				case "?" 	: sInformation = "Transaction status is unknown"				
      				case "1" 	: sInformation = "Transaction Declined"
      				case "2" 	: sInformation = "Bank Declined Transaction"
      				case "3" 	: sInformation = "No Reply from Bank"
      				case "4" 	: sInformation = "Expired Card"
      				case "5" 	: sInformation = "Insufficient funds"
      				case "6" 	: sInformation = "Error Communicating with Bank"
      				case "7" 	: sInformation = "Payment Server detected an error"
      				case "8" 	: sInformation = "Transaction Type Not Supported"
      				case "9" 	: sInformation = "Bank declined transaction (Do not contact Bank)"
      				case "A" 	: sInformation = "Transaction Aborted"
      				case "B" 	: sInformation = "Fraud Risk Blocked"
      				case "C" 	: sInformation = "Transaction Cancelled"
      				case "D" 	: sInformation = "Deferred transaction has been received and is awaiting processing"
      				case "E" 	: sInformation = "Transaction Declined - Refer to card issuer"
      				case "F" 	: sInformation = "3D Secure Authentication failed"
      				case "I" 	: sInformation = "Card Security Code verification failed"
      				case "L" 	: sInformation = "Shopping Transaction Locked (Please try the transaction again later)"
      				case "M" 	: sInformation = "Transaction Submitted (No response from acquirer)"
      				case "N" 	: sInformation = "Cardholder is not enrolled in Authentication scheme"
      				case "P" 	: sInformation = "Transaction has been received by the Payment Adaptor and is being processed"
      				case "R" 	: sInformation = "Transaction was not processed - Reached limit of retry attempts allowed"
      				case "S" 	: sInformation = "Duplicate SessionID (Amex Only)"
      				case "T" 	: sInformation = "Address Verification Failed"
      				case "U" 	: sInformation = "Card Security Code Failed"
      				case "V" 	: sInformation = "Address Verification and Card Security Code Failed"
      				AUTRE CAS	: sInformation	= "Payment refused:  "+ PageParam√®tre("vpc_TxnResponseCode") + RC + PageParam√®tre("vpc_Message")
      			FIN
      			XTRACE(sInformation)
      	FIN
      
      renvoyer vrai
     type : 458752
   -
     name : URLChange
     procedure_id : 2220122836611873067
     type_code : 12
     code : |1+
      // Summary: Changes the supplier URL 
      // Syntax 
      // ConfigureURL ()
      //
      // Parameters:
      //	nSupplier: Supplier constant
      //	sNewURL: Production URL
      //	sNewTestURL: Test URL
      // Return value:
      // 	None
      //
      // Example:
      // 	URLChange(PayPal,"https://api-3t.paypal.com/nvp","https://api-3t.sandbox.paypal.com/nvp")
      //
      PROCEDURE URLChange(nSupplier,sNewURL,sNewTestURL,sNewSimulationURL="")
      
      SI sNewURL<>"" 			ALORS m_aaURL_Suppliers[nSupplier] 		=	sNewURL
      si sNewTestURL<>"" 		alors m_aaURL_Test_Suppliers[nSupplier] =	sNewTestURL
      si sNewSimulationURL<>"" alors m_aaURL_Simu_Suppliers[nSupplier]	= sNewSimulationURL
      
      BuildProviderURL()
     type : 458752
   -
     name : URLGet
     procedure_id : 2220122836611938603
     type_code : 12
     code : |1+
      // Summary: Retrieves the supplier URLs 
      // Syntax 
      // ConfigureURL ()
      //
      // Parameters:
      //	nSupplier: Supplier constant
      // Return value:
      // 	multi-value: // 	None
      //
      // Example:
      // 	(sProUrl,sTestUrl) = URLChange(PayPal)
      // // renvoie : "https://api-3t.paypal.com/nvp","https://api-3t.sandbox.paypal.com/nvp"
      //	sNewURL: Production URL
      //	sNewTestURL: Test URL
      PROCEDURE URLGet(nSupplier)
      
      renvoyer (m_aaURL_Suppliers[nSupplier],m_aaURL_Test_Suppliers[nSupplier])
      
      
      
     type : 458752
   -
     name : LogInfo
     procedure_id : 2220122836612004139
     type_code : 12
     code : |1+
      // Summary: Returns the transaction log
      // Syntax:
      //[ <Result> = ] LogInfo ([<nTransactionID>])
      //
      // Parameters:
      //	nTransactionID: Identifier of transaction whose log information is requested, by default last transaction whose payment was started
      // Return value:
      // 	ANSI string: // 	None
      //
      
      PROCEDURE LogInfo(nTransactionID = m_nTransactionID) : chaine
      sLogInfo est une chaine
      
      
      si pas HLitRecherchePremier(Transaction,TransactionID,nTransactionID) ALORS
      	ErreurD√©clenche(1,"No transaction found with number <"+nTransactionID+">")
      sinon
      	sLogInfo=Transaction.Loginfo
      FIN
      
      renvoyer sLogInfo
     type : 458752
   -
     name : DatatransPayment_FromBank
     internal_properties : CAAAAAgAAACYTpBNgajoJXq3/yJfNOG0aW0ESvW5MFFH4bhbgn4oGMSX+ekvNzUnyaDoGc74S/t6UoSicqJAhURCfnbirJVZS6Y7wfIZ/uBc3q8/KbjBouIpemBTcf/OCNJZIdyHMOXP5MwMF2xWxk/zSYPXTdq77j7ul+teg6+WzZGJrZ8b+asz76X1YsoNKH93TyctgkODruV/pAy9fEmWEJJfqSN6cH8itv9M9BAo23d3i00A1YMUrlC2oOXXydU1EY6KwGorvDQLm2/TWy33zJzAw+qQE4NCDgucS1yXl3WzwHykLN1JtPZkN/6uRW7hfkaPrloohq+nxs9Bc48TPa68QTyKG035CnJnCyrW73uoemqqg9kUzQIlYvSathSDEFsseeugoRMAqJKkFDnOVi2eM4TzQOIp2IUXWN7DXZjFljbxQ9tbqqs5JoHF6H2BhPLJ5Evvrhd965nzpMQccIHk09YPBLwwrsWSwRqR7Ytn52ovUr2pPKc3y5fYmPc88X5kVGw7xn7R63D7T88Er0SbaCn8zc+cf6hNmRM4+hhk4mIIWMA8jgiemOnp4dp+J/OOsB3GgaUCVpmNbPSTwUBZOKqP1I4VlbIdWm8qrJ1/lyqG7lJmnVz8LCPDb+rA+zZjcBc0eSikWDjwmq5ztzUHeX5NFNm3Uaf8uMpz6LSG8pkhyyeyyMNIpFRPTdFi/7kSFL+n0awZ4dCSc2WuA40I/J/0IMPlnkamLH1368dpAgEN30Ir0zPDv7tbIg5iQaOflFS5C+gITbl0hM3iPZwRsuMsg3yNIHmpFY6JIZ2X8UXARQIs/+S/FT4+oiME49Fw/1KHZokUEl8ZG2dY3645aKxq3SYRDWeb6BuXuysspCFsTwM5Qvyy2Ciz+ox/NFRD+7R31sgBhxURDcbBwhFC3qDH5diI6GeIs9S2hMxBNryJkzj92zyMJuFrpL9lPN0FmU2bqO7667sjSr8ZM5rKxN7PsWhJjMNbAAflWz++f0jT3tD9ggQagHREZyu0n5QAi8/hpHKprJQF06Jkxzeojk7PFOUWm60F4orEQuZ5+Uc1HoyVo//ZnguAMKMODG9W5+cKxq8+SxLxA56+fJkKfca2JjGa/JNa9NKqdMQ2ADNQCT2AYzlkhdbd4IRJh+z74tqOthheNGl/r2M5LTIvGLBH36Pj6U6BIQyO3tsbDYkykNUTFRCPJ/Si4ZIsSBALn0LoeikMKkDwJk9RubNshe5R3/z8w+BjXX2SsyIW7i+unJNzbUu9WowApJBZq/5GCHxavXy1r7xUKHLfDZHTsyeX2hk4usY4eN9X9tO9MSOeCzzv8+xcWoVn1jcnVyP/VsV/u0G7NW0SS14qzSf4Gx/8KrSJPLyKh/u4h3cTPr27mXcPmzW4HGGA
     procedure_id : 2220122836612069675
     type_code : 12
     group : 3
     code : |1-
      // Summary: Asks to perform the payment via the Datatrans platform
      // Syntax:
      //[ <Result> = ] DatatransPayment_FromBank (<cyAmount> is currency, <sEmailAddress> is string)
      //
      // Parameters:
      //	cyAmount (currency): Amount of payment to perform
      //	sEmailAddress (ANSI string): Email address of the customer
      // Return value:
      // 	boolean:        True if the payment call was performed, False otherwise
      //
      // Automatic process of exceptions:   run CASE EXCEPTION:
      //
      
      PROCEDURE privee DatatransPayment_FromBank(LOCAL cyAmount est un mon√©taire, local sEmailAddress est une chaine)
      
      	// Reset errors
      	XERROR()
      	
      	sForm 			est une chaine ansi
      	sFormData	est une chaine ansi
      	
      	TableauSupprimeTout(m_arrFormParameters)
      	
      	// Describes the sending form
      	sForm = chaineconstruit(HTML_FORM, "%2", "PaymentRequest", "%3", "%1")
      	
      
      //		merchantId 			N10 Unique Merchant Identifier (assigned by Datatrans)
      //		amount 				Transaction amount in cents or smallest available unit of the currency
      //		currency 			A3 Transaction currency ‚Äì ISO Character Code (CHF, USD, EUR etc.)
      //		refno 				AN18 Merchant reference number; note: unique value for PayPal; can be defined as
      //							unique value for all other payment methods, too. Please refer to support@datatrans.ch for details.
      //		sign 				This parameter may be used according to the merchant‚Äôs security level settings.
      //							For details please refer to the chapter ‚ÄúSecurity Option‚Äù.
      // ---- Other mandatory parameters
      //		successUrl 			This parameter represents the URL of the merchant‚Äôs shop application,
      //							where the consumer should be redirected to after a	successful transaction
      //		errorUrl 			This parameter represents the URL of the merchant‚Äôs shop application,
      //							where the consumer should be redirected to after a failed transaction
      //		cancelUrl 			This parameter represents the URL of the merchant‚Äôs shop application,
      //							where the consumer should be redirected to after cancelling the payment dialog
      // --- Mandatory parameters for HiddenMode
      //		paymentmethod 		A3 Payment method code; please refer to chapter 2.7.2 for detailed listing;
      //							this parameter is optional for Standard Mode
      //		cardno or aliasCC 	AN20 Credit card number or alias for credit card number.
      //							Optionally used for PostFinance Alias or for PayPal Reference Transactions
      //							Note: If you submit the cardno parameter directly, you qualify for SAQ-AEP
      //		expm 				MM Expiry month of the card
      //		expy 				YY Expiry year of the card
      //							hiddenMode Validates required parameters for hidden mode; sends process to error
      //							page if validation fails; value: ‚Äúyes‚Äù
      //		cvv 				N4 CVV code (mandatory for initial transactions)
      // ------ Optional parameters
      //		useAlias 						Requests the CC alias, this option needs to be activated by Datatrans; value: ‚Äúyes‚Äù
      //		language 						A2 This parameter specifies the language (language code) in which the payment page should be presented to the cardholder.
      //										The following ISO-639 2 character language codes are supported:
      //										- de (German)
      //										- en (English)
      //										- fr (French)
      //										- it (Italian)
      //										- es (Spanish)
      //										- el (Greek)
      //										- no (Norwegian)
      //										- da (Danish)
      //										- pl (Polish)
      //										- pt (Portuguese)
      //		Post URL 						This parameter can‚Äôt be passed with the HTTPS Post message; it has to be configured in the Web Administration Tool under ‚ÄúUPP Adminiatration‚Äù.
      //										For further details please refer to chapter ‚ÄúPost URL Feedback‚Äù.
      //		reqtype 						The request type specifies whether the transaction has to be immediately
      //										settled or authorized only. There are two request types available:
      //										‚ÄúNOA‚Äù authorization only
      //										‚ÄúCAA‚Äù authorization with immediate settlement in case of successful
      //										authorization; if ‚Äúreqtype‚Äù is not submitted the transaction is processed
      //										according to the setting in the Web Admin Tool (section ‚ÄúUPP
      //										Administration‚Äù).
      //		uppWebResponseMethod 			‚ÄúGET‚Äù if the response is wished to be received as a GET. ‚ÄúPOST‚Äù if the
      //										response is wished to be received as a POST.
      //										Default for ‚Äú.htm‚Äù URLs is ‚ÄúGET‚Äù, for all other endings ‚ÄúPOST‚Äù.
      //		Merchant Specific Parameters 	The merchant can invent and submit any number of own parameters.
      //										These parameters are returned to the Success-, Error- and Post URL.
      //										Restrictions:
      //										- The maximum length is limited to 300 characters
      //										- Line brakes are not allowed
      //		customTheme 					AN50 Style Sheet used for inline mode, please contact Datatrans for further information.
      //		mfaReference 					N10 For payment method ‚ÄúMFA‚Äù only (see also chapter 4.5)
      //		uppReturnMaskedCC 				‚Äúyes‚Äù ‚Äì requests the return of the masked credit card number to the merchant in field ‚ÄúmaskedCC‚Äù. See chapter 2.9.1.
      //		refno2 							AN27 For ELV; lines 3 to 4 on the customer invoice
      //										For sofort√ºberweisung; will be forwarded to reason_2 (visible on
      //										customer invoice), if this value is empty, we will forward the ‚Äúrefno‚Äù
      //										and use ‚ÄúShop reference‚Äù as reason_1
      //		Refno3 							AN27 For ELV only; lines 3 to 4 on the customer invoice
      //		virtualCardno 					N19 For MFG only, refer to chapter MFGroup
      //		uppStartTarget 					‚Äú_top‚Äù if return URLs should be opened full screen.
      //		uppReturnTarget 				‚Äú_top‚Äù if return URLs should be opened full screen when payment returns from a 3rd party (for example 3D).
      //		uppTermsLink 					An external link to the merchant‚Äôs terms and conditions. Will be displayed
      //										above the payment button with the text:
      //										‚ÄúWith your payment you accept our terms and conditions.‚Äù
      //		uppRememberMe 					Wheter to show a ‚ÄúRemember payment credentials‚Äù checkbox on the
      //										payment page or not.
      //										‚Äúyes‚Äù ‚Äì Same behaviour as ‚ÄúuseAlias‚Äù
      //										‚Äúchecked‚Äù ‚Äì Same behaviour as ‚ÄúuseAlias‚Äù but checkbox is prechecked
      //		uppDiscountAmount 				N Discount amount in cents or smallest available unit of the currency,use positive value
      //		mode 							‚ÄúforceRedirect‚Äù ‚Äì This parameter is needed when displaying the redirect
      //										mode inside an iframe. It makes sure that no (X) button on the
      //										top right of the payment page is getting displayed. Additionally a
      //										click on the back button will redirect to the merchants cancel url.
      //		uppStatus3D Input value ‚Äúreturn‚Äù will be replaced in output with real 3D status
      //										Y = 3D full authentication
      //										D = 3D merchant only
      //										A = 3D activation during shopping
      //										U = 3D no liability shift
      //										N = 3D authentication failed
      //										C = 3D authentication uncomplete
      //										N/A = TRX not 3D
      //										uppStatus3D is available in XML Status response from version 5 also
      // ----------------Customer address details
      //		uppCustomerDetails 				* Pilot parameter, to be submitted with value:
      //										‚Äúyes‚Äù - if address details are submitted and if the data should be
      //										stored in the Web Admin Tool, or
      //										‚Äúreturn‚Äù (only available for PayPal Express Checkout) ‚Äì if address
      //										details should be returned from PayPal to the merchant.
      //		uppCustomerTitle 				AN30 Title of customer
      //		uppCustomerName 				AN100 Name of customer
      //		uppCustomerFirstName 			AN100 * First name of customer
      //		uppCustomerLastName 			AN100 * Last name of customer
      //		uppCustomerStreet 				AN100 * Street address
      //		uppCustomerStreet2 				AN100 Second street address
      //		uppCustomerCity 				AN100 * City
      //		uppCustomerCountry 				A3 * ISO country code (alpha)
      //		uppCustomerZipCode 				AN10 * Postal code
      //		uppCustomerState 				AN100 * State
      //		uppCustomerPhone 				AN40 Phone number
      //		uppCustomerFax 					AN40 Fax number
      //		uppCustomerEmail 				AN100 E-mail address
      //		uppCustomerGender 				A6 Gender of customer; values: ‚Äúmale‚Äù / ‚Äúfemale‚Äù
      //		uppCustomerBirthDate 			Date Customer date of birth; format: ‚Äúdd.mm.yyyy‚Äù or ‚Äúyyyy-mm-dd‚Äù
      //		uppCustomerLanguage 			A2 Language of customer; values: en, de, fr, it
      //---2.7.2 Available for "paymentmethod"
      //		VIS 							VISA
      //		ECA 							MasterCard
      //		AMX 							American Express
      //		BPY 							Billpay Specification to be found here: Billlpay Samples
      //		CUP 							China Union Pay Refer to chapter 4.21
      //		DIN 							Diners Club
      //		DIS 							Discover
      //		DEA 							*iDeal No special characters are allowed in the refno
      //		DIB 							SOFORT √úberweisung credits are not possible, unless you have a bank account at sofortbank
      //		DII 							iDEAL via SOFORT √úberweisung only in Standard Mode available
      //		DNK 							Dankort
      //		DVI 							Deltavista Refer to chapter 4.4
      //		ELV 							SEPA Direct Debit / ELV Lastschrift
      //		ESY 							* Swisscom Easypay Refer to chapter 4.12
      //		JCB 							JCB
      //		JEL 							Jelmoli Bonus Card
      //		MAU 							Maestro
      //		MDP 							Migros Bank Payment Refer to chapter 4.11
      //		MFA 							MFGroup Check Out (Credit Check) Refer to chapter 4.6
      //		MFG 							MFGroup Financial Request (authorization) Refer to chapter 4.6
      //		MFX 							MFGroup Easy integration Refer to chapter 4.6
      //		MMS 							Mediamarkt Shopping Card
      //		MNB 							* Moneybookers only with reqtype CAA
      //		MYO 							Manor MyOne Card
      //		PAP 							* PayPal Refer to chapter 4.6
      //		PEF 							* Swiss PostFinance ‚Äì PostFinance E-Finance
      //		PFC 							* Swiss PostFinance ‚Äì PostFinance Card
      //		PSC 							* Paysafecard
      //		PYL 							Payolution Installments Refer to chapter 4.9
      //		PYO 							Payolution Invoice Refer to chapter 4.9
      //		REK 							Reka Card
      //		SWB 							SwissBilling Refer to chapter 4.13
      //		TWI 							* TWINT Wallet Refer to chapter 4.14
      //		MPW 							* MasterPass Wallet Refer to chapter 4.15
      //		ACC 							* Accarda Kauf-auf Rechnung Refer to chapter 4.16
      //		INT 							* Byjuno Refer to chapter 4.17
      //		PPA 							* LoyLogic Pointspay Refer to chapter 4.18
      //		GPA 							* Girosolution Giropay Refer to chapter 4.19
      //		GEP 							* Girosolution EPS Refer to chapter 4.20
      //		BON 							Boncard
      
      
      // --------------- Personalization of the payment page, using the "themeConfiguration" parameter
      //		brandColor						The color of your brand. Values: <string (hex notation of a color)> | <null>
      //		logotype 						The header logo's display style.Values: 'circle' | 'rectangle' | 'none'
      //		textColor 						The color of the text in the header bar if no logo is given. Values: 'white' | 'black'
      //		logoBorderColor					Decides whether the logo shall be styled with a border around it, if the value is true the default
      //		background 						color is chosen, else the provided string is used as color value. Values: <boolean> | <string (hex notation of a color)>
      //		logoSrc							An SVG image (scalability) provided by the merchant. The image needs to be uploaded by using the Datatrans Web Administration Tool.
      //		brandButton						If true, the pay button will have the same color as specified for brandColor. Otherweise the provided
      //										string is used as a coor value. Values: <boolean> | <string (hex notation of a color)>
      //										If set to false the hex color #01669F will be used as a default.
      //		payButtonTextColor				The color of the pay button text. Values: 'white' | 'black'
      //		initialView						Wheter the payment page shows the payment method selection as list (default) or as a grid.
      //										Values: 'list' | 'grid'
      //				
      
      	////// Merchant data
      
      //		merchantId 			N10 Unique Merchant Identifier (assigned by Datatrans)
      //		amount 				Transaction amount in cents or smallest available unit of the currency
      //		currency 			A3 Transaction currency ‚Äì ISO Character Code (CHF, USD, EUR etc.)
      //		refno 				AN18 Merchant reference number; note: unique value for PayPal; can be defined as
      //							unique value for all other payment methods, too. Please refer to support@datatrans.ch for details.
      //		sign 				This parameter may be used according to the merchant‚Äôs security level settings.
      //							For details please refer to the chapter ‚ÄúSecurity Option‚Äù.
      	
      	sFormData += AddFormControl("merchantId", SiteIdentifier, vrai)	
      	sFormData += AddFormControl("amount", PartieEnti√®re(cyAmount * 100), vrai)	
      	// Currency
      	sFormData += AddFormControl("currency", CurrencyToString(), Vrai)
      	// Identifier of the order
      	sFormData += AddFormControl("refno", OrderNumber, Vrai)
      	
      	//Identifiant transaction et fournisseur (informations du composant hors informations sp√©cifiques de Datatrans)
      	sFormData += AddFormControl("secid", m_sTransactionIdentifier, Vrai)
      	sFormData += AddFormControl("fpay", Supplier, Vrai)
      
      //		language 						A2 This parameter specifies the language (language code) in which the payment page should be presented to the cardholder.
      //										The following ISO-639 2 character language codes are supported:
      //										- de (German)
      //										- en (English)
      //										- fr (French)
      //										- it (Italian)
      //										- es (Spanish)
      //										- el (Greek)
      //										- no (Norwegian)
      //										- da (Danish)
      //										- pl (Polish)
      //										- pt (Portuguese)
      	sFormData += AddFormControl("language", Minuscule(Language), Vrai)
      	
      	////// Customer data
      	// Email
      	sFormData += AddFormControl("uppCustomerEmail", sEmailAddress, Vrai)
      	
      	
      	
      	// Return URL in case of cancelation
      	sFormData += AddFormControl("cancelUrl", 	PaybackURL(URL_CANCEL) 	+ ["&"] + "reference=" + OrderNumber + "&amount=" + PartieEnti√®re(cyAmount * 100), Vrai)
      	// Return URL in case of error                                                                                                                                        
      	sFormData += AddFormControl("errorUrl", 	PaybackURL(URL_REFUSED) + ["&"] + "reference=" + OrderNumber + "&amount=" + PartieEnti√®re(cyAmount * 100), Vrai)
      	// Return URL in case of payment OK                                                                                                                                  
      	sFormData += AddFormControl("successUrl",	PaybackURL(URL_OK) 		+ ["&"] + "reference=" + OrderNumber + "&amount=" + PartieEnti√®re(cyAmount * 100), Vrai)
      		
      	// Custom data
      	//if storage not specified, et to true to get the email in the transactions
      	SI m_aaParamDelPaymentForm["uppCustomerDetails"]..vide ALORS 	
      		m_aaParamDelPaymentForm["uppCustomerDetails"] = "yes"
      	FIN
      	POUR TOUT sValue,sControlName DE m_aaParamDelPaymentForm
      		SI TableauCherche(m_arrFormParameters, tcLin√©aire, "Name", sControlName) <= 0 ALORS
      			sFormData += AddFormControl(sControlName, sValue, vrai, *, *, vrai)
      		fin
      	FIN
      	
      	// Signature: The values of MerchantID, Amount, Currency and Reference Nummer parameters (assembled) must be signed.
      	sSignature 					est une chaine ansi
      	sSignatureBuild 		est une chaine ansi
      	//sSignatureBuilt = Lower(EncodeMAC("1100016244850CHF91827364",Vrai,HA_HMAC_SHA_256)) // 	002f7a401d7820f4eb7bd6e6163df6ffd0125d232135a5fa5a1cea8c9e2f1cf1
      	sSignature = 	SiteIdentifier+ 
      					PartieEnti√®re(cyAmount * 100) +
      					CurrencyToString()+
      					OrderNumber
      	
      	sSignatureBuild = Minuscule(EncodeMAC(sSignature,Vrai,AlgorithmHash,Sign))
      	// Adds the signature
      	sFormData += AddFormControl("sign", sSignatureBuild, vrai)
      	
      	// Complete
      	sForm = Cha√ÆneConstruit(sForm, ConvertTextToTML(TransitionText), m_sProviderURL, sFormData)
      	
      	// Displays the data
      	Cha√ÆneAffiche(sForm, typeMimeHTML)	
      
      RENVOYER Vrai
      
      CAS EXCEPTION:
      	XERROR("WL_EXCEPTION [DatatransPayment]: " + ExceptionInfo)
      	RENVOYER Faux
     type : 458752
   -
     name : OnReturnDatatransPayment
     internal_properties : CAAAAAgAAAAHjJZnu5Net9t+9HZDRYn3/YyFZIIoIDLRxpARRY6IJUDtsyA9w8o1qV4QUmTkUOIfcLIjtTanVurCxwZzHXGWbZ6QxsrngUtrFy8rsMhleQdNYM0We/T7JheUcdJfDgGYVufapVTU+8WY9XZUEnuPrVStJclJEgC6kr03q8xcQmjLOEU0er+TvnyqbMYH9kQZEP5aO18LhorAqgZEUTtmPSQBdp3s55Zo/WYGF0LOh0yjbvIu2saG0VHk0hC7X0xp0lAn3phkB5yIyJLzokQt0f0WgagrjA==
     procedure_id : 2220122836612135211
     type_code : 12
     group : 3
     code : |1-
      // Summary: Manage the Lyra return
      // Syntax:
      //[ <Result> = ] OnDatatransPaymentReturn (<nMode> is int, <sInformation> is string, <sAction> is string)
      //
      // Parameters:
      //	nMode (integer): (output) Error mode
      //	sInformation (ANSI string): (output) Information about the return
      //	sAction (ANSI string): value among	URL_S2S, URL_CANCEL, URL_REFUSED, URL_OK
      // Return value:
      // 	boolean:             True if the return was managed
      //
      Proc√©dure OnReturnDatatransPayment(nMode est un entier, sInformation est une chaine, sAction est une chaine)
      
      	// Reset errors
      	XERROR()
      
      	//S2S return?
      	SI sAction = URL_S2S ALORS
      		// Check the issuer IP
      		SI PAS BankServerCheckAddress(nMode, sInformation)	 ALORS
      			RENVOYER Faux
      		FIN
      	FIN
      
      	////checks the signature
      	RetrieveParametersReceived()
      	
      	
      	
      	selon PageParam√®tre("status")
      		CAS "success"
      			
      			//build the parameters used for the signature
      			sSignature2 				est une chaine
      			sSignature2Build		est une chaine
      			//sign2=merchantId+amount+currency+uppTransactionId 					
      			sSignature2 = 	SiteIdentifier+ 
      			PartieEnti√®re(m_cyAmount * 100) +
      			CurrencyToString()+
      			PageParam√®tre("uppTransactionId")
      			
      			sSignature2Build = Minuscule(EncodeMAC(sSignature2,Vrai,AlgorithmHash,Sign2))			
      			// Does it correspond?
      			SI Majuscule(PageParam√®tre("sign2")) <> Majuscule(sSignature2Build) ALORS
      				nMode = PAYMENT_FORGED
      				sInformation = "Signature not found or not recognized" + RC + "Signature data: " + sSignature2 + RC + ...
      				"Parameters: " + "sign" + RC + "Calculated signature: " + sSignature2Build + RC + "Signature received: " + PageParam√®tre("sign2")
      				XERROR(sInformation)
      				RENVOYER Faux
      			SINON
      				XTRACE("Signature successfully checked")
      			FIN
      			
      			nMode = PAYMENT_VALID
      			sInformation = ""
      			
      		CAS "error"
      			nMode = PAYMENT_REFUSED
      			sInformation	 = "Payment refused, error code "+ PageParam√®tre("acqErrorCode")+[", "]+PageParam√®tre("errorCode")+", "+PageParam√®tre("errorMessage")+", "+PageParam√®tre("errorDetail")
      								
      		cas "cancel"	
      			nMode = PAYMENT_CANCELED
      			sInformation	 = "Payment canceled"
      		AUTRE CAS
      			nMode = PAYMENT_REFUSED
      			sInformation	 = "Return with incorrect status control:  "+ PageParam√®tre("status") + rc +"error code: "+ PageParam√®tre("acqErrorCode")+[", "]+PageParam√®tre("errorCode")+", "+PageParam√®tre("errorMessage")+", "+PageParam√®tre("errorDetail")
      	FIN
      	
      XTRACE(sInformation)
      
      renvoyer vrai
     type : 458752
   -
     name : EnableTLS12
     internal_properties : CAAAAAgAAABIxBtLgl8GuNym/Dt8bNohBosXtk2VRwVRy4XhV5XBoNhpLa2VLvOc62B5twqcm8FrbbInMbg3QHhOZPl4EPr9QIWe3sh7hQV/Ef1eztQHO4kupgVX+I0/dbT9Um0vFxhdjade4EivOogv8Lnz/S7vWhwlki8OFc7F7njYwCsbZLcBFpxCrdJbZwiHa91aLsn5LoWgygQ2++3v60nuB7Uqwhs4utpWmwsM9MjRjhx7/buo0se8uEJre9w3svct93CH+yEBgCbcZyk+Jlur7A==
     procedure_id : 2220122836612200747
     type_code : 12
     code : |1-
      // Summary: Enables (if necessary) TLS 1.2 for Internet Explorer (and therefore for Wininet and the WLanguage HTTPS functions)
      // Syntax:
      //[ <Result> = ] EnableTLS12 ()
      //
      // Parameters:
      //	None
      // Return value:
      // 	boolean: // 	None
      //
      PROCEDURE PUBLIQUE EnableTLS12()
      bTLS12Active est un bool√©en = vrai
      
      
      
      <SI CibleEx√©cution=ApplicationWindows OU CibleEx√©cution=SiteWindows OU CibleEx√©cution=WebserviceWindows OU CibleEx√©cution=ServiceWindows>
      	
      	
      	nValueSecurityInternetExplorerInProgress 		est un entier
      	nValueSecurityInternetExplorerTLS12 		est un entier	= 0x800
      	//Read the secure protocols enabled for Internet Explorer (and therefore for Wininet and the WLanguage HTTPS functions)
      	nValueSecurityInternetExplorerInProgress=RegistreLit("HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Internet Settings","SecureProtocols")
      		//Is TLS 1.2 enabled?
      	si pas etbinaire(nValueSecurityInternetExplorerInProgress,nValueSecurityInternetExplorerTLS12)=nValueSecurityInternetExplorerTLS12 ALORS
      		//No
      		//Add TLS 1.2
      		nValueSecurityInternetExplorerInProgress+=nValueSecurityInternetExplorerTLS12
      		//Update
      		bTLS12Active=RegistreEcrit("HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Internet Settings","SecureProtocols",nValueSecurityInternetExplorerInProgress,RegistreTypeEntier)
      	FIN
      	
      <FIN>
      
      
      
      renvoyer bTLS12Active
     type : 458752
   -
     name : WebRequest
     internal_properties : CAAAAAgAAAABplChRuL6bU3Rn7krjec8P8/8P4hUEIHNabzhWJWpACKyDkotkY//EAgcOGtym5pUqsLLmEtTKNb3elDK/73/62CZpNxc/hC38/izj/7R5PWS7DZzGstNq6ug6SSXePpno154Jyz71y8d1mKqWW8hdHOYLi55ecB1FQQNu8FEKDl+H8RnurqJcW3/JEigbvbzEzGCA07pFTKB/NPp8bPOEHi39Klr877FEz81hF7INiGfaeV57DDxKmCTfwy0Ewo80RzA5TQJlttYTrEUhVCBddEhgVKsuoNp
     procedure_id : 2220122836612266283
     type_code : 12
     code : |1-
      // Summary: <specify the action of the procedure>
      // Syntax:
      //[ <Result> = ] WebRequest (<sHTTPURL> is string [, <sContent> [, <sFormName> [, <nMethod> [, <sContentType> [, <bWithCookie> is boolean]]]]])
      //
      // Parameters:
      //	sHTTPURL (ANSI string): <specify the role of sHTTPURL>
      //	sContent (default value=""): <specify the role of sFormName>
      //	sFormName (default value=""): <specify the role of sFormName>
      //	nMethod (default value=2): <specify the role of nMethod>
      //	sContentType (default value="application/x-www-form-urlencoded"): <specify the role of sContentType>
      // 	bWithCookie (boolean - default value=0) : <specify the role of bWithCookie>
      // Return value:
      // 	multi-value: // 	None
      //
      //Example:
      //		sRequestReturn 	is string
      //		bRequestOK 		is boolean
      //		(bRequestOK,sRequestReturn) = WebRequest(<sHTTPURL>: sReturnURL,<sContent>:sListParameters)
      //		IF bRequestOK THEN
      //			info(srRequestReturn)
      //		else			
      //			Error(srRequestReturn)
      //		END
      //
      procedure WebRequest(local sHTTPURL is string,sContent="",sFormName="",local nMethod=httpPost,local sContentType=typeMimeSimpleForm,local bWithCookie is boolean = False) : (boolean,string)
      sReturn 				is string
      bRes 					is boolean
      HTTP_Request 			is httpRequest
      HTTP_Return 				is httpResponse
      sCookies			 	is string
      sWEBDEVErr			 	is string
      
      if not InWindowsMode() then
      	HTTP_RequestMode=HTTP_NATIVE_MODE 
      end
      
      if sContent~="" _and_ sFormName~="" _and_ nMethod=httpPost then
      nMethod = httpGet
      end
      
      sUserAgent is string ="WW_SecurePayment"
      
      
      if bWithCookie _and_ not m_sCookiesSiteBeforePayment~="" then 
      	//for mode with an HTTP_Request variable (native mode)
      	HTTP_Request..Header["Cookie"]		= m_sCookiesSiteBeforePayment
      	
      	//for mode without HTTP_Request variable (Wininet mode)
      sCookies							= CR+"Cookie: "+m_sCookiesSiteBeforePayment
      	
      	
      end	
      	
      
      if HTTP_RequestMode=HTTP_NATIVE_MODE _or_ InLinuxMode() then
      	
      	// Send the command	
      HTTP_Request.URL 				= sHTTPURL
      HTTP_Request.IgnoreError		= HTTP_IgnoreError
      HTTP_Request.ConnectionTimeout	= HTTP_TimeOut
      HTTP_Request.VersionSSL 		= HTTP_VersionSSL
      HTTP_Request.Method			= nMethod
      HTTP_Request.ContentType		= sContentType
      	
      		
      	
      	
      	if sContent<>"" then HTTP_Request.Content			= sContent
      	
      	if sFormName<>"" then
      HTTP_Return= HTTPSendForm(sFormName, HTTP_Request)
      	else
      HTTP_Return= HTTPSend(HTTP_Request) 
      	end
      bRes = not ErrorOccurred
      	if bRes then
      		if HTTP_Return.StatusCode=200 then
      sWEBDEVErr=HTTP_Return.Header["WebDevError"]
      			if sWEBDEVErr<>"" then
      				//WebDevError 54 ERR_BAD_CONTEXT_INVALID
      bRes= False
      sReturn = "Error returned by the WEBDEV application server:"+sWEBDEVErr+CR+HTMLToText(HTTP_Return.Content)
      			else
      sReturn = HTTP_Return.Content
      			end
      		else
      bRes= False
      sReturn = "HTTP error "+HTTP_Return.StatusCode+CR+HTTP_Return.DescriptionStatusCode+CR+HTTP_Return.Content
      		end
      	else
      sReturn = ErrorInfo(errFullDetails)+CR+HTTP_Return.Content
      	end
      else
      
      
      <if CibleEx√©cution=ApplicationWindows or CibleEx√©cution=SiteWindows or CibleEx√©cution=WebserviceWindows or CibleEx√©cution=ServiceWindows>
      	//Wininet mode requested (and we are using Windows)
      HTTPParameter(httpParameterMode,HTTP_WININET_MODE)
      	
      <end>
      
      
      	HTTP.IgnoreError = HTTP_IgnoreError
      	nTimeOutBefore is int = HTTPTimeOut()
      	 
      HTTPTimeOut(HTTP_TimeOut)
      
      <if CibleEx√©cution=Windows>
      	
      //no automatic cookie management in WININET (to force ours)
      HTTPParameter(httpParameterDisableCookie, 1)
      	
      <end>		
      	
      	if sFormName<>"" then
      bRes= HTTPSendForm(sFormName,sHTTPURL,nMethod,sUserAgent,sCookies,sContentType) 
      	else
      		//sHeader is string=CR+"header1:value1"+CR+"header2:value2"
      bRes= HTTPRequest(sHTTPURL,sUserAgent,sCookies,sContent,sContentType) 
      		//xtrace("HTTPRequest",sHTTPURL,sUserAgent,sCookies,sContent,sContentType)
      	end
      	if bRes then
      		if not ExtractString(HTTPGetResult(httpHeader),2," ")[[1]]="2" then
      bRes=False
      sReturn = "HTTP error "+ExtractString(HTTPGetResult(httpHeader),2," ")+CR+HTTPGetResult(httpResult)
      		else
      sWEBDEVErr=ExtractString(ExtractString(HTTPGetResult(httpHeader),2,"WebDevError:"),1,CR)
      			if not sWEBDEVErr in ("",EOT) then
      bRes=False
      sReturn = "Error returned by the WEBDEV application server:"+sWEBDEVErr+CR+HTMLToText(HTTPGetResult(httpResult))
      			else
      sReturn = HTTPGetResult(httpResult)
      			end
      		end
      	else
      sReturn = ErrorInfo(errFullDetails)+CR+HTTPGetResult(httpResult)
      	end
      HTTPTimeOut(nTimeOutBefore)
      end
      if not bRes then
      	if sFormName<>"" then
      		XERROR("Failure of request to <"+sHTTPURL+"> for the form <"+sFormName+">:",sReturn)	
      	else
      		XERROR("Failure of request to <"+sHTTPURL+"> with this content <"+sContent+">:",sReturn)	
      	end
      end
      
      return (bRes,sReturn)
     type : 458752
   -
     name : NameHashType
     procedure_id : 2220122836612331819
     type_code : 12
     code : |1-
      // Summary: returns the hash type name in clear
      // Syntax:
      //[ <Result> = ] NameHashType ([<nHashTypeAlgorithm> is int [,<sSeparator> is string]])
      //
      // Parameters:
      //	nHashTypeAlgorithm (integer): <specify the role of nHashTypeAlgorithm>
      // 	sSeparator (ANSI string - default value=""): <specify the role of sSeparator>
      // Return value:
      // 	ANSI string: // 	None
      //
      
      procedure NameHashType(local nAlgorithmHashType is int =AlgorithmHash,sSeparator is string="")
      
      sSecureHashType is string
      	switch nAlgorithmHashType
      		case HA_HMAC_SHA_256,HA_SHA_256
      sSecureHashType="SHA"+sSeparator+"256"
      		case HA_HMAC_SHA_160,HA_SHA_160
      sSecureHashType="SHA"+sSeparator+"160"
      		case HA_HMAC_SHA_384,HA_SHA_384
      sSecureHashType="SHA"+sSeparator+"384"
      		case HA_HMAC_SHA_512,HA_SHA_512
      sSecureHashType="SHA"+sSeparator+"512"
      		other case
      sSecureHashType="SHA"+sSeparator+"256"
      	end
      	
      return sSecureHashType
     type : 458752
   -
     name : ParametersGet
     procedure_id : 2220122836612397355
     type_code : 12
     code : |1-
      // Summary: retrieves the parameters received from the bank for a payment
      // Syntax:
      //[ <Result> = ] ParametersGet (<sOrderNumberOrTransactionID>, <bFromOrderNumber> is boolean)
      //
      // Parameters:
      //	sOrderNumberOrTransactionID: Order number or transaction identifier
      //	sFromOrderNumber (boolean): True if sOrderNumberOrTransactionID is the order number, False if it is the transaction identifier
      // Return value:
      // 	ANSI string: // 	None
      //
      procedure ParametersGet(local sOrderNumberOrTransactionID, sFromOrderNumber is boolean) : string
      
      	if sFromOrderNumber then
      HReadSeekFirst(Transaction, OrderNumber, sOrderNumberOrTransactionID)
      	else	
      HReadSeekFirst(Transaction, TransactionID, sOrderNumberOrTransactionID)
      	end
      	if HFound(Transaction) then
      		return Transaction.Parameters
      	else
      		return ""
      	end
     type : 458752
   -
     name : ParametersDelete
     procedure_id : 2220122836612462891
     type_code : 12
     code : |1-
      // Summary: deletes the parameters and information received from the bank for a payment
      // Syntax:
      //[ <Result> = ] ParameterDelete (<sOrderNumberOrTransactionID>, <bFromOrderNumber> is boolean, <bDeleteRecord> is boolean)
      //
      // Parameters:
      //	sOrderNumberOrTransactionID: Order number or transaction identifier
      //	sFromOrderNumber (boolean): True if sOrderNumberOrTransactionID is the order number, False if it is the transaction identifier
      //	bDeleteRecord (boolean): True to entirely delete the record corresponding to this payment in the transaction database, False to clear the items with return information from the bank
      // Return value:
      // 	boolean: True if deletion was done or if it does not exist
      //
      procedure ParametersDelete(local sOrderNumberOrTransactionID, sFromOrderNumber is boolean,bDeleteRecord is boolean) : boolean
      
      if sFromOrderNumber then
      HReadSeekFirst(Transaction, OrderNumber, sOrderNumberOrTransactionID)
      else	
      HReadSeekFirst(Transaction, TransactionID, sOrderNumberOrTransactionID)
      end
      if HFound(Transaction) then
      	if bDeleteRecord then			
      		if not HDelete(Transaction) then
      			XERROR(HErrorInfo())
      ErrorPropagate()
      			return False
      		else
      			return True
      		end
      	else
      		Transaction.Parameters		=	""
      		Transaction.Information	=	""
      		Transaction.Loginfo			=	""
      		Transaction.PaymentObject	=	""
      		if not HModify(Transaction) then
      			XERROR(HErrorInfo())
      ErrorPropagate()
      			return False
      		else
      			return True
      		end
      	end		
      else
      	//not found therefore OK
      	return True
      end
     type : 458752
   -
     name : CookieGet
     procedure_id : 2220122836612528427
     type_code : 12
     code : |1-
      // Summary: Retrieve session cookies of sites with context (URL anti-theft security added in version 24)
      // Syntax:
      //CookieGet ()
      //
      // Parameters:
      //	None
      // Return value:
      // 	None
      //
      procedure private CookieGet()
      
      // DYN_SECURITE2b68=90E4D8AC619C578FB579; DYN_SECURITE1d8c=60750C4E9BAF6601251D; DYN_SECURITE27a4=F6DDDD6C8285960A2AEC
      m_sCookiesSiteBeforePayment= PageReadHeaderHTTP("Cookie")
     type : 458752
   -
     name : Sips2Payment_FromBank
     internal_properties : CAAAAAgAAAA0NdgDzJ4Wql1kLx8MRHxPRQB/noa90If0cCQpHUDpheJ+uhzoB7FL9YePLyoZjTh5p9zXbR0M/oFVMfmIKF5iRkiNWum+mdTT7viLwDGQIOd6fZE7ag72R2cVORGfDAqnY82aeVD7K2K4ShBH3pvubuVBQgWdcTuLic1dt+VPyplJYtemzRpZ05isPKmQEhjMrdzCb/0vBhV5Z2VL/zf1IeAEvy3OhnEcuSYkXfETd+NXylMn7LOf7pDHtNHLgyjmQ9CftvRBsAxhHllgo383QUB1aKfZ/X2qRZpgviuDeX/hnMT4YrwFXHn9szAuHEyx6JGd2+I3Z7C4+pgTEx1ivFD1JyxwPTmPDmv+jjK4x7b/D1H687psjQhERFGxCj9iuy9l+SnuHRNs1A+3rG1uVZOvu/aSiGwcjdD0ZXspOy4=
     procedure_id : 2220122836612593963
     type_code : 12
     group : 3
     code : |1-
      // Summary: Performs the payment request toward Banque Populaire
      // Syntaxe :
      //[ <R√©sultat> = ] Sips2Payment_FromBank (<cyAmount> est mon√©taire, <sEmailAddress> est cha√Æne)
      //
      // Param√®tres :
      //	cyAmount (mon√©taire) : Amount of payment to perform
      //	sEmailAddress (cha√Æne ANSI) : Email address of the customer
      // Traitement automatique des exceptions :   ex√©cuter le bloc de code CAS EXCEPTION:
      //
      
      // Return value:
      // 	boolean:        True if the payment call was performed, False otherwise
      // Automatic process of exceptions:   run CASE EXCEPTION:
      procedure private Sips2Payment_FromBank(local cyAmount is currency, local sEmailAddress is string)
      
      // Reset errors
      XERROR()
      
      sForm 			is string ANSI
      sFormData		is string ANSI
      
      //
      
      //	Documentation for the technical implementation in WEDBDEV::
      // https://documentation.sips.worldline.com/en/WLSIPS.003-GD-Functional-presentation.html
      
      //For Mercanet version 2 for BNP Paribas e-businesses:
      //	https://documentation.mercanet.bnpparibas.net/index.php?title=Accueil
      	
      //For Sogenactif
      //		SGSOGENACTIF-317-18-102016-fr-Paypage_Post.pdf
      //		at https://telechargement.sogenactif.com/doc_api/general_doc.jsp
      //		
      //		Part 3.1 of the PDF documentation
      //		Data 				:	 Contains all the details of the transaction in a character string 
      //		InterfaceVersion  	:	Version of the connector interface. 
      //		Seal  				:	Used to check the integrity of exchange data. The Seal control is calculated from the Data control and the one with the secret key
      
      //Optional
      //		Encode  			:	Specifies the encoding method used in the Data control
      //		SealAlgorithm  		:	Specifies the algorithm to encrypt the seal 
      
      //		In "Data" :
      //				The Data control is built according to the following format: 
      //				 <name of control 1>=<value of control 1>|<name of control 2>=< value of control 2>|< name of control 3>=<value of control 3> etc. 
      //				If a control contains a list of complex objects, its representation is constructed according to the following format: 
      //				<name of control 1>=<value of control 1>|<list name>={<name of control A1>=< value of control A1>, <name of control A2>=<value of control A2>},
      // 				{<name of control B1>=<value of control B1>, <name of control B2>=<value of control B2>},
      // 				{<name of control C1>=<value of control C1>, <name of control C2>=<value of control C2>}|<name of control2>=<value of control 2> 
      //
      //			In the controls, there is: (Part 8.1.1 of PDF documentation):
      //					Name of control  												Presence  		In the version  	Comments 
      //					amount  													Mandatory 	HP_1.0    
      //					currencyCode 												Mandatory  	HP_1.0    
      //					keyVersion  												Mandatory 	HP_1.0    
      //					merchantId  												Mandatory 	HP_1.0    
      //					normalReturnUrl  											Mandatory 	HP_1.0    
      
      //					automaticResponseUrl  										Optional 		HP_1.0    
      //					orderId  													Optional 		HP_1.0    
      //					customerLanguage 											Optional  		HP_1.0 
      //   
      //					billingContact.email  										Optional  		HP_2.2 
      //					customerContact.email  										Optional  		HP_2.2 
      //					deliveryContact.email  										Optional  		HP_2.2 
      //					holderContact.email   										Optional  		HP_2.2 
      
      //					billingFirstDate  											Optional		HP_2.5    
      //					bypassDcc 													Optional  		HP_2.11    
      //					captureDay 													Optional  		HP_1.0    
      //					captureMode 												Optional  		HP_1.0    
      //					customer3DSTransactionDate 									Optional  		HP_2.5    
      //					customerBillingNb 											Optional  		HP_2.5    
      //					customerDeliverySuccessFlag 								Optional  		HP_2.5    
      //					customerId 													Optional  		HP_2.0    
      //					customerIpAddress 											Optional  		HP_2.1    
      //					customerPhoneValidationMethod 								Optional  		HP_2.5    
      //					customerRegistrationDateOnline 								Optional  		HP_2.5    
      //					customerRegistrationDateProxi 								Optional  		HP_2.5    
      //					deliveryFirstDate 											Optional  		HP_2.5    
      //					evidenceAcquisitionDate 									Optional  		HP_2.5    
      //					evidenceNumber 												Optional  		HP_2.5    
      //					evidenceType 												Optional  		HP_2.5    
      //					expirationDate 												Optional  		HP_1.0    
      //					hashAlgorithm1  											Optional 		HP_2.3   
      //					hashAlgorithm2  											Optional 		HP_2.3    
      //					hashSalt1  													Optional		HP_2.1    
      //					hashSalt2  													Optional		HP_2.1    
      //					holderAdditionalReference  									Optional	 		HP_2.9   
      //					intermediateServiceProviderId  								Optional 			HP_2.12   
      //					invoiceReference  											Optional 			HP_2.0    
      //					mandateId  													Optional 			HP_2.5    
      //					merchantSessionId  											Optional 		HP_2.0    
      //					merchantTransactionDateTime  								Optional 		HP_2.0    
      //					merchantWalletID  											Optional 			HP_2.2    
      //					orderChannel  												Optional 			HP_2.1    
      //					paymentMeanBrandList  										Optional 			HP_1.0    
      //					paymentPattern  											Optional	 		HP_2.1  This control is mandatory for certain payment methods. 
      // 																										See the implementation guide of the corresponding payment method for more details. 
      //					returnContext  												Optional	 		HP_2.0    
      //					riskManagementCustomDataList  								Optional 			HP_2.9   
      //					statementReference  										Optional	 		HP_2.3    
      //					templateName  												Optional	 		HP_2.1    
      //					transactionActors  											Optional			HP_2.2    
      //					transactionOrigin  											Optional	 		HP_2.0    
      //					transactionReference  										Optional   		HP_1.0    
      //					valueDate  													Optional	 		HP_2.5 
      
      //					fraudData.allowedCardArea  									Optional	 		HP_2.1   
      //					fraudData.allowedCardCountryList  							Optional	  		HP_2.1 
      //					fraudData.allowedIpArea  									Optional	  		HP_2.1 
      //					fraudData.allowedIpCountryList  							Optional			HP_2.1 
      //					fraudData.bypass3DS  										Optional		 	HP_2.1 
      //					fraudData.bypassCtrlList  									Optional	 	 	HP_2.1 
      //					fraudData.bypassInfoList  									Optional	 	 	HP_2.1 
      //					fraudData.deniedCardArea  									Optional		 	HP_2.1 
      //					fraudData.deniedCardCountryList  							Optional		 	HP_2.1 
      //					fraudData.deniedIpArea  									Optional		 	HP_2.1 
      //					fraudData.deniedIpCountryList  								Optional			HP_2.1 
      //					fraudData.riskManagementDynamicSettingList  				Optional   		HP_2.10 
      
      //					riskManagementDynamicSetting.riskManagementDynamicParam 	Mandatory  	HP_2.10   
      //					riskManagementDynamicSetting.riskManagementDynamicValue 	Mandatory  	HP_2.10   
      //					 
      //					paypageData.bypassReceiptPage 								Optional   		HP_2.0 
      //
      //					authenticationData.issuerWalletPolicy.check3DS 				Optional			HP_2.2   
      //					authenticationData.issuerWalletPolicy.checkCSC 				Optional			HP_2.2   
      //
      //					authenticationData.cardAuthPolicy.checkAVS 					Optional	 		HP_2.8   
      //					authenticationData.cardAuthPolicy.ignoreAddressCheckResult 	Optional	 		HP_2.8   
      //					authenticationData.cardAuthPolicy.ignorePostcodeCheckResult Optional 		HP_2.8   
      //					etc......
      //
      //
      //			Example of a payment request: 
      //				amount=55|currencyCode=978|merchantId=011223744550001|normalReturnUrl=http://www.normalreturnurl.com|transactionReference=534654|keyVersion=1 
      //			Example of a payment request with a list of complex objects: 
      //				amount=55|currencyCode=978|merchantId=011223744550001|normalReturnUrl=http://www.normalreturnurl.com|transactionReference=534654| 
      //				shoppingCartDetail.shoppingCartItemList={productName=apple,productDescription=red},{productName=pear,productDescription=green},
      // 				{productName=mango,productDescription=yellow}|keyVersion=1 
      //		
      //				
      
      //		In "InterfaceVersion": 
      // 			The current version of InterfaceVersion is HP_2.14 
      
      //		In "Seal" :
      //				* SHA-256 Algorithm (default value) 
      //					- Concatenation of the Data control and the secret key
      //					- UTF-8 encoding of data from the result of the previous operation 
      //					- SHA256 encryption of bytes obtained 
      //					=> In summary: SHA256(UTF-8(Data+secretKey)) 
      //
      //				* HMAC-SHA algorithm: 
      //					- Use of the shared secret key to generate the HMAC variant of the message 
      //					- Use of the Data control only
      //					- UTF-8 encoding of data from the result of the previous operation 
      //					- HMAC-SHA encryption of the bytes obtained 
      //					=> In summary: HMAC-SHA256(UTF-8(Data),UTF-8(secretKey))
      
      //		In "Encode": 
      //					 base64 or base64Url
      
      
      
      
      // Describes the sending form
      sForm = StringBuild(HTML_FORM, "%2", "PaymentRequest", "%3", "%1")
      
      //In Data there has to be at least:		
      //					Name of control  												Presence  		In the version  	Comments 
      //					amount  													Mandatory 	HP_1.0    
      //					currencyCode 												Mandatory  	HP_1.0    
      //					keyVersion  												Mandatory 	HP_1.0    
      //					merchantId  												Mandatory 	HP_1.0    
      //					normalReturnUrl  											Mandatory 	HP_1.0    
      
      //					automaticResponseUrl  										Optional 		HP_1.0    
      //					orderId  													Optional 		HP_1.0    
      //					customerLanguage 											Optional  		HP_1.0 
      //					customerEmail	 											Optional   		HP_2.0 
      
      //					billingContact.email  										Optional  		HP_2.2 
      //					customerContact.email  										Optional  		HP_2.2 
      //					deliveryContact.email  										Optional  		HP_2.2 
      //					holderContact.email   										Optional  		HP_2.2 
      
      aaData is ASSOCIATIVE ARRAY of strings
      sData is string
      //sData+=["|"]+"amount="+NumToString(cyAmount * 100)
      aaData["amount"]						=NumToString(cyAmount * 100)	
      aaData["currencyCode"]					=		CurrencyToCodeISO4217()	
      aaData["keyVersion"]					=		KeyVersion
      aaData["merchantId"]					=		MerchantId
      
      aaData["normalReturnUrl"]				=		PaybackURL(URL_OK)
      aaData["automaticResponseUrl"]			=		PaybackURL(URL_S2S)
      aaData["orderId"]						=		OrderNumber	//Order number associated with the payment transaction.  
      
      //use or not depending on the account parameter 
      if SendtransactionReference then aaData["transactionReference"]			=		OrderNumber	
      aaData["customerLanguage"]				=		Language
      
      aaData["customerEmail"]					=sEmailAddress
      
      aaData["customerContact.email"]			=sEmailAddress //
      aaData["holderContact.email"]			=sEmailAddress
      aaData["billingContact.email"]			=sEmailAddress
      aaData["deliveryContact.email"]			=sEmailAddress
      
      // and custom data
      for each sValue,sControlName of m_aaParamDelPaymentForm
      	aaData[sControlName]				=		sValue		
      end
      
      //Build DATA			
      for each sValue,sControlName of aaData
      sData+=["|"]+sControlName+"="+sValue
      end
      
      
      //		In "Seal" :
      //				* SHA-256 Algorithm (default value) 
      //					- Concatenation of the Data control and the secret key
      //					- UTF-8 encoding of data from the result of the previous operation 
      //					- SHA256 encryption of bytes obtained 
      //					=> In summary: SHA256(UTF-8(Data+secretKey)) 
      sSeal is string 
      //UTF-8 string, hashed with SHA 256 in lowercase hexa
      sSeal=Lower(BufferToHexa(HashString(AlgorithmHash, StringToUTF8(sData+SecretKey)),NoGrouping))
      
      
      // In the form
      sFormData += AddFormControl("InterfaceVersion", InterfaceVersion)
      sFormData += AddFormControl("Seal", sSeal)
      //		Encode  			:	Specifies the encoding method used in the Data control
      sFormData += AddFormControl("Encode", "")
      //		SealAlgorithm  		:	Specifies the algorithm to encrypt the seal 
      sFormData += AddFormControl("SealAlgorithm", NameHashType(AlgorithmHash,"-"))
      sFormData += AddFormControl("Data", sData)
      
      sForm = StringBuild(sForm, ConvertTextToTML(TransitionText), m_sProviderURL, sFormData)
      
      
      
      
      // Displays the data
      StringDisplay(sForm, typeMimeHTML)	
      
      return True
      
      case exception:
      XTRACE(XERROR("WL_EXCEPTION [SIPS2Payment] : " + ExceptionInfo))
      return False
     type : 458752
   -
     name : OnSIPS2PaymentReturn
     internal_properties : CAAAAAgAAAD4FMyzZXHGnEmC02UjeiO3N15ZZ4cOAm8rupQRp7hYTX6AMczzIy+rh7tCtalWp8bvkFbHq05+b1x9oO4V4HRURiDxxLb5aQ7PssiI6I2Hrauo+QqbpGxagbUVZxrKHj/0EFHrDF3VckE7/YhTBEjn9MetjI8VJHdDPQNJWm4HXE59+yGXta4/BDJPJ+CseIeNSd4fKXAW4KK0JUPoJhP+AkJ8XcMED4RcR8HtfeQ4Lo0XwQINjx0gGOI0fdkwyIX/ahYaPjFvQTcR
     procedure_id : 2220122836612659499
     type_code : 12
     group : 3
     code : |1-
      // Summary: Manage the SIPS2 return
      // Syntaxe :
      //[ <R√©sultat> = ] OnSIPS2PaymentReturn (<nMode> est entier, <sInformation> est cha√Æne)
      //
      // Param√®tres :
      //	nMode (entier) : (output) Error mode
      //	sInformation (cha√Æne ANSI) : (output) Information about the return
      
      // Return value:
      // 	boolean: // 	None
      procedure OnSIPS2PaymentReturn(nMode is int, sInformation is string)
      bBase64 is boolean
      	// Reset errors
      	XERROR()
      			
      sData is string=PageParameter("Data")
      bufSeal is buffer=PageParameter("Seal")	
      	if not bufSeal ~= Lower(BufferToHexa(HashString(AlgorithmHash, StringToUTF8(sData+SecretKey)),NoGrouping))then				
      nMode = PAYMENT_FORGED
      sInformation = "&error=Invalid signature "
      		return False
      	end
      	
      bBase64= PageParameter("Encode")~="base64"
      	
      aaData is ASSOCIATIVE ARRAY of strings
      sDataName is string
      sDataValue is string
      	//Build aaData			
      	for each string sAData of sData SEPAREE by "|"
      sDataName		=ExtractString(sAData,1,"=")
      sDataValue	=ExtractString(sAData,2,"=")
      		if bBase64	 then
      			aaData[sDataName]=Decode(sDataValue,encodeBASE64)
      		else
      			aaData[sDataName]=sDataValue		
      		end
      	end	
      
      	//Build DATA			
      	for each sValue,sControlName of aaData
      sInformation+=["&"]+sControlName+"="+sValue
      	end
      	if aaData["responseCode"]="00" then
      nMode = PAYMENT_VALID // Authorization accepted 
      		return True
      	else		
      nMode = PAYMENT_REFUSED
      sInformation = "&error=error code"+aaData["responseCode"]
      		switch aaData["responseCode"]			
      			case "02" 	// Authorization request to the bank by phone due to the limit of the card being exceeded, if you are authorized to force transactions. 
      sInformation +=", Authorization request to the bank by phone due to the limit of the card being exceeded, if you are authorized to force transactions."
      			case "03"  // Invalid commercial contract 
      sInformation +=", Invalid commercial contract."
      			case "05"  // Authorization denied 
      sInformation +=", Authorization denied."
      			case "11"  // Used in the case of a deferred control. The PAN is in opposition 
      sInformation +=", Used in the case of a deferred control. The PAN is in opposition."
      			case "12"  // Invalid transaction, check the parameters transferred in the request 
      sInformation +=", Invalid transaction, check the parameters transferred in the request."
      			case "14"  // Invalid payment method details (e.g. card number or visual cryptogram of the card) 
      sInformation +=", Invalid payment method details (e.g. card number or visual cryptogram of the card)."
      			case "17"  // Cancellation by the Web user 
      sInformation +=", Cancellation by the Web user."
      			case "24"  // Invalid operation. The operation you wish to perform is not CAS compatible with the status of the transaction. 
      sInformation +=", Invalid operation. The operation you wish to perform is not CAS compatible with the status of the transaction."
      			case "25"  // Transaction not found in the bank's database 
      sInformation +=", Transaction not found in the bank's database."
      			case "30"  // Format error 
      sInformation +=", Format error."
      			case "34"  // Suspected fraud (wrong seal)" 
      sInformation +=", Suspected fraud (wrong seal)"
      nMode = PAYMENT_FORGED
      			case "40"  // Function not supported: the operation you wish to perform is not part of the list of operations to which you are authorized 
      sInformation +=", Function not supported: the operation you wish to perform is not part of the list of operations to which you are authorized."
      			case "51"  // Amount too high 
      sInformation +=", Amount too high."
      			case "54"  // Validity date of the payment method has expired 
      sInformation +=", Validity date of the payment method has expired."
      			case "60"  // Pending transaction 
      sInformation +=", Pending transaction."
      			case "63"  // Security rules not respected, transaction stopped 
      sInformation +=", Security rules not respected, transaction stopped."
      			case "75"  // Number of attempts to enter payment method details exceeded 
      sInformation +=", Number of attempts to enter payment method details exceeded."
      			case "90"  // Service temporarily unavailable 
      sInformation +=", Service temporarily unavailable"
      			case "94" 	// Duplicated transaction: the transactionReference of the transaction has been used already 
      sInformation +=", Duplicated transaction: the transactionReference of the transaction has been used already."
      			case "97"  // Expired deadlines, transaction refused 
      sInformation +=", Deadline expired, transaction refused."
      			case "99"  // Temporary problem with the bank's server 
      sInformation +=", Temporary problem with the bank's server."
      			other case
      				
      		end
      	end
      
      		
      return False
     type : 458752
   -
     name : OnRealexPaymentReturn
     internal_properties : CAAAAAgAAAAquixbTn6A7x1qtLOtsDWlVcEm2eriCoYCcxDz0zDShe0rGtvMNhCDfm02G2xcYprnjHX5VCFT7FQsd5WCCT6x+Q5U0TII5HYNV99sGnNtCfyCZ34z0wDWZn19nGwzvHa+2GTbqj7ZeaXn3mjscmaZznFiJipi8qJHB+oBs6xFn+iPtB8e3uhgFAo4D28UhIuvbx0LRPy51LmthyYW6YpcOidMiVgfJRQnEguuNaoJA0gsP+1BWVJOKKDryXFK0Tot
     procedure_id : 2220122836612725035
     type_code : 12
     group : 3
     code : |1-
      // Summary: Manage the Realex return
      // Syntax:
      //[ <Result> = ] OnRealexPaymentReturn (<sAction> is string, <nMode> is int, <sInformation> is string)
      //
      // Parameters:
      //	sAction (ANSI string): value among	URL_S2S, URL_CANCEL, URL_REFUSED, URL_OK
      //	nMode (integer): (output) Error mode
      //	sInformation (ANSI string) :(output) Information about the return
      // Return value:
      // 	boolean:  True if the return was properly managed, False otherwise
      //
      procedure OnRealexPaymentReturn(sAction is string,nMode is int, sInformation is string)
      
      	// Reset errors
      	XERROR()
      	
      sRealexSignature is string
      sRoughValue	is string
      sCalculatedKey	is string
      sParamList is string
      	//Parameters received
      sParamList = ListIncomingParameters()
      
      	// Retrieves the Ogone signature
      sRealexSignature = PageParameter("SHA1HASH")
      	if not Keyphrase="" _and_ sRealexSignature <> "" then		
      		// Calculates the signature of parameters
      		// "timestamp.merchantid.orderid.result.message.pasref.authcode"
      //		sNameAndValueOneParameter is string
      //		nEqualPosition is int
      //		AParameter is FormParameter
      //		arrParametersReceivedForm is array of FormParameter
      //		nParameterSubscript is int
      //		LOOP
      //			nParameterSubscript++
      //			sNameAndValueOneParameter=PageParameter(nParameterSubscript)
      //			IF sNameAndValueOneParameter ~= "" THEN BREAK 
      //			// Finds the = that separates the name of the parameter from its value
      //			nEqualPosition = Position(sNameAndValueOneParameter, "=")		
      //			// Name
      //			AParameter.Name = Upper(sNameAndValueOneParameter[[A (nEqualPosition - 1)]])
      //			// Value
      //			AParameter.Value = sNameAndValueOneParameter[[(nEqualPosition + 1) A]]			
      //			//ignore the returned hash key as well as the parameters"added" by the component 
      //			IF NOT AParameter.Name IN ("SHA1HASH","ACT","FPAY","SECID") THEN
      //				ArrayAdd(arrParametersReceivedForm,AParameter)				
      //			END
      //		END
      		// "timestamp.merchantid.orderid.result.message.pasref.authcode"
      		// 20161129165820...00.[ test system ] AUTHORISED.14804351090027315.12345"
      sRoughValue=COL_SECUREPAYMENT.IncomingParameters["TIMESTAMP"]+"."+COL_SECUREPAYMENT.IncomingParameters["merchant_id"]+"."+COL_SECUREPAYMENT.IncomingParameters["order_id"]+"."+COL_SECUREPAYMENT.IncomingParameters["RESULT"]+"."+...
      					COL_SECUREPAYMENT.IncomingParameters["message"]+"."+COL_SECUREPAYMENT.IncomingParameters["PASREF"]+"."+COL_SECUREPAYMENT.IncomingParameters["AUTHCODE"]
      					
      sCalculatedKey = Lower(BufferToHexa(HashString(AlgorithmHash, StringToUTF8(sRoughValue)),NoGrouping))
      sCalculatedKey+="."+m_sKeyphrase
      sCalculatedKey = Lower(BufferToHexa(HashString(AlgorithmHash, StringToUTF8(sCalculatedKey)),NoGrouping))
      		
      		
      					
      		// If the keys are identical
      		if sCalculatedKey = sRealexSignature then
      			switch sAction
      				case URL_S2S
      					
      					//Check the IP address of the issuern in S2s
      					if BankServerCheckAddress(nMode, sInformation) then
      						if COL_SECUREPAYMENT.IncomingParameters["RESULT"]="00" then
      nMode=PAYMENT_VALID	
      						else
      nMode=PAYMENT_REFUSED
      						end
      					end
      
      				case URL_OK
      					if COL_SECUREPAYMENT.IncomingParameters["RESULT"]="00" then
      nMode = PAYMENT_VALID	
      					else
      nMode = PAYMENT_REFUSED
      					end
      					
      				case URL_CANCEL
      nMode = PAYMENT_CANCELED
      				other case
      nMode = PAYMENT_REFUSED
      			end
      			
      			// The transaction is valid
      			return True
      		else
      		
      			// Otherwise, detect a fraud
      nMode = PAYMENT_FORGED
      sInformation = XERROR("SHA1HASH signature does not match (Signature received:" + sRealexSignature +...
      														 " Non-encoded signature: "+sRoughValue...
      														+" Calculated signature: " + sCalculatedKey + ")")
      		end
      	else
      		if not Keyphrase="" then		
      			//Signature not found
      sInformation="Realex signature missing"			
      		end		
      	end
      	
      return False
     type : 458752
   -
     name : RealexPayment_FromBank
     internal_properties : CAAAAAgAAAABKi0605Tfl9u4rC6gcEpG7WHX6x4ERI9FL5KdFYgDJ2R9HmyEGIrGzxuBJw3QTAvJJeXpqIXtsrg0G9yh34/oG4CB2cmcls/xf+WYPnj2sbuwqDjgRTtJzDswy8LarPUfqvyDjVMDkKH62LK/6O/e+y0QtC9vUU5KyVt2rnpPJ+ZIH5I+HlnYA8rfPtXnYHAEn5acHioQWp6bRkvuYETKhp09nSMrLMqcsjQZw2c/k1wn7Ns=
     procedure_id : 2220122836612790571
     type_code : 12
     group : 3
     code : |1+
      // Summary: Starts the payment with Realex
      // Syntaxe :
      //[ <R√©sultat> = ] RealexPayment_FromBank (<cyAmount> est mon√©taire, <sEmailAddress> est cha√Æne)
      //
      // Param√®tres :
      //	cyAmount (mon√©taire) : Amount of payment to perform
      //	sEmailAddress (cha√Æne ANSI) : Email address of the customer
      // Traitement automatique des exceptions :   ex√©cuter le bloc de code CAS EXCEPTION:
      //
      
      // Return value:
      // 	boolean:        True if the payment call was performed, False otherwise
      // Automatic process of exceptions:   run CASE EXCEPTION:
      procedure RealexPayment_FromBank(local cyAmount is currency, local sEmailAddress is string)
      
      // Reset errors
      XERROR()
      
      bReturn 	 		 is boolean
      //sSupplier 		 is string
      
      sForm 			is string ANSI
      sFormData		is string ANSI
      
      // Describes the sending form
      sForm = StringBuild(HTML_FORM, "%2", "PaymentRequest", "%3", "%1")
      //Information here: 	https://developer.realexpayments.com/#!/hpp/transaction-processing
      //						https://developer.realexpayments.com/#!/api/process-payment/authorisation
      //						https://developer.realexpayments.com/#!/integration-api/php/html_js
      
      //						https://developer.realexpayments.com/#!/hpp/transaction-processing
      //						https://developer.realexpayments.com/#!/hpp/apm
      
      
      // errors : https://developer.realexpayments.com/#!/technical-resources/messages
      
      //<form method="POST" action="https://hpp.sandbox.realexpayments.com/pay">
      //<input type="hidden" name="TIMESTAMP" value="20161121142355">
      
      //<input type="hidden" name="MERCHANT_ID" value="Merchant ID">
      //<input type="hidden" name="ACCOUNT" value="internet">
      //<input type="hidden" name="ORDER_ID" value="N6qsk4kYRZihmPrTXWYS6g">
      //<input type="hidden" name="AMOUNT" value="1001">
      //<input type="hidden" name="CURRENCY" value="EUR">
      
      //<input type="hidden" name="AUTO_SETTLE_FLAG" value="1">
      //<input type="hidden" name="COMMENT1" value="Mobile Channel">
      //<input type="hidden" name="COMMENT2" value="Down Payment">
      
      //<input type="hidden" name="SHIPPING_CODE" value="E77|4QJ">
      //<input type="hidden" name="SHIPPING_CO" value="GB">
      //<input type="hidden" name="BILLING_CODE" value="R90|ZQ7">
      //<input type="hidden" name="BILLING_CO" value="GB">
      
      //<input type="hidden" name="CUST_NUM" value="332a85b">
      //<input type="hidden" name="VAR_REF" value="Invoice 7564a">
      //<input type="hidden" name="PROD_ID" value="SKU1000054">
      //<input type="hidden" name="HPP_LANG" value="GB">
      //<input type="hidden" name="HPP_VERSION" value="2">
      
      //<input type="hidden" name="MERCHANT_RESPONSE_URL" value="https://www.example.com/responseUrl">
      //<input type="hidden" name="CARD_PAYMENT_BUTTON" value="Pay Now">
      //<input type="hidden" name="SUPPLEMENTARY_DATA" value="Custom Value">
      //<input type="hidden" name="SHA1HASH" value="308bb8dfbbfcc67c28d602d988ab104c3b08d012">
      
      //<input type="submit" value="Click To Pay">
      //</form>
      
      // Assign the mandatory parameters
      sFormData += AddFormControl("TIMESTAMP", SysDateTime()[[1 to 14]])
      sFormData += AddFormControl("merchant_id", CompanyCode)
      sFormData += AddFormControl("ACCOUNT", Account)
      sFormData += AddFormControl("AMOUNT", Replace(NumToString(cyAmount, ".2f"), ".", ""))
      sFormData += AddFormControl("CURRENCY", CurrencyToString())
      sFormData += AddFormControl("COMMENT1", sEmailAddress)
      // Identifier of transaction
      sFormData += AddFormControl("order_id", OrderNumber)
      // Other parameters
      sFormData += AddFormControl("MERCHANT_RESPONSE_URL", PaybackURL(URL_S2S))
      
      sFormData += AddFormControl("HPP_LANG", Upper(Language))
      sFormData += AddFormControl("HPP_VERSION", "2")
      sFormData += AddFormControl("SUPPLEMENTARY_DATA", m_sToken)
      
      sFormData += AddFormControl("CARD_PAYMENT_BUTTON", "Pay")
      
      // Custom data
      for each sValue,sControlName of m_aaParamDelPaymentForm
      	if ArraySeek(m_arrFormParameters, asLinear, "Name", sControlName) <= 0 then
      sFormData += AddFormControl(sControlName,sValue, *, *, "HTML", True)
      	end
      end
      
      // Complete with the hash
      sFormData += AddFormControl("SHA1HASH", EncodeSHARealex())
      
      sFormData = StringBuild(sFormData, ConvertTextToTML(TransitionText), m_sProviderURL, sFormData)
      
      sForm = StringBuild(sForm, ConvertTextToTML(TransitionText), m_sProviderURL, sFormData)
      
      // Displays the data
      StringDisplay(sForm, typeMimeHTML)	
      
      
      return bReturn
      
      case exception:
      XTRACE(XERROR("WL_EXCEPTION [Realex] : " + ExceptionInfo))
      return False
      
     type : 458752
   -
     name : EncodeSHARealex
     internal_properties : CAAAAAgAAAACJNLorLZwXsijXMYS1F5TUkh3YAlDoSITwF7tgR2IxHpd01YIZ3chmS2vVjcebGYD3GIZXd5B5fSgUyQzkCjycQGngc4DGCe/ntf7Z9qmyAg4B5nyUcMjHr8gMUKNnohn64PHXYYPB6SbvHRRz6NzrU5zMI+IJgyiC0ABYov06O5H/riGiYSukEFtcSXCBtY3e7qTow==
     procedure_id : 2220122836612856107
     type_code : 12
     code : |1-
      // Summary: Encode Realex data and creates SHA1 key
      // Syntax:
      //[ <Result> = ] EncodeSHARealex ()
      //
      // Parameters:
      //	None
      // Return value:
      // 	ANSI string:  SHA1 key of Realex data
      //
      procedure private EncodeSHARealex()
      
      sSHAKey  is string
      	
      stParam  is FormParameter
      aaParam is ASSOCIATIVE ARRAY (ccIgnoreCase+WithoutDuplicates)  of strings
      	
      	for each stParam of m_arrFormParameters
      		aaParam[stParam.Name]=stParam.Value		
      	end
      	//"timestamp.merchantid.orderid.amount.currency"
      sSHAKey=aaParam["TIMESTAMP"]+"."+aaParam["merchant_id"]+"."+aaParam["order_id"]+"."+aaParam["AMOUNT"]+"."+aaParam["CURRENCY"]
      	//sCl√©SHA="20161123095618.Merchant ID.N6qsk4kYRZihmPrTXWYS6g.1001.EUR"
      sSHAKey = Lower(BufferToHexa(HashString(AlgorithmHash, StringToUTF8(sSHAKey)),NoGrouping))
      sSHAKey+="."+m_sKeyphrase
      sSHAKey = Lower(BufferToHexa(HashString(AlgorithmHash, StringToUTF8(sSHAKey)),NoGrouping))
      
      return sSHAKey
     type : 458752
   -
     name : Payment
     internal_properties : CAAAAAgAAABYapxWBYS3bkiDBPbqDFazAnivsNHbAWrLCJ4lYX2YzFJ1Yw7Id+9BmU3XRg8WVBYTfHoZVSbxrTzIw2yjwEhK2Zk3ue4TQNffbvu3Izb67NyM273eracHepu0je7J4lxb75cLSVJDK4BnwHB9mydnQVJX5OtUWjCOVwRNrleYfHLLcsyC9ViCfN3hHfHuC3eFyQjFfQ==
     procedure_id : 2220122836612921643
     type_code : 12
     code : |1-
      // Summary: Starts the payment procedure via the bank's website
      // Syntax:
      //[ <Result> = ] Payment (<cyAmount> is currency, <sEmailAddress> is string)
      //
      // Parameters:
      //	cyAmount (currency): Amount of payment
      //	sEmailAddress (ANSI string): Email address of the customer
      // Return value:
      // 	boolean:       True if the call to the payment was performed, False otherwise
      //
      
      procedure Payment(local cyAmount is currency, local sEmailAddress is string)  <zombie = "use the 'Payment_FromBank' method or the 'Direct_Payment' method" > : boolean
      
      return Payment_FromBank(cyAmount,sEmailAddress)
     type : 458752
   -
     name : Direct_Payment
     internal_properties : CAAAAAgAAADZcRdCkySxp5FOrFhC4m0uFEIcd52MRI8134I9VQhjh4Rac7i8pBYSe99Vy9EEEL+9kXnd/Mmx1qzAZ8jtm/s0d1TNtbUoEkt9/s/QekSuefdcPGpyn6UL6H/bBmfFSSAqVdd2fjLiOU7z3La77OPSz3nkYHMjDYq2Zefi0iYbc1I8C6Yqaq2s1x6jcgHLRFgUJh50NsKY4gaDXlPWSLSZufX4Tc3S58+hz+dAYOzmnN18tIM=
     procedure_id : 2220122836612987179
     type_code : 12
     group : 1
     code : |1-
      // Summary: Starts the payment procedure via the bank's website
      // Syntax:
      //[ <Result> = ] Direct_Payment (<cyAmount> is currency, <sEmailAddress> is string, <eActionOnTheCard> is COL_SECUREPAYMENT.CardAction)
      //
      // Parameters:
      //	cyAmount (currency): Amount of payment
      //	sEmailAddress (ANSI string): Email address of the customer
      //	eActionOnTheCard (COL_SECUREPAYMENT.CardAction): <specify the role of eActionOnTheCard>
      // Return value:
      // 	boolean:       True if the call to the payment was performed, False otherwise
      //
      // Automatic process of exceptions:   run CASE EXCEPTION:
      //
      
      //	b3DS (boolean) : <specify the role of b3DS>
      procedure Direct_Payment(local cyAmount is currency, local sEmailAddress is string, eActionOnTheCard is CardAction ) : boolean
      
      bReturn is boolean
      	
      	DirectMode 	= True
      	
      	// Reset errors
      	XERROR()
      	//Reset ID previous transaction
      	m_nTransactionID = 0
      	
      	m_cyAmount=cyAmount
      	m_sEmailAddress=sEmailAddress
      	
      	
      	// Checks
      	if Supplier = ""																then XERROR("No provider of secure payment was specified"); return False
      	if eActionOnTheCard = DebitCard _and_ OrderNumber = ""						then XERROR("No order number was specified"); return False
      	if eActionOnTheCard = DebitCard _and_ sEmailAddress = ""						then XERROR("The email address has not been specified"); return False
      	if not eActionOnTheCard in (DebitCard,CreditCard) _and_ cyAmount = ""	then XERROR("The amount has not been specified"); return False
      	if Supplier = PayBox _and_ (Rang = "" _or_ ProtocolVersion="" _or_             
      								 Site="" _or_ Key="")								then XERROR("Incomplete PayBox Direct parameters (VersionProtocole,Rang,Site,Cl√©)"); return False
      			
      	// Open the data file
      	if HCreationIfNotFound(Transaction) = False then 
      		XERROR("Unable to open the file for saving the transactions")
      		return False
      	end
      		
      	//Retrieve session cookies of sites with context (URL anti-theft security added in version 24)
      	CookieGet()
      	
      	//in 3D Secure, the card number must be kept for the 3DSs return
      	if Mode3DS then
      		bufCardNumber is buffer = CardNumber
      		m_sCard_3DSTime =  Encode(EncryptStandard(bufCardNumber,HashString(HA_MD5_128, "cbszi4q87q"), cryptAES256),encodeBASE64NoCR)
      		
      	end	
      	// Saves the transaction
      	m_sTransactionIdentifier = SaveTransaction(cyAmount, sEmailAddress)
      	if m_sTransactionIdentifier = -1 then return False
      	
      	// PayBox
      	if Supplier = PayBox then
      		
      		// PayBox payment
      bReturn = PayBoxPayment_Direct(cyAmount, eActionOnTheCard)			
      		if bReturn then COL_SECUREPAYMENT.gsLastTypeReturn=URL_OK
      	// Provider not supported
      	else
      		XERROR("The supplier "+Supplier+" of direct secure payment not managed")
      		
      		return False
      	end
      	
      return bReturn
      
      case exception:
      	XERROR("WL_EXCEPTION [Direct_Payment] : " + ExceptionInfo)
      	return False
     type : 458752
   -
     name : PayBoxPayment_Direct
     internal_properties : CAAAAAgAAAA0FsDyl7jfylBnDMb6JL5D4hSrKEl3GjRoQkAbMW+jRJp7k7g4L03pgfNwZo8G5HYD/Nr5laYBDUyI49yTgAg6eQmHyb5jIAf/XkPPOw6ixCRUIzUmZW+/IsNcxSbhylSjt5/DcUpLw2ivk9/KOIBIgJPgn/xXFnxwqTaTga6CDrSNtHbYe2KApkePL59UteEZZayhkQ==
     procedure_id : 2220122836613052715
     type_code : 12
     group : 1
     code : |1-
      // Summary: Performs the request for payment via PayBox
      // Syntax:
      //[ <Result> = ] PayBoxPayment_Direct (<cyAmount> is currency [, <eActionOnTheCard> is COL_SECUREPAYMENT.CardAction])
      //
      // Parameters:
      //	cyAmount (currency): Amount of payment to perform
      //	eActionOnTheCard (COL_SECUREPAYMENT.CardAction): Customer's email address
      // Return value:
      // 	boolean:       True if the call to the payment was performed, False otherwise
      //
      // Automatic process of exceptions:   run CASE EXCEPTION:
      //
      
      procedure private PayBoxPayment_Direct(local cyAmount is currency,eActionOnTheCard is CardAction = DebitCard)
      
      	// Reset errors
      	XERROR()
      
      bReturn 			is boolean
      	
      	BuildPayboxURL()
      	
      	// Prepares the call to PayBox
      bReturn = PreparePayBoxDirectPayment(cyAmount, eActionOnTheCard) 
      	
      return bReturn
      
      case exception:
      	XERROR("WL_EXCEPTION [PayBoxPayment]: " + ExceptionInfo)
      	return False
     type : 458752
   -
     name : PreparePayBoxDirectPayment
     internal_properties : CAAAAAgAAAAyUhBg/d8IheSQdReVw5AUtsPZo0AG+1SbZEH3H4N6jTov2GYSffV9nUZnDYHaa0nbCJZfYqVlXJLRQNJqIjiAKFbfmzZAjA6gIVoncIlgcYqvUlj0khfdepmOfFn0Wt5xEbGi4Ap2N3Hh0ZMlXd+lu+3S8PmO0v2iT19Np5U847MVli9TTv2wmBGWoH3CLe8IL2Xs787iWEz8fbeGSwYVvISjWwuXiItwuwxTmS3IKt6t9MHmsiqPur1bMbtZBSQYSHhoA7BB6e5gSML1TJaQ8jGK/r1bVmmlwTad8wNN1jmpXUGlWKGM56O9iQe7quawh8ft0jmRePB/ggFHFDhLsu14CY0W
     procedure_id : 2220122836613118251
     type_code : 12
     code : |1-
      // Summary: Prepares the configuration file of PayBox
      // Syntax:
      //[ <Result> = ] PreparePayBoxDirectPayment (<cyAmount> is currency [, <eActionOnTheCard> is COL_SECUREPAYMENT.CardAction])
      //
      // Parameters:
      //	cyAmount (currency): Amount of payment to perform
      //	eActionOnTheCard (COL_SECUREPAYMENT.CardAction): <specify the role of eActionOnTheCard>
      // Return value:
      // 	boolean:       Path of configuration file
      //
      // Automatic process of exceptions:   run CASE EXCEPTION:
      //
      // Automatic error processing: run CASE ERROR code block
      //
      
      //	sEmailAddress (ANSI string): Email address of the customer
      procedure private PreparePayBoxDirectPayment(local cyAmount is currency,eActionOnTheCard is CardAction = DebitCard) : boolean
      sFormData is string
      
      // Reset errors
      XERROR()
      
      
      XFORM			is string = "PAYBOX_" + OrderNumber
      // Create a form
      CreateForm(XFORM)
      
      if Mode3DS then
      	// Merchant identification
      sFormData+=AddHTTPFormControl(XFORM,"IdMerchant", SiteIdentifier,"hidden","HTML")
      sFormData+=AddHTTPFormControl(XFORM,"IdSession", m_sTransactionIdentifier,"hidden","HTML")
      	//Transaction
      sFormData+=AddHTTPFormControl(XFORM,"amount", Round(cyAmount * 100),"hidden","HTML")
      sFormData+=AddHTTPFormControl(XFORM,"CURRENCY", CurrencyToCodeISO4217(),"hidden","HTML")
      sFormData+=AddHTTPFormControl(XFORM,"reference", OrderNumber,"hidden","HTML")
      sFormData+=AddHTTPFormControl(XFORM,"CCNumber", CardNumber,"hidden","HTML")
      sFormData+=AddHTTPFormControl(XFORM,"CCExpDate", CardExpiryDate,"hidden","HTML")
      sFormData+=AddHTTPFormControl(XFORM,"CVVCode", CardCVV,"hidden","HTML")
      sFormData+=AddHTTPFormControl(XFORM,"URLRetour", PaybackURL(URL_RETURN3DS),"hidden","HTML")
      sFormData+=AddHTTPFormControl(XFORM,"URLHttpDirect", PaybackURL(URL_S2S3DS),"hidden","HTML")
      else
      	// Merchant identification
      	AddHTTPFormControl(XFORM,"VERSION", ProtocolVersion)
      	AddHTTPFormControl(XFORM,"site", Site)
      	AddHTTPFormControl(XFORM,"IDENTIFIER", SiteIdentifier)
      	AddHTTPFormControl(XFORM,"RANG", NumToString(Rang, "02d"))
      	AddHTTPFormControl(XFORM,"CLE", Key)
      	AddHTTPFormControl(XFORM,"NUMQUESTION", NumToString(m_nTransactionID, "010d"))
      	//Debit?
      	switch eActionOnTheCard
      		case DebitCard
      			//token of a saved card or card number that must not be saved? 		=> TYPE_PAYBOX_DIRECT_DEBIT / TYPE_PAYBOX_SUBSCRIPTION_DIRECT_DEBIT
      			//CC number to save 															=> TYPE_PAYBOX_SUBSCRIPTION_DEBIT_AND_SAVE	
      			if not CardNumber~="" then
      				//CC
      				if CardRemember then
      					AddHTTPFormControl(XFORM,"TYPE", PAYBOX_TYPE_SUBSCRIPTION_DEBIT_AND_SAVE)
      					AddHTTPFormControl(XFORM,"REFABONNE", SubsReference) //Reference of the subscriber customer (Direct Plus)		
      				else		
      					AddHTTPFormControl(XFORM,"TYPE", PAYBOX_TYPE_AUTHORIZATION_AND_DEBIT)
      				end		
      			else if not CardToken~="" then
      				// CC Token	
      				AddHTTPFormControl(XFORM,"TYPE", PAYBOX_TYPE_SUBSCRIPTION_AUTHORIZATION_AND_DEBIT)
      				AddHTTPFormControl(XFORM,"REFABONNE", SubsReference) //Reference of the subscriber customer (Direct Plus)		
      			else
      				//nothing !!
      				XERROR("Payment without card or subscription")
      				return False
      			end
      			//Transaction
      			AddHTTPFormControl(XFORM,"DEVISE", CurrencyToCodeISO4217())
      			AddHTTPFormControl(XFORM,"amount", Round(cyAmount * 100))
      			AddHTTPFormControl(XFORM,"reference", OrderNumber)
      			
      			
      			AddHTTPFormControl(XFORM,"DIFFERE", "000")
      			
      			//To get the country of the card
      			AddHTTPFormControl(XFORM,"COUNTRY", "")
      			//te get the card imprint
      			AddHTTPFormControl(XFORM,"SHA-1", "?")
      			
      		case CardDelete
      			AddHTTPFormControl(XFORM,"TYPE", PAYBOX_TYPE_SUBSCRIPTION_DELETE)
      			AddHTTPFormControl(XFORM,"REFABONNE", SubsReference) //Reference of the subscriber customer (Direct Plus)		
      			
      			
      		other case
      			XERROR("Unexpected action on card:"+eActionOnTheCard.Name)
      			return False	
      	end
      	
      	
      	// Timestamp
      	dtTimeStamping is datetime = DateTimeLocalToUTC(SysDateTime)
      	AddHTTPFormControl(XFORM,"DATEQ", DateToString(dtTimeStamping,"DDMMYYYYHHmmSS"))
      	
      	
      	//Information about Holder
      	if not CardNumber~="" then
      		AddHTTPFormControl(XFORM,"PORTEUR", CardNumber) //Card number or token
      	else if not CardToken~="" then
      		AddHTTPFormControl(XFORM,"PORTEUR", CardToken) //Card number or token		
      	end
      	
      	if Length(CardExpiryDate)<>4 then
      		XERROR("Incorrect card expiry date")
      		return False
      	end
      	AddHTTPFormControl(XFORM,"DATEVAL", CardExpiryDate)
      	AddHTTPFormControl(XFORM,"CVV", CardCVV)
      	
      	//Other              
      	//Origin 
      	AddHTTPFormControl(XFORM,"ACTIVITE", PAYBOX_ACTIVITY_INTERNET)
      	//Archiving ID
      	AddHTTPFormControl(XFORM,"ARCHIVAGE", DateSys()+m_sTransactionIdentifier)
      	
      	// Custom data
      	for each sValue, sControlName of m_aaParamDelPaymentForm
      		AddHTTPFormControl(XFORM,sControlName,sValue)		
      	end
      	
      	
      end
      
      
      // Send the command
      sError            	is string	
      if not PayboxDirectSendForm(XFORM, sError,sFormData) then 
      	COL_SECUREPAYMENT.gsLastTypeReturn=URL_REFUSED
      	XERROR(sError)
      	return False
      else
      	COL_SECUREPAYMENT.gsLastTypeReturn=URL_OK
      end
      
      
      XTRACE("Paybox Direct calls <"+m_sProviderURL+">")
      
      return True
      
      
      case exception:
      XERROR("WL_EXCEPTION [PreparePayBoxDirectPayment]: " + ExceptionInfo)
      return ""
      
      case Error:
      XERROR("WL_ERROR [PreparePayBoxDirectPayment]: " + ErrorInfo)
      return ""
     type : 458752
   -
     name : PayboxDirectSendForm
     procedure_id : 2220122836613183787
     type_code : 12
     code : |1+
      // Summary: Sends the Paybox form
      // Syntax:
      //[ <Result> = ] PayBoxDirectSendForm (<sForm> is string, <sError> is string, <sFormData> is string)
      //
      // Parameters:
      //	sForm (ANSI string): Name of the form
      //	sError (ANSI string): (output) Error message
      //	sFormData (ANSI string): <specify the role of sFormData>
      // Return value:
      // 	boolean:  True if the order was sent, False otherwise
      //
      
      procedure private PayboxDirectSendForm(local sForm is string, sError is string,sFormData is string)	
      	
      	// Clears the list of values
      DeleteAll(m_aaValueTab)	
      	
      sRequestReturn 	is string
      bRequestOK 		is boolean
      	
      	//
      	
      	
      	// Send the command	
      	if Mode3DS then
      		sHTMLForm 			is string ANSI		
      		sHTMLForm = StringBuild(HTML_FORM, "%2", "PaymentRequest", "%3", "%1")
      				
      		sHTMLForm = StringBuild(sHTMLForm, ConvertTextToTML(TransitionText), m_sProviderURL, sFormData)
      		MarkPayment(OrderNumber,PAYMENT_WAIT)
      		XTRACE("Paybox 3DSecure URL calls <"+m_sProviderURL+">")
      		// Displays the data
      StringDisplay(sHTMLForm, typeMimeHTML)	
      		
      		return True
      		
      	else
      		(bRequestOK,sRequestReturn) = WebRequest(<sHTTPURL>: m_sProviderURL,<sFormName>: sForm)
      		if not bRequestOK then 
      sError = sRequestReturn
      			return False
      		end
      			
      		
      		m_aaValueTab.SupprimeTout()
      		sResponseCode is string = ReadHTTPResponse("RESPONSECODE",sRequestReturn)
      		ArrayCopy(m_aaValueTab,COL_SECUREPAYMENT.IncomingParameters)
      		//COL_SECUREPAYMENT.IncomingParameters <= m_aaValueTab
      		
      		if not (sResponseCode = "00000") then 
      sError = "Paybox error code"+sResponseCode+" : "+HTMLToText(ReadHTTPResponse("COMMENT",sRequestReturn))
      			MarkPayment(OrderNumber,PAYMENT_REFUSED,"",sError)
      //			IF InTestMode() THEN			
      //				sError+=cr+"Sent: "+cr+ArrayToString(m_arrFormParameters)
      //				sError+=cr+"Received: "+cr+sRequestReturn
      ////				Trace("Request sent: "+ArrayToString(m_arrFormParameters))					
      ////				Trace("complete return: "+sRequestReturn)					
      //				stop
      //			END
      			return False		
      		else
      			//retrieve the card token number if necessary
      			if m_aaValueTab["PORTEUR"]<>"" then CardToken = m_aaValueTab["PORTEUR"]
      			//log return information
      			XTRACE("Paybox direct payment return OK:"+sRequestReturn)
      			MarkPayment(OrderNumber,PAYMENT_VALID)
      			return True
      		end
      		
      	end
      
     type : 458752
   -
     name : CreateForm
     procedure_id : 2220122836613249323
     type_code : 12
     code : |1-
      // Summary: Creates an HTTP form
      // Syntax:
      //CreateForm (<sForm> is string)
      //
      // Parameters:
      //	sForm (ANSI string): Name of the form
      // Return value:
      // 	None
      //
      procedure private CreateForm(local sForm is string)
      
      	// Creates the form
      HTTPCreateForm(sForm)
      ArrayDeleteAll(m_arrFormParameters)
      	
      	
      	// Clears the list of values
      DeleteAll(m_aaValueTab)
     type : 458752
   -
     name : OnPayBoxDirect3DSecurePaymentReturn
     internal_properties : CAAAAAgAAAAf0b9Kf5whCQF/aheCX3IfstU5QNd2+ePqsRokgssBkgtubKU64IQNZRmoIduO3LY5KG08BJM3cxl3L/2p15cVROFdFEC+D5g3JyZpakVaYdSMQAJV78dtyVvYAKsRmt9WpFgReu0vtQnVajS3grkhaixFwvVMN/A7tEaC7RI8vEWXvFpgb3S9EWLhIQ8ts/t7zRMYeEf5qluecbQc+58/2AhRpShiO5hpsQsd3rxawXKRnqnieIwP+NcK2x42Pp2p+bZcl5sabNCCcKZYUmwP3QslV3Hcy739XrbyqB8=
     procedure_id : 2220122836613314859
     type_code : 12
     code : |1-
      // Summary: Manage the PayBox 3DSecure return
      // Syntaxe :
      //[ <R√©sultat> = ] OnPayBoxDirect3DSecurePaymentReturn (<nMode> est entier, <sInformation> est cha√Æne)
      //
      // Param√®tres :
      //	nMode (entier) : <specify the role of nMode>
      //	sInformation (cha√Æne ANSI) : (output) Information about the return
      
      // Return value:
      // 	boolean: // 	None
      procedure OnPayBoxDirect3DSecurePaymentReturn(nMode is int,sInformation is string)  : boolean
      //by default
      return = False
      sParamList		is string
      //Parameters received
      IncomingParameters is ASSOCIATIVE ARRAY (WithoutDuplicates+ccIgnoreCase) of strings
      sParamList = ListIncomingParameters(<paramParametersReceived>: IncomingParameters)
      XTRACE("Paybox 3D Secure return" +sParamList)
      
      //	IdSession=88&StatusPBX=Autorisation √† faire&3DSTATUS=Y&3DSIGNVAL=Y&3DENROLLED=Y&3DERROR=0&3DECI=05&3DXID=MDAwMDAwMDAwMDAxMjM0NTY3ODk=&3DCAVV=CAACB0STOCk0WZEBGJM4AAAAAAA=
      // &3DCAVVALGO=2&ID3D=7700000028824
      // &Check=jhZVSGxgX9ZiJI0xasbh6ms5gl9YYzSKMHlWo/fOUr4B4ooJDMvFO/ykv9t2t8vzL4ZE8mpbyJQVnK8mrPJ5TWOet4GK9JiOKGHgS2ZV5K6Ep2YvyLYFMxm8K1Bbcp+MKviAsHmXXEz6fzo4iqhHdmVWpVmfBCXp+8eKTt9cehk=
      // &act=ps_retour3DS&secid=88&fpay=1
      
      // Retrieves the CC number
      CardNumber =  DecryptStandard(Decode(m_sCard_3DSTime,encodeBASE64NoCR),HashString(HA_MD5_128, "cbszi4q87q"), cryptAES256)
      
      
      //Deletes the CC number that was saved (encrypted)
      m_sCard_3DSTime=""
      UpdateObjectTransaction()
      
      //3dSecure OK ?
      if IncomingParameters["StatusPBX"]~="Authorization pending" then
      	return = True
      	//payment OK
      nMode = PAYMENT_AGREEMENT
      	XTRACE("Approval 3D Secure Paybox")
      	MarkPayment(OrderNumber, PAYMENT_AGREEMENT)
      	//save
      	//done
      	
      	//add 3DS information
      	FormParameterAdd("3DSTATUS",IncomingParameters["3DSTATUS"])
      	FormParameterAdd("3DENROLLED",IncomingParameters["3DENROLLED"])
      	FormParameterAdd("3DECI",IncomingParameters["3DECI"])
      	FormParameterAdd("3DERROR",IncomingParameters["3DERROR"])
      	FormParameterAdd("3DXID",IncomingParameters["3DXID"])
      	FormParameterAdd("3DCAVV",IncomingParameters["3DCAVV"])
      	FormParameterAdd("3DCAVVALGO",IncomingParameters["3DCAVVALGO"])
      	FormParameterAdd("3DSIGNVAL",IncomingParameters["3DSIGNVAL"])
      	//FormParameterAdd("ID3D",IncomingParameters["ID3D"])
      	
      	XTRACE("Start Paybox direct payment upon 3D secure approval")
      	Mode3DS = False //plus 3DS
      	if PayBoxPayment_Direct(m_cyAmount,DebitCard) then
      nMode = PAYMENT_VALID
      sInformation+="Payment validation"
      	else
      nMode = PAYMENT_REFUSED
      sInformation+="Payment failed. Refused despite 3D Secure approval. "+ErrorInformation
      	end
      	MarkPayment(OrderNumber, nMode)
      else	
      	XTRACE("Return Paybox 3D Secure refused: "+IncomingParameters["StatusPBX"])
      sInformation+="Paybox 3D Secure refused "+IncomingParameters["StatusPBX"]
      nMode = PAYMENT_REFUSED
      	return = True
      end
     type : 458752
   -
     name : UpdateObjectTransaction
     internal_properties : CAAAAAgAAABYA3VRhWOK0aCLH7ZuEG9qWoypHWU2me6hccKuimSVAVH5TTBMfAzvdksRaEYprD8E/33PcesJ9fcBWDFslOTfein5g+yjlkYFsp5r38Ua2RKF11wBJVfmKbEVDNrapkZY2QeFEMqa8LpwReQXmzzpTZj8aXbTd9Z3y0HXH/1Sb0rI
     procedure_id : 2220122836613380395
     type_code : 12
     code : |1-
      // Summary: Saves the transaction
      // Syntax:
      //[ <Result> = ] UpdateObjectTransaction ()
      //
      // Parameters:
      //	None
      // Return value:
      // 	Undefined type:  Identifier of the transaction
      //
      // Automatic process of exceptions:   run CASE EXCEPTION:
      //
      
      procedure private UpdateObjectTransaction()
      
      // Reset errors
      XERROR()
      
      bufTransaction is buffer
      if HReadSeekFirst(Transaction,TransactionID,m_nTransactionID) then
      	// Serializes the object
      Serialize(object, bufTransaction, psdBinary)
      	Transaction.PaymentObject = bufTransaction
      HModify(Transaction)
      	XTRACE("Update of the object in the transaction")
      	return Transaction.TransactionID
      else
      	XERROR("[UpdateObjectTransaction], transaction not found: " +m_nTransactionID)
      	
      	return -1
      end
      
      
      case exception:
      XERROR("WL_EXCEPTION [UpdateObjectTransaction]: " + ExceptionInfo)
      return -1
     type : 458752
   -
     name : URLEncodeSpaces
     procedure_id : 2220122836613445931
     type_code : 12
     code : |1+
      // Summary: URL encodes spaces
      // Syntax:
      //[ <Result> = ] URLEncodeSpaces (<sParameter> is string)
      //
      // Parameters:
      //	sParameter(ANSI string): string in which the spaces must be encoded
      // Return value:
      // 	ANSI string: string with encoded URI spaces
      //
      //
      procedure URLEncodeSpaces(sOneParameter is string) : string
      
      
      return Replace(sOneParameter," ","+")
     type : 458752
   -
     name : PaiementMoneticoPaiementOld_FromBank
     internal_properties : CAAAAAgAAABLQUeuXB+nosAq2Eudr2llu6yS8beEfmafknwR0U3v+3y50L1nweQVAfHwcWbqcyKYuKptbb3lV4oC5DAk9bm0K89LQzoxJGo49qQX37ubO83vMb7EffGXgMd9y8aCgH30YOUr6Rt6i/E/Eo9mXfoXX5AoLYx29w4xPSM1Hf9Y4gKLgf+b5dP0OORTNwK2XR+wC3hdXQ9sDLubBj6NtQ+a4Yy2ahVmaF1UD2fTPVnkvkbS
     procedure_id : 2220122836613511467
     type_code : 12
     group : 3
     code : |1-
      // Summary: Requests the payment via MoneticoPaiement BEFORE September 2019
      // Syntaxe :
      //[ <R√©sultat> = ] PaiementMoneticoPaiementOld_FromBank (<cyAmount> est mon√©taire, <sEmailAddress> est cha√Æne)
      //
      // Param√®tres :
      //	cyAmount (mon√©taire) : Amount of payment to perform
      //	sEmailAddress (cha√Æne ANSI) : Email address of the customer
      // Traitement automatique des exceptions :   ex√©cuter le bloc de code CAS EXCEPTION:
      //
      
      // Return value:
      // 	boolean:      True if the call to the payment was performed, False otherwise
      // Automatic process of exceptions:   run CASE EXCEPTION:
      procedure private PaiementMoneticoPaiementOld_FromBank(local cyAmount is currency, local sEmailAddress is string)
      
      	// Reset errors
      	XERROR()
      
      bReturn 				is boolean
      sDate					is string
      sData				is string ANSI
      sForm				is string ANSI
      sFormData		is string ANSI
      sMACCode				is string
      	
      	// Date
      sDate = DateToString(Today, "MM/DD/YYYY") + ":" + TimeToString(Now, "HH:MM:SS")
      		
      	// Describes the sending form
      sForm = StringBuild(HTML_FORM, "%2", "PaymentRequest", "%3", "%1")
      	
      sFormData += AddFormControl("version", CIC_VERSION_OLD , *, *, "")
      sFormData += AddFormControl("TPE", Contract, *, *, "")
      sFormData += AddFormControl("date", sDate, *, *, "")
      sFormData += AddFormControl("amount", NumToString(cyAmount, ".2f") + CurrencyToString(), *, *, "")
      sFormData += AddFormControl("reference", OrderNumber, *, *, "")
      sFormData += AddFormControl("texte-libre", TransitionText, *, *, "")
      sFormData += AddFormControl("email", sEmailAddress, *, *, "")
      sFormData += AddFormControl("lgue", Language, *, *, "")
      sFormData += AddFormControl("societe", CompanyCode, *, *, "")
      sFormData += AddFormControl("return_url", PaybackURL(URL_CANCEL), *, *, "")
      sFormData += AddFormControl("return_url_ok", PaybackURL(URL_OK), *, *, "")
      sFormData += AddFormControl("return_url_err", PaybackURL(URL_REFUSED), *, *, "")
      	
      	// Custom data
      	for each sValue,sControlName of m_aaParamDelPaymentForm
      		if ArraySeek(m_arrFormParameters, asLinear, "Name", sControlName) <= 0 then
      sFormData += AddFormControl(sControlName, sValue, *, *, "", True)
      		end
      	end
      	
      sData = Contract + "*" + sDate + "*" + NumToString(cyAmount, ".2f") + CurrencyToString() + "*" + OrderNumber  + "*" + TransitionText + "*" +...
      				 CIC_VERSION_OLD + "*" + Language + "*" + CompanyCode + "*" + sEmailAddress + "*" +
      RepeatString("*", 9)
      		
      	// Encodes the data
      sMACCode = EncodeMAC(sData,True,AlgorithmHash) 
      sFormData += AddFormControl("MAC", sMACCode, *, *, "")
      	
      	// Complete
      sForm = StringBuild(sForm, ConvertTextToTML(TransitionText), m_sProviderURL, sFormData)
      	XTRACE("Calls to MoneticoPaiement OLD URL <"+m_sProviderURL+">")
      	// Displays the data
      StringDisplay(sForm, typeMimeHTML)	
      	
      	// Everything is OK
      bReturn = True
      	
      return bReturn
      
      case exception:
      	XERROR("WL_EXCEPTION [CyberMutPayment]: " + ExceptionInfo)
      	return False
     type : 458752
   -
     name : OnMoneticoPaiementPaymentReturnOld
     internal_properties : CAAAAAgAAADEWast74EAKODLeWSDQ4c1P+S/zq/Mvqey8FfsKFPFuq0zqGtlPPnKpsIoBxKKc3FRriwirej6UWXIaErNOFhO7EneiLN+qAl/xvfkwZS3FOGvAM9ASNnnMOa8KyfKoiLY7+VrCGtYzdArVTEQZlviel+MKa/gxZMvqRif3CZe76vSK3X6NWQcY5NlxuIJp7JD6+24S0LWcLRkihSyjiaNrPeUzLQG24nTfoU6yySNXLw+L04ITqCUGjZUrKHLTG5z3gdKOlBhO2ad+Uw4a0NdQ1oEBw89PqNest+RkcEr
     procedure_id : 2220122836613577003
     type_code : 12
     group : 3
     code : |1-
      // Summary: Manage the MoneticoPaiement return
      // Syntax:
      //[ <Result> = ] OnMoneticoPaiementPaymentReturnOld (<sAction> is string, <nMode> is int, <sInformation> is string)
      //
      // Parameters:
      //	sAction (ANSI string): value among	URL_S2S, URL_CANCEL, URL_REFUSED, URL_OK
      //	nMode (integer): (output) Return mode
      //	sInformation (ANSI string): (output) Information about the return management
      // Return value:
      // 	boolean:         True if the return was managed, False otherwise
      //
      procedure public OnMoneticoPaiementPaymentReturnOld(sAction is string,nMode is int, sInformation is string)
      
      	// Reset errors
      	XERROR()
      	
      sData		is string
      sMACKey			is string
      sHTTPHeader		is string
      	
      	if sAction <> URL_S2S then
      		// Retrieves the TOKEN and checks it
      		if not TokenCheck("prvtk", nMode, sInformation) then return False
      		switch sAction
      			case URL_CANCEL
      nMode=PAYMENT_CANCELED
      			case URL_OK
      nMode=PAYMENT_VALID
      			other case //CASE URL_REFUSED
      nMode=PAYMENT_REFUSED
      		end
      	else
      		//S2S return 
      
      		// Check the issuer IP
      		// For the calls from servers to servers (URL called "Direct HTTP")
      		if not BankServerCheckAddress(nMode, sInformation)	 then
      			return False
      		end
      
      				// Regenerates the data received by the bank
      sData = PageParameter("TPE") +"*"+ PageParameter("date")+"*" +PageParameter("amount")+"*"+PageParameter("reference")+"*"+PageParameter("texte-libre")+"*"+CIC_VERSION_OLD+"*"+PageParameter("code-retour")+"*" +...
      PageParameter("cvx") + "*" + PageParameter("vld") + "*" + PageParameter("brand")+ "*" + PageParameter("status3ds")+ "*" + PageParameter("numauto")+ "*" +...
      PageParameter("motifrefus")+ "*" + PageParameter("originecb")+ "*" + PageParameter("bincb")+ "*" + PageParameter("hpancb")+ "*" + PageParameter("ipclient")+ "*" + 
      PageParameter("originetr")+ "*" + PageParameter("veres")+ "*" + PageParameter("pares")+"*"
      			
      		// Creates the MAC key
      sMACKey = EncodeMAC(sData,True,AlgorithmHash)
      		
      		// If the MAC key differs from the one received in parameter, then the payment is forged
      		if not sMACKey ~= PageParameter("MAC") then
      			
      			// Saves as being forged
      nMode = PAYMENT_FORGED	
      sInformation += [CR] + StringBuild("The MAC key does not correspond (Calculated key: %1; Key received: %2, data: %3", sMACKey, PageParameter("MAC"),sData)
      			XERROR(sInformation)
      		end	
      			
      			if nMode = PAYMENT_FORGED then
      				
      				//bufHTTPHeader += "Forged document"				
      sHTTPHeader = [
      				version=2
      				cdr=1
      				
      				]
      				// Sends the acknowledgement of receipt not OK to the CM-CIC server
      StringDisplay(sHTTPHeader, "text/plain")
      				return False
      			else
      				// Overloads the return mode according to the specified return code
      				switch Lower(PageParameter("code-retour"))
      					case "payetest"
      nMode = PAYMENT_VALID
      						
      					case "paiement"
      nMode = PAYMENT_VALID				
      						
      					case "annulation"
      nMode = PAYMENT_CANCELED
      				end
      			end
      			
      	end
      	
      return True
     type : 458752
   -
     name : MoneticoPrepareSignature
     internal_properties : CAAAAAgAAACYqlyWM2x0iBZfdMQ0dB6TtGg1HI8V0QRRpB6LWyXgxBAxLTam5VPvt/krLBEeDNZ1DPx5n7gBg/Kse4bJHBwWa3lVNQC5bM01WkDUBlXli20fdkYVfGhEv7C1InkgDZt4evJo3CWgjDlg9YVI4pbCao3y9QorMwkXEJ3qAU5rW0OSkWl1uLVfQdIuzlj5CQXFiUgFPQ==
     procedure_id : 2220122836613642539
     type_code : 12
     code : |1-
      // Summary: <specify the action of the procedure>
      // Syntax:
      //[ <Result> = ] MoneticoPrepareSignature (<arrParameters> is array)
      //
      // Parameters:
      //	arrParameters (array): <specify the role of arrParameters>
      // Return value:
      // 	ANSI string: // 	None
      //
      // Example:
      // Indicate an example.
      //
      procedure MoneticoPrepareSignature(local arrParameters		is array of FormParameter) :  string ANSI
      
      sDataToEncode is string ANSI
      
      
      //The data to certify is: 
      //			¬∑  as Control_name=Control_value, 
      //			¬∑  with the elements of the series separated by " * ", 
      //			¬∑  sorted in alphabetical order 
      ArraySort(arrParameters,asMember,"+LastName")
      //			
      //			In a call to a Monetico Paiement service, the seal must take into account all the 
      //			parameters sent - valued or not - recognized by the platform, and only these parameters. 
      //			When verifying the seal on the "Return" interface, all the parameters are taken into account. 
      //				Remark: 
      //				The order used is based on the ASCII code. It is case-sensitive: 
      //				¬∑  first, digits from 0 to 9, 
      //				¬∑  then, UPPERCASE characters, 
      //				¬∑  lastly, lowercase characters. 
      //				For special characters, see ASCII table 
      
      
      for each stAParameter of arrParameters
      	if stAParameter.Name<>"MAC" then
      sDataToEncode +=["*"]+stAParameter.Name+"="+stAParameter.Value		
      	end
      end
      
      return sDataToEncode
     type : 458752
   -
     name : RetrieveParametersReceived
     procedure_id : 2220122836613708075
     type_code : 12
     code : |1-
      // Summary: <specify the action of the procedure>
      // Syntax:
      // RetrieveParametersReceived ()
      //
      // Parameters:
      //	None
      // Return value:
      // 	None
      //
      // Example:
      // Indicate an example.
      //
      procedure RetrieveParametersReceived()
      
      // Regenerates the list of parameters received
      nParameterSubscript 	is int
      AParameterInString is string
      stAParameter 		is FormParameter
      
      ArrayDeleteAll(m_arrFormParameters)
      nParameterSubscript=1
      loop
      AParameterInString = PageParameter(nParameterSubscript)
      	if AParameterInString ~= "" then break
      	stAParameter.Name = ExtractString(AParameterInString, 1, "=")
      	stAParameter.Value = AParameterInString[[Length(stAParameter.Name) + 2 to]]
      	
      ArrayAdd(m_arrFormParameters, stAParameter)
      	
      nParameterSubscript++
      end
     type : 458752
  properties :
   -
     name : Supplier
     identifier : 0x1ecf75f50970b92b
     type_code : 103
     p_codes :
      -
        code : |1-
         Proc√©dure Supplier()
         
         	// Reset errors
         	XERROR()
         
         return m_nSupplier
        type : 1966080
      -
        code : |1+
         PROC√âDURE Supplier(LOCAL nSupplier is unsigned int)
         
         // Reset errors
         XERROR()
         
         SWITCH True 
         
         	// Checks whether the provider is correct		
         	CASE (nSupplier & Lyra) = Lyra , nSupplier=CaisseEpargne,nSupplier=Systempay_old// For a supplier based on Lyra
         		//OK but nothing special to do
         		
         	CASE (nSupplier & MoneticoPaiementOld) = MoneticoPaiementOld // For a supplier based on MoneticoPaiement BEFORE September 2019
         		//OK but nothing special to do			
         		
         	CASE (nSupplier & MoneticoPaiement) = MoneticoPaiement // For a supplier based on MoneticoPaiement
         		//OK but nothing special to do			
         		
         	CASE nSupplier IN (PayBox, PayPal, BanquePopulaire, OgoneECommerce,DataCash_Mastercard,Saferpay,Datatrans,Realex)
         		//OK but nothing special to do
         		
         	CASE (nSupplier & SIPS2) = SIPS2 // For a supplier based on SIPS 2
         		//OK but nothing special to do
         		
         	CASE (nSupplier & Atos) = Atos // For a provider based on ATOS
         		// Path of the API
         		IF InLinuxMode() THEN
         			m_sProviderURL = COL_SECUREPAYMENT.gsSiteDirectories + [fSep]+"ATOS_Linux"+ [fSep] + m_sEXE_ATOSResponse
         		ELSE	
         			m_sProviderURL = COL_SECUREPAYMENT.gsSiteDirectories + [fSep] +"ATOS_Windows"+ [fSep]+ m_sEXE_ATOSResponse
         		END
         		IF fFileExist(m_sProviderURL) = False THEN
         			
         			// Triggers an error
         			XERROR("<"+m_sProviderURL+"> was not found."+"You have the ability to change the name of this module via the 'ExeATOSReponse' property of the SecurePayment class")
         			StringDisplayHTML(m_sErrorInfo)
         		END
         		
         		
         		
         	// Delayed load mode
         	CASE nSupplier = 0xffff
         		
         	OTHER CASE
         		
         		// Triggers an error
         		ExceptionThrow(1, XERROR("Supplier <"+nSupplier+"> incorrect "+dbgInfo(dbgStack)))
         END
         
         // Keeps the value
         m_nSupplier = nSupplier
         
         BuildProviderURL()
         
         // Redefines the dependent parameters
         Simulation = m_nSimulation
         
         IF m_sLanguage <> "" THEN
         	Language = m_sLanguage
         END
        type : 2031616
     template_refs : []
   -
     name : Simulation
     identifier : 0x1ecf75f50971b92b
     type_code : 103
     p_codes :
      -
        code : |1-
         procedure Simulation()
         
         	// Reset errors
         	XERROR()
         	
         return m_nSimulation
        type : 1966080
      -
        code : |1-
         procedure Simulation(local nRealModeTestOrSimulation is int)
         
         	// Keeps the value
         	m_nSimulation = nRealModeTestOrSimulation
         		
         	BuildProviderURL()
        type : 2031616
     template_refs : []
   -
     name : CurrencyCode
     identifier : 0x1ecf75f50972b92b
     type_code : 103
     p_codes :
      -
        code : |1-
         procedure CurrencyCode()
         
         	// Reset errors
         	XERROR()
         	
         return m_sCurrency
        type : 1966080
      -
        code : |1-
         procedure CurrencyCode(local paramCurrency)
         
         	// Reset errors
         	XERROR()
         
         	if Supplier = BanquePopulaire _and_ paramCurrency <> eEUR then
         		ExceptionThrow(1, XERROR("The authorized currency is EUR (eEur)"))
         		return
         	end
         
         	// Keeps the value
         	m_sCurrency = paramCurrency		
        type : 2031616
     template_refs : []
   -
     name : Language
     identifier : 0x1ecf75f50973b92b
     type_code : 103
     p_codes :
      -
        code : |1-
         procedure Language()
         
         	// Reset errors
         	XERROR()
         	
         return m_sLanguage
        type : 1966080
      -
        code : |1-
         procedure Language(local sLanguage is string)
         
         	// Reset errors
         	XERROR()
         
         	
         	// Checks whether the language is correct
         	if sLanguage = "" then
         		
         		// Triggers an error
         		ExceptionThrow(1, XERROR("Language assigned to empty, which is incorrect"))
         	else
         
         		switch True
         			case Supplier = PayBox
         				
         				// Checks whether the language is correct
         				if not sLanguage in ("FRA", "GBR", "DEU") then
         					
         					XERROR("Incorrect language (authorized values: FRA,GBR,DEU")
         					
         					// Default language
         					sLanguage = "FRA"
         				end	
         				
         				break switch
         				
         			case (Supplier & MoneticoPaiement) = MoneticoPaiement
         				
         				// Checks whether the language is correct
         				if not sLanguage in ("FR", "EN", "DE", "IT", "ES", "NL") then
         					
         					XERROR("Incorrect language (authorized values: FR,EN,DE,IT,ES,NL")
         					
         					// Default language
         					sLanguage = "FR"
         				end				
         				
         				break switch
         			case (Supplier & MoneticoPaiementOld) = MoneticoPaiementOld
         				
         				// Checks whether the language is correct
         				if not sLanguage in ("FR", "EN", "DE", "IT", "ES", "NL") then
         					
         					XERROR("Incorrect language (authorized values: FR,EN,DE,IT,ES,NL")
         					
         					// Default language
         					sLanguage = "FR"
         				end				
         				
         				break switch
         				
         			case (Supplier & SIPS2) = SIPS2 // For a supplier based on SIPS 2
         				sLanguage = Upper(sLanguage)
         				
         				// Default language
         				if sLanguage~="" then
         					sLanguage = "FR"
         				
         				end
         			
         			case (Supplier & Atos) = Atos
         				
         				if not sLanguage in ("FR", "GE", "EN", "SP", "IT") then
         					
         					XERROR("Incorrect language (authorized values: FR,EN,GE,IT,SP")
         					
         					// Default language
         					sLanguage = "FR"
         				end
         				
         			case Supplier = Datatrans
         				if sLanguage ~="" then
         					
         					XERROR("Incorrect language (authorized values: de,en,fr,it,es,el,no,da,pl,pt")
         					
         					// Default language
         					sLanguage = "fr"
         				end
         			case Supplier = PayPal
         				
         				if sLanguage ~="" then
         					
         					XERROR("Incorrect language (authorized values: AU,DE,FR,GB,IT,ES,US")
         					
         					// Default language
         					sLanguage = "FR"
         				end
         								
         			case Supplier = BanquePopulaire
         				
         				if not sLanguage = "FR" then
         										
         					XERROR("Incorrect language (authorized value: FR")
         					
         					// Default language
         					sLanguage = "FR"
         				end
         				
         			case Supplier = OgoneECommerce
         				
         				if not sLanguage in ("fr_FR", "en_US", "nl_NL", "nl_BE", "it_IT", "de_DE", "es_ES", "no_NO", "tr_TR") then
         					
         					XERROR("Incorrect language (authorized value: fr_FR, en_US, nl_NL, nl_BE, it_IT, de_DE, es_ES, no_NO, tr_TR")
         					
         					sLanguage = "fr_FR"
         				end
         			
         			case (Supplier & Lyra) = Lyra, Supplier = Systempay_old, Supplier = CaisseEpargne
         				
         				if not Lower(sLanguage) in ("de", "en", "zh", "es", "fr", "it", "jp", "pt") then
         					
         					XERROR("Incorrect language (authorized value: de, en, zh, es, fr, it, jp, pt")
         					
         					sLanguage = "fr"	
         				else
         					sLanguage = Lower(sLanguage)
         				end	
         			
         			case Supplier = Saferpay
         				if sLanguage ~="" then
         					sLanguage = "fr"
         				end
         		
         		case Supplier = DataCash_Mastercard
         			
         			if  Lower(sLanguage)~="" then
         				sLanguage = "fr_FR"
         			end	
         	end
         		// Keeps the value
         		m_sLanguage = sLanguage		
         	end
        type : 2031616
     template_refs : []
   -
     name : Contract
     identifier : 0x1ecf75f50974b92b
     type_code : 103
     p_codes :
      -
        code : |1-
         procedure Contract()
         
         	// Reset errors
         	XERROR()
         	
         return m_sContract
        type : 1966080
      -
        code : |1-
         procedure Contract(local Value)
         
         	// Reset errors
         	XERROR()
         
         	// Checks the TPE contract number for CyberMut
         	if ((Supplier & MoneticoPaiementOld) =MoneticoPaiementOld  _and_ Length(Value) < 7) then
         		
         		// Triggers an error
         		ExceptionThrow(1, XERROR("Invalid contract number"))
         	else
         		
         		// Keeps the value
         		m_sContract = Value		
         	end	
        type : 2031616
     template_refs : []
   -
     name : CompanyCode
     identifier : 0x1ecf75f50975b92b
     type_code : 103
     p_codes :
      -
        code : |1-
         procedure CompanyCode()
         
         	// Reset errors
         	XERROR()
         	
         return m_sIdentifier
        type : 1966080
      -
        code : |1-
         procedure CompanyCode(local Value)
         
         	// Reset errors
         	XERROR()
         
         	if (Supplier = BanquePopulaire _and_ Length(Value) < 6) then
         		ExceptionThrow(1, "Invalid subscriber number")
         		return
         	end
         	
         	// Keeps the value
         	m_sIdentifier = Value
        type : 2031616
     template_refs : []
   -
     name : Rang
     identifier : 0x1ecf75f50976b92b
     type_code : 103
     p_codes :
      -
        code : |1-
         procedure Rang()
         
         	// Reset errors
         	XERROR()
         
         return m_sRang
        type : 1966080
      -
        code : |1-
         procedure Rang(local Value)
         
         	// Reset errors
         	XERROR()
         
         	// Keeps the value
         	m_sRang = Value
        type : 2031616
     template_refs : []
   -
     name : TransitionText
     identifier : 0x1ecf75f50977b92b
     type_code : 103
     p_codes :
      -
        code : |1-
         procedure TransitionText()
         
         	// Reset errors
         	XERROR()
         
         return m_sFreeText
        type : 1966080
      -
        code : |1-
         Proc√©dure TransitionText(local Value)
         
         	// Reset errors
         	XERROR()
         
         	// Keeps the value
         	m_sFreeText = Value
        type : 2031616
     template_refs : []
   -
     name : Keyphrase
     identifier : 0x1ecf75f50978b92b
     type_code : 103
     p_codes :
      -
        code : |1-
         procedure Keyphrase()
         
         	// Reset errors
         	XERROR()
         
         return m_sKeyphrase
        type : 1966080
      -
        code : |1-
         procedure Keyphrase(local sKeyphrase is string)
         
         	// Reset errors
         	XERROR()
         
         	// Keeps the value
         	m_sKeyphrase = sKeyphrase
        type : 2031616
     template_refs : []
   -
     name : CalculatedKey
     identifier : 0x1ecf75f50979b92b
     type_code : 103
     p_codes :
      -
        code : |1-
         procedure CalculatedKey()
         
         	// Reset errors
         	XERROR()
         
         return m_sCalculatedKey
        type : 1966080
      -
        code : |1-
         Proc√©dure CalculatedKey(local sCalculatedKey est une chaine)
         
         	// Reset errors
         	XERROR()
         
         	// Keeps the value
         	m_sCalculatedKey = sCalculatedKey
        type : 2031616
     template_refs : []
   -
     name : OrderNumber
     identifier : 0x1ecf75f5097ab92b
     type_code : 103
     p_codes :
      -
        code : |1-
         procedure OrderNumber()
         
         	// Reset errors
         	XERROR()
         
         return m_sOrderNumber
        type : 1966080
      -
        code : |1-
         procedure OrderNumber(local Value)
         
         	// Reset errors
         	XERROR()
         
         	if Value in ("", 0) then
         		
         		ExceptionThrow(1, XERROR("Order number received: <"+Value+">. Invalid order number"))
         	else
         		
         		// Keeps the value
         		m_sOrderNumber = Value		
         	end
        type : 2031616
     template_refs : []
   -
     name : OnPaymentCancelation
     identifier : 0x1ecf75f5097bb92b
     type_code : 103
     p_codes :
      -
        code : |1-
         procedure OnPaymentCancelation()
         	
         	// Reset errors
         	XERROR()
         
         return m_sActPaiementCancelation
        type : 1966080
      -
        code : |1-
         procedure OnPaymentCancelation(local sPaymentAction is string)
         
         	// Reset errors
         	XERROR()
         
         	// Keeps the value
         	m_sActPaiementCancelation = sPaymentAction
        type : 2031616
     template_refs : []
   -
     name : OnPaymentRefusal
     identifier : 0x1ecf75f5097cb92b
     type_code : 103
     p_codes :
      -
        code : |1-
         procedure OnPaymentRefusal()
         	
         	// Reset errors
         	XERROR()
         
         return m_sActPaiementRefused
        type : 1966080
      -
        code : |1-
         procedure OnPaymentRefusal(local sPaymentAction is string)
         
         	// Reset errors
         	XERROR()
         
         	// Keeps the value
         	m_sActPaiementRefused = sPaymentAction
        type : 2031616
     template_refs : []
   -
     name : OnPaymentValidation
     identifier : 0x1ecf75f5097db92b
     type_code : 103
     p_codes :
      -
        code : |1-
         procedure OnPaymentValidation()
         
         	// Reset errors
         	XERROR()
         
         return m_sActPaiementAccepted
        type : 1966080
      -
        code : |1-
         procedure OnPaymentValidation(local sPaymentAction is string)
         
         	// Reset errors
         	XERROR()
         
         	// Keeps the value
         	m_sActPaiementAccepted = sPaymentAction
        type : 2031616
     template_refs : []
   -
     name : ErrorInformation
     identifier : 0x1ecf75f5097eb92b
     type_code : 103
     p_codes :
      -
        code : |1-
         procedure ErrorInformation()
         return m_sErrorInfo
        type : 1966080
      -
        internal_properties : CAAAAAgAAAB3wPmZaloHrfCv1KfQhEUZByFpe2/GRndlJTtVmi1S9480L0ebKvx9hLKfFlqFDFdErjj325rMOX8oqEFk32smSACgNhQIbm/pHlO05M/3LcYrfjTTd7u0nrIlptlB7SuiluBoskxvU6WaZzqZUVP4AFDUK8uGx2Eo64JxaEyksbsMONg8h4eAef6WjylrGnBqyIf+E2EykRwHW4Ose3Namz79zjPS3DNhEKY1EdE3jZQp2UgkcPSvYFyniaDuxkr8c4w+1yrhrzhsSkycuXStgpUKXVtZ/hRyfCd3PJhCjWUdF5Q3z9dxd1wcM8CSd0tt/wLBSZZf8KVO5g==
        code : |1-
         procedure ErrorInformation(Value <useful>)
         
         ExceptionThrow(1, "The ErrorInfo property is accessible in read-only")
        type : 2031616
     template_refs : []
   -
     name : PathFile
     identifier : 0x1ecf75f5097fb92b
     type_code : 103
     p_codes :
      -
        code : |1-
         procedure PathFile()
         
         	// Normalizes the path
         	m_sPathFile = fSeparator(m_sPathFile, fSeparatorPlatform)	
         	
         return m_sPathFile
        type : 1966080
      -
        code : |1-
         procedure PathFile(local sDirectory is string)
         
         	// Reset errors
         	XERROR()
         
         sDirectory = fSeparator(sDirectory, fSeparatorPlatform)
         
         	// Checks whether the directory is correct
         	if fDirectoryExist(sDirectory) = False then
         		XERROR(StringBuild(<¬ß$0002¬ß>, sDirectory))
         		StringDisplayHTML(m_sErrorInfo)
         	else		
         		// Keeps the value		
         		<IF CibleEx√©cution=Windows>
         			m_sPathFile = fShortPath(sDirectory)
         		<ELSE>		
         			m_sPathFile = sDirectory
         		<FIN>
         		//are there still spaces despite "fShortPath"?
         		if Position(m_sPathFile," ")>0 then
         			//Yes, so the file system does not manage short names
         			XERROR(StringBuild(<¬ß$0004¬ß>, sDirectory))
         			StringDisplayHTML(m_sErrorInfo)
         		end
         	end
        type : 2031616
     template_refs : []
   -
     name : FolderWebLogo
     identifier : 0x1ecf75f50980b92b
     type_code : 103
     p_codes :
      -
        code : |1-
         procedure FolderWebLogo()
         
         	// Reset errors
         	XERROR()
         	
         	if m_sLogoLocation = "" then
         		return ["/"] + FolderWeb() + ["/"] + (InComponentMode ? "SecurePayment/ATOS/" else "ATOS/")
         	else
         		return ["/"] + m_sLogoLocation + ["/"]
         	end
        type : 1966080
      -
        code : |1-
         procedure FolderWebLogo(local sWebPath is string)
         
         	// Reset errors
         	XERROR()
         
         	// Keeps the value
         	m_sLogoLocation = sWebPath
        type : 2031616
     template_refs : []
   -
     name : PayPalIdentifier
     identifier : 0x1ecf75f50981b92b
     type_code : 103
     p_codes :
      -
        code : |1-
         procedure PayPalIdentifier()
         
         	// Reset errors
         	XERROR()
         	
         return m_sContract
        type : 1966080
      -
        code : |1-
         procedure PayPalIdentifier(local Value)
         
         	// Reset errors
         	XERROR()
         
         	// Keeps the value
         	m_sContract = Value
        type : 2031616
     template_refs : []
   -
     name : PayPalSignature
     identifier : 0x1ecf75f50982b92b
     type_code : 103
     p_codes :
      -
        code : |1-
         procedure PayPalSignature()
         
         	// Reset errors
         	XERROR()
         
         return m_sCalculatedKey
        type : 1966080
      -
        code : |1-
         procedure PayPalSignature(local Value)
         
         	// Reset errors
         	XERROR()
         
         	// Keeps the value
         	m_sCalculatedKey = Value
        type : 2031616
     template_refs : []
   -
     name : PayPalPassword
     identifier : 0x1ecf75f50983b92b
     type_code : 103
     p_codes :
      -
        code : |1-
         procedure PayPalPassword()
         
         	// Reset errors
         	XERROR()
         
         return m_sIdentifier
        type : 1966080
      -
        code : |1-
         procedure PayPalPassword(local Value)
         
         	// Reset errors
         	XERROR()
         
         	// Keeps the value
         	m_sIdentifier = Value
        type : 2031616
     template_refs : []
   -
     name : SubscriberNumber
     identifier : 0x1ecf75f50984b92b
     type_code : 103
     p_codes :
      -
        code : |1-
         procedure SubscriberNumber()
         	
         	// Reset errors
         	XERROR()
         
         return CompanyCode
        type : 1966080
      -
        code : |1-
         procedure SubscriberNumber(local vSubscriberNumber)
         	
         	// Reset errors
         	XERROR()
         
         	CompanyCode = vSubscriberNumber
        type : 2031616
     template_refs : []
   -
     name : OgoneUserID
     identifier : 0x1ecf75f50985b92b
     type_code : 103
     p_codes :
      -
        code : |1-
         procedure OgoneUserID()
         
         	// Reset errors
         	XERROR()
         
         return m_sOgoneUserID
        type : 1966080
      -
        code : |1-
         procedure OgoneUserID(local sUserID is string)
         
         	// Reset errors
         	XERROR()
         
         	// Keeps the value
         	m_sOgoneUserID = sUserID
        type : 2031616
     template_refs : []
   -
     name : OnServerCall
     identifier : 0x1ecf75f50986b92b
     type_code : 103
     p_codes :
      -
        code : |1-
         procedure OnServerCall()
         
         	// Reset errors
         	XERROR()
         
         return m_sActServerCall
        type : 1966080
      -
        code : |1-
         procedure OnServerCall(local sPaymentAction is string)
         	
         	// Reset errors
         	XERROR()
         	
         	// Keeps the value
         	m_sActServerCall = sPaymentAction
        type : 2031616
     template_refs : []
   -
     name : PageReturnServerToServer
     identifier : 0x1ecf75f50987b92b
     type_code : 103
     p_codes :
      -
        code : |1-
         procedure PageReturnServerToServer()
         
         	// Reset errors
         	XERROR()
         
         return m_sPayBackPage
        type : 1966080
      -
        internal_properties : CAAAAAgAAACN9ecfcX1C/QwTLgd3w08YVuGDeLYoqg+DyTS9wbxl6eS1IkO3Yf7bB4akjwb/nJEIElSN1YLP1wLCQstOfDpJcGpwfw4DWIPl7a6XE57FZmj0In+vA2bHcrmCbcRexrAQfu+s1uRAeWk+rpxg33zCVZ/DwTESxFZJGqCpbndRfcvvnYjMKV+Q8Hvf057jZwWsboohK8pLQALf1bd/mUqYXojK+j5F52Of1+WqZWBh5On+fzJ83IOE
        code : |1-
         procedure PageReturnServerToServer(sPageName)
         
         	// Reset errors
         	XERROR()
         
         	// Checks whether it's a full URL
         	if sPageName [= "http:" _or_ sPageName [= "https:" _or_ sPageName [= "HTTP:" _or_ sPageName [= "HTTPS:" then
         		
         		// It's a full URL
         		m_sPayBackPage = NoSpace(sPageName)
         		
         	// Checks whether it's a relative URL
         	else 
         		// It's a relative URL or the name of the page
         		m_sPayBackPage = URLCurrentDomain() + ["/"] + FolderWeb() + ["/"] + LanguageToDirectory() + ["/"] + NoSpace(sPageName)
         		//extension OK?
         		if Upper(Right(m_sPayBackPage,4))<>".AWP" then
         			//Add the extension
         			m_sPayBackPage+=".awp"		
         		end	
         	end
         	
         sTestUrl is string = m_sPayBackPage
         sListParameters is string
         	
         	if Position(sTestUrl,"?")>0 then
         sListParameters=sTestUrl[[Position(sTestUrl,"?")+1 to]]+"&"+sListParameters+"&TEST=O"
         sTestUrl=sTestUrl[[to Position(sTestUrl,"?")-1]]
         	else
         sListParameters="TEST=O"
         	end
         	
         	//test of the page
         sResultHTMLTest is string
         	//if we are not on a "localhost" address, check the access to the page for returning from server to server
         	if not IgnoreTestReturnPage _and_ Position(m_sPayBackPage,"localhost",0,IgnoreCase)<1 then
         		
         		bResOK is boolean
         		(bResOK,sResultHTMLTest) = WebRequest(<sHTTPURL>: m_sPayBackPage+["?"]+sListParameters,<nMethod>: httpGet)
         		
         		
         		if not (bResOK _and_ sResultHTMLTest~~ "OK") then
         sResultHTMLTest=StringFormat(ConvertHTMLToText(sResultHTMLTest),ccIgnoreAccent+ccIgnorePunctuationAndSpace)
         		end
         	else
         		//in localhost, consider that it is OK
         sResultHTMLTest="OK"
         	end
         	
         	if not sResultHTMLTest~~ "OK"  then
         		sDomain is string	
         		sDomain=ExtractString(ExtractString(m_sPayBackPage,2,"//"),1,"/")
         		
         		sDirectoryHostFile is string
         		
         		
         
         <if CibleEx√©cution=SiteWindows>
         		
         		sDirectoryHostFile = "(" + CompleteDir(SysDir(srSystem) + ["\"] + "drivers\etc\hosts") + ")"
         	
         <else if CibleEx√©cution=SiteLinux>
         	
         	sDirectoryHostFile = ""
         	
         <end>
         
         			
         		DisplayStringInHTML(StringBuild([
         			The return page <%1> did not return the expected result. Check the assignment of 'clPayment.ReturnPageServerToServer'.
         			Make sure that the computer can address the <%2> server, add (if necessary) the domain into the hosts file %3
         			In case of problem about address resolution or domain name resolution on the server, you have the ability to disable the test of this page by assigning 'clPayment.IgnoreTestReturnPage' to True 
         			
         			This URL must respond OK in a browser ON THE SERVER : 
         			 %1
         			
         			Instead of <OK>, the following data was currently retrieved: 
         			<%4>
         			],m_sPayBackPage+["?"]+sListParameters,
         				sDomain,
         				sDirectoryHostFile,sResultHTMLTest))
         	end
        type : 2031616
     template_refs : []
   -
     name : CheckPayBoxSignature
     identifier : 0x1ecf75f50988b92b
     type_code : 103
     p_codes :
      -
        code : |1-
         procedure CheckPayBoxSignature()
         
         	// Reset errors
         	XERROR()
         
         return m_bCheckPayBoxSignature
        type : 1966080
      -
        code : |1-
         procedure CheckPayBoxSignature(bValue is boolean)
         
         	// Reset errors
         	XERROR()
         
         		
         	m_bCheckPayBoxSignature = bValue
        type : 2031616
     template_refs : []
   -
     name : MACKey
     identifier : 0x1ecf75f50989b92b
     type_code : 103
     p_codes :
      -
        code : |1-
         procedure MACKey()
         
         	// Reset errors
         	XERROR()
         
         return m_sMACKey
        type : 1966080
      -
        code : |1-
         procedure MACKey(sValueMACKey)
         
         	// Reset errors
         	XERROR()
         
         	m_sMACKey = sValueMACKey
         
         	m_sCalculatedKey = getUsableKey(sValueMACKey)
        type : 2031616
     template_refs : []
   -
     name : SentenceKeyOut
     identifier : 0x1ecf75f5098ab92b
     type_code : 103
     p_codes :
      -
        code : |1-
         procedure SentenceKeyOut()
         
         	// Reset errors
         	XERROR()
         
         return m_sSentenceKeyOut
        type : 1966080
      -
        code : |1-
         procedure SentenceKeyOut(local sKeyphrase is string)
         
         	// Reset errors
         	XERROR()
         	
         	// Keeps the value
         	m_sSentenceKeyOut = sKeyphrase
        type : 2031616
     template_refs : []
   -
     name : TransactionID
     identifier : 0x1ecf75f5098bb92b
     type_code : 103
     p_codes :
      -
        code : |1-
         procedure TransactionID()
         
         	// Reset errors
         	XERROR()
         
         return m_sTransactionIdentifier
        type : 1966080
      -
        code : |1-
         procedure private TransactionID(v <useful>)
         
         ExceptionThrow(1, "<IdTransaction> property in read-only")
        type : 2031616
     template_refs : []
   -
     name : VariousCustomize
     identifier : 0x1ecf75f5098cb92b
     type_code : 103
     p_codes :
      -
        code : |1-
         procedure VariousCustomize()
         
         	// Reset errors
         	XERROR()
         
         return m_sVariousCustomize
        type : 1966080
      -
        code : |1-
         procedure VariousCustomize(sVariousCustomize)
         
         	// Reset errors
         	XERROR()
         
         	m_sVariousCustomize = sVariousCustomize
        type : 2031616
     template_refs : []
   -
     name : SiteIdentifier
     identifier : 0x1ecf75f5098db92b
     type_code : 103
     p_codes :
      -
        code : |1-
         procedure SiteIdentifier()
         
         	// Reset errors
         	XERROR()
         
         return m_sIdentifier
        type : 1966080
      -
        code : |1-
         procedure SiteIdentifier(Value)
         
         	// Reset errors
         	XERROR()
         
         	m_sIdentifier = Value
        type : 2031616
     template_refs : []
   -
     name : Certificate
     identifier : 0x1ecf75f5098eb92b
     type_code : 103
     p_codes :
      -
        code : |1-
         procedure Certificate()
         
         	// Reset errors
         	XERROR()
         
         return m_sContract
        type : 1966080
      -
        code : |1-
         procedure Certificate(Value)
         
         	// Reset errors
         	XERROR()
         	
         	m_sContract=Value
        type : 2031616
     template_refs : []
   -
     name : SettingEXE_ATOSRequest
     identifier : 0x1ecf75f5098fb92b
     type_code : 103
     p_codes :
      -
        code : |1-
         procedure SettingEXE_ATOSRequest()
         
         	// Reset errors
         	XERROR()
         
         return m_sEXE_ATOSRequest
        type : 1966080
      -
        code : |1-
         procedure SettingEXE_ATOSRequest(sNewName)
         
         	// Reset errors
         	XERROR()
         
         	m_sEXE_ATOSRequest = sNewName
         	BuildProviderURL()
        type : 2031616
     template_refs : []
   -
     name : ConfigurePayBoxServers
     identifier : 0x1ecf75f50990b92b
     type_code : 103
     p_codes :
      -
        code : |1-
         procedure ConfigurePayBoxServers()
         
         	// Reset errors
         	XERROR()
         
         return m_arrPayboxServers
        type : 1966080
      -
        code : |1-
         procedure ConfigurePayBoxServers(arrPayboxServers is array of strings)
         
         	// Reset errors
         	XERROR()
         
         
         	m_arrPayboxServers = arrPayboxServers
         
         	BuildProviderURL()
        type : 2031616
     template_refs : []
   -
     name : PageBackToStore
     identifier : 0x1ecf75f50991b92b
     type_code : 103
     p_codes :
      -
        code : |1-
         procedure PageBackToStore()
         
         	// Reset errors
         	XERROR()
         
         return m_sPageBackToStore
        type : 1966080
      -
        internal_properties : CAAAAAgAAAAzBSpRiS93Rs9c7ypED+Apw91cLIhNs/ufEhPguCWP3+FMTjgDoLH9+LOT5OjGzd7XOorA4DS6fAZFcGUY2Ka8dYm8I7000JAstqpEjhog8tNhwJsyM15/SJAV7M+pH4ydTS/5mqyaenxej9Q=
        code : |1-
         procedure PageBackToStore(sPageName)
         
         	// Reset errors
         	XERROR()
         
         	// Checks whether it's a full URL
         	if sPageName [= "http:" _or_ sPageName [= "https:" _or_ sPageName [= "HTTP:" _or_ sPageName [= "HTTPS:" then
         		
         		// It's a full URL
         		m_sPageBackToStore = NoSpace(sPageName)
         		
         		// Checks whether it's a relative URL
         	else 
         		// It's a relative URL or the name of the page
         		m_sPageBackToStore = URLCurrentDomain() + ["/"] + FolderWeb() + ["/"] + LanguageToDirectory() +["/"]+ NoSpace(sPageName)
         		// extension OK?
         		if Upper(Right(m_sPageBackToStore,4))<>".AWP" then
         			//Add the extension
         			m_sPageBackToStore+=".awp"		
         		end	
         	end
        type : 2031616
     template_refs : []
   -
     name : SettingEXE_ATOSResponse
     identifier : 0x1ecf75f50992b92b
     type_code : 103
     p_codes :
      -
        code : |1-
         procedure SettingEXE_ATOSResponse()
         
         	// Reset errors
         	XERROR()
         
         return m_sEXE_ATOSResponse
        type : 1966080
      -
        code : |1-
         procedure SettingEXE_ATOSResponse(Value)
         
         	// Reset errors
         	XERROR()
         
         	m_sEXE_ATOSResponse = Value
        type : 2031616
     template_refs : []
   -
     name : NameAtosSupplier
     identifier : 0x1ecf75f50993b92b
     type_code : 103
     p_codes :
      -
        code : |1-
         procedure NameAtosSupplier()
         
         	// Reset errors
         	XERROR()
         
         return m_sNameAtosSupplier
        type : 1966080
      -
        code : |1-
         procedure NameAtosSupplier(Value)
         
         	// Reset errors
         	XERROR()
         
         	m_sNameAtosSupplier = Value
        type : 2031616
     template_refs : []
   -
     name : AccountStartupPassword
     identifier : 0x1ecf75f50994b92b
     type_code : 103
     p_codes :
      -
        code : |1+
         procedure private AccountStartupPassword()
         
         	// Reset errors
         	XERROR()
         
         return DecryptStandard(D√©code(m_sPasswordAccountStartup,encodeBASE64NoCR),HashString(HA_MD5_128, "cbszi4q87q"), cryptAES256)
        type : 1966080
      -
        code : |1-
         procedure AccountStartupPassword(sNewPassword)
         
         	// Reset errors
         	XERROR()
         
         	m_sPasswordAccountStartup = Encode(EncryptStandard(sNewPassword,HashString(HA_MD5_128, "cbszi4q87q"), cryptAES256),encodeBASE64NoCR)
         	
        type : 2031616
     template_refs : []
   -
     name : AccountStartupUser
     identifier : 0x1ecf75f50995b92b
     type_code : 103
     p_codes :
      -
        code : |1-
         procedure AccountStartupUser()
         
         	// Reset errors
         	XERROR()
         
         return m_sUserAccountStartup
        type : 1966080
      -
        code : |1-
         procedure AccountStartupUser(sNewUser)
         
         	// Reset errors
         	XERROR()
         
         	m_sUserAccountStartup = sNewUser
        type : 2031616
     template_refs : []
   -
     name : IgnoreTestReturnPage
     identifier : 0x1ecf75f50996b92b
     type_code : 103
     p_codes :
      -
        code : |1-
         procedure IgnoreTestReturnPage()
         
         	// Reset errors
         	XERROR()
         
         return m_bIgnoreTestPaybackPage
        type : 1966080
      -
        code : |1-
         procedure IgnoreTestReturnPage(Value)
         
         	// Reset errors
         	XERROR()
         
         	m_bIgnoreTestPaybackPage = Value
        type : 2031616
     template_refs : []
   -
     name : DisplayFormat
     identifier : 0x1ecf75f50997b92b
     type_code : 103
     p_codes :
      -
        code : |1-
         procedure public DisplayFormat()
         
         return m_DisplayFormat
        type : 1966080
      -
        code : |1-
         procedure public DisplayFormat(Value)
         
         m_DisplayFormat=Value
        type : 2031616
     template_refs : []
   -
     name : AccessCode
     identifier : 0x1ecf75f50998b92b
     type_code : 103
     p_codes :
      -
        code : |1-
         procedure public AccessCode() : string
         
         return m_sPassword
        type : 1966080
      -
        code : |1-
         procedure public AccessCode(sValue is string)
         
         m_sPassword=sValue
        type : 2031616
     template_refs : []
   -
     name : SettingURL_SaferPayLanguage
     identifier : 0x1ecf75f50999b92b
     type_code : 103
     p_codes :
      -
        code : |1-
         procedure public SettingURL_SaferPayLanguage() : string
         
         return m_sURL_LANGUAGE_SAFERPAY
        type : 1966080
      -
        code : |1-
         procedure public SettingURL_SaferPayLanguage(sValue is string)
         
         m_sURL_LANGUAGE_SAFERPAY=sValue
        type : 2031616
     template_refs : []
   -
     name : SettingURL_SaferPayCheck
     identifier : 0x1ecf75f5099ab92b
     type_code : 103
     p_codes :
      -
        code : |1-
         procedure public SettingURL_SaferPayCheck() : string
         
         return m_sURL_SAFERPAY_CHECK
        type : 1966080
      -
        code : |1-
         procedure public SettingURL_SaferPayCheck(sValue is string)
         
         m_sURL_SAFERPAY_CHECK=sValue
        type : 2031616
     template_refs : []
   -
     name : SolutionIdentifier
     identifier : 0x1ecf75f5099bb92b
     type_code : 103
     p_codes :
      -
        code : |1-
         procedure public SolutionIdentifier() : string
         
         return m_sSolutionIdentifier
        type : 1966080
      -
        code : |1-
         procedure public SolutionIdentifier(sValue is string)
         
         m_sSolutionIdentifier=sValue
        type : 2031616
     template_refs : []
   -
     name : Sign
     identifier : 0x1ecf75f5099cb92b
     type_code : 103
     p_codes :
      -
        code : |1-
         procedure public Sign() : string
         
         return m_sCalculatedKey
        type : 1966080
      -
        code : |1-
         procedure public Sign(sValue is string)
         
         m_sCalculatedKey=sValue
        type : 2031616
     template_refs : []
   -
     name : Sign2
     identifier : 0x1ecf75f5099db92b
     type_code : 103
     p_codes :
      -
        code : |1-
         procedure public Sign2() : string
         
         return m_sMACKeyReturn
        type : 1966080
      -
        code : |1-
         procedure public Sign2(sValue is string)
         
         m_sMACKeyReturn=sValue
        type : 2031616
     template_refs : []
   -
     name : HTTP_IgnoreError
     identifier : 0x1ecf75f5099eb92b
     type_code : 103
     p_codes :
      -
        code : |1-
         procedure public HTTP_IgnoreError() : 8-byte int
         
         return m_nIgnoreHTTPError
        type : 1966080
      -
        code : |1-
         procedure public HTTP_IgnoreError(nValue is 8-byte int)
         
         m_nIgnoreHTTPError = nValue
        type : 2031616
     template_refs : []
   -
     name : HTTP_RequestMode
     identifier : 0x1ecf75f5099fb92b
     type_code : 103
     p_codes :
      -
        code : |1-
         procedure public HTTP_RequestMode() : int
         
         return m_nModeHTTPRequest
        type : 1966080
      -
        code : |1-
         procedure public HTTP_RequestMode(nValue is int)
         
         m_nModeHTTPRequest=nValue
        type : 2031616
     template_refs : []
   -
     name : HTTP_TimeOut
     identifier : 0x1ecf75f509a0b92b
     type_code : 103
     p_codes :
      -
        code : |1-
         procedure public HTTP_TimeOut() : int
         
         return m_nTimeOutHTTP
        type : 1966080
      -
        code : |1-
         procedure public HTTP_TimeOut(nValue is int)
         
         m_nTimeOutHTTP=nValue
        type : 2031616
     template_refs : []
   -
     name : HTTP_VersionSSL
     identifier : 0x1ecf75f509a1b92b
     type_code : 103
     p_codes :
      -
        code : |1-
         procedure public HTTP_VersionSSL() : int
         
         return m_nVersionSSL
        type : 1966080
      -
        code : |1-
         procedure public HTTP_VersionSSL(nValue is int)
         
         m_nVersionSSL=nValue
        type : 2031616
     template_refs : []
   -
     name : AlgorithmHash
     identifier : 0x1ecf75f509a2b92b
     type_code : 103
     p_codes :
      -
        code : |1-
         procedure public AlgorithmHash() : int
         
         return m_AlgorithmHash
        type : 1966080
      -
        code : |1-
         procedure public AlgorithmHash(nValue is int)
         
         m_AlgorithmHash=nValue
        type : 2031616
     template_refs : []
   -
     name : TokenAlgorithmHash
     identifier : 0x1ecf75f509a3b92b
     type_code : 103
     p_codes :
      -
        code : |1-
         procedure public TokenAlgorithmHash() : int
         
         return m_AlgorithmHashToken
        type : 1966080
      -
        code : |1-
         procedure public TokenAlgorithmHash(nValue is int)
         
         m_AlgorithmHashToken=nValue
        type : 2031616
     template_refs : []
   -
     name : SupplierName_SIPS2
     identifier : 0x1ecf75f509a4b92b
     type_code : 103
     p_codes :
      -
        code : |1-
         procedure public SupplierName_SIPS2() : string
         
         return m_sSupplierName_SIPS2
        type : 1966080
      -
        code : |1-
         procedure public SupplierName_SIPS2(sValue is string)
         
         m_sSupplierName_SIPS2=sValue
        type : 2031616
     template_refs : []
   -
     name : KeyVersion
     identifier : 0x1ecf75f509a5b92b
     type_code : 103
     p_codes :
      -
        code : |1-
         procedure public KeyVersion() : string
         
         return m_sKeyVersion
        type : 1966080
      -
        code : |1-
         procedure public KeyVersion(sValue is string)
         
         m_sKeyVersion=sValue
        type : 2031616
     template_refs : []
   -
     name : MerchantId
     identifier : 0x1ecf75f509a6b92b
     type_code : 103
     p_codes :
      -
        code : |1-
         procedure public MerchantId() : string
         
         return m_sIdentifier
        type : 1966080
      -
        code : |1-
         procedure public MerchantId(sValue is string)
         
         m_sIdentifier=sValue
        type : 2031616
     template_refs : []
   -
     name : SecretKey
     identifier : 0x1ecf75f509a7b92b
     type_code : 103
     p_codes :
      -
        code : |1-
         procedure public SecretKey() : string
         
         return m_sCalculatedKey
        type : 1966080
      -
        code : |1-
         procedure public SecretKey(sValue is string)
         
         m_sCalculatedKey=sValue
        type : 2031616
     template_refs : []
   -
     name : InterfaceVersion
     identifier : 0x1ecf75f509a8b92b
     type_code : 103
     p_codes :
      -
        code : |1-
         procedure public InterfaceVersion() : string
         
         return m_sInterfaceVersion
        type : 1966080
      -
        code : |1-
         procedure public InterfaceVersion(sValue is string)
         
         m_sInterfaceVersion=sValue
        type : 2031616
     template_refs : []
   -
     name : Account
     identifier : 0x1ecf75f509a9b92b
     type_code : 103
     p_codes :
      -
        code : |1-
         procedure public Account() : string
         
         return m_sContract
        type : 1966080
      -
        code : |1-
         procedure public Account(sValue is string)
         
         m_sContract=sValue
        type : 2031616
     template_refs : []
   -
     name : Site
     identifier : 0x1ecf75f509aab92b
     type_code : 103
     p_codes :
      -
        code : |1-
         procedure public Site() : string
         
         return m_sContract
        type : 1966080
      -
        code : |1-
         procedure public Site(sValue is string)
         
         m_sContract=sValue
        type : 2031616
     template_refs : []
   -
     name : ProtocolVersion
     identifier : 0x1ecf75f509abb92b
     type_code : 103
     p_codes :
      -
        code : |1-
         procedure public ProtocolVersion() : string
         
         return m_sInterfaceVersion
        type : 1966080
      -
        code : |1-
         procedure public ProtocolVersion(sValue is string)
         
         m_sInterfaceVersion=sValue
        type : 2031616
     template_refs : []
   -
     name : Key
     identifier : 0x1ecf75f509acb92b
     type_code : 103
     p_codes :
      -
        code : |1-
         procedure public Key() : string
         
         return m_sPassword
        type : 1966080
      -
        code : |1-
         procedure public Key(sValue is string)
         
         m_sPassword=sValue
        type : 2031616
     template_refs : []
   -
     name : DirectMode
     identifier : 0x1ecf75f509adb92b
     type_code : 103
     p_codes :
      -
        code : |1-
         procedure private DirectMode() : boolean
         
         return m_bDirectMode
        type : 1966080
      -
        code : |1-
         procedure private DirectMode(bValue is boolean)
         
         m_bDirectMode=bValue
         COL_SECUREPAYMENT.gbDirectMode = m_bDirectMode
         
         BuildProviderURL()
        type : 2031616
     template_refs : []
   -
     name : CardNumber
     identifier : 0x1ecf75f509aeb92b
     type_code : 103
     p_codes :
      -
        code : |1-
         procedure public CardNumber() : string
         
         return m_sCard_Number
        type : 1966080
      -
        code : |1-
         procedure public CardNumber(sValue is string)
         //Reset token
         m_sCard_Token = ""
         m_sCard_Number=sValue
        type : 2031616
     template_refs : []
   -
     name : CardCVV
     identifier : 0x1ecf75f509afb92b
     type_code : 103
     p_codes :
      -
        code : |1-
         procedure public CardCVV() : string
         
         return m_sCard_CVV
        type : 1966080
      -
        code : |1-
         procedure public CardCVV(sValue is string)
         
         m_sCard_CVV=sValue
        type : 2031616
     template_refs : []
   -
     name : CardExpiryDate
     identifier : 0x1ecf75f509b0b92b
     type_code : 103
     p_codes :
      -
        code : |1-
         procedure public CardExpiryDate() : string
         
         return m_sCard_ExpiryDate
        type : 1966080
      -
        code : |1-
         procedure public CardExpiryDate(sValue is string)
         
         m_sCard_ExpiryDate=sValue
        type : 2031616
     template_refs : []
   -
     name : CardToken
     identifier : 0x1ecf75f509b1b92b
     type_code : 103
     p_codes :
      -
        code : |1-
         procedure public CardToken() : string
         
         return m_sCard_Token
        type : 1966080
      -
        code : |1-
         procedure public CardToken(sValue is string)
         // Reset card number
         m_sCard_Number = ""
         
         m_sCard_Token=sValue
        type : 2031616
     template_refs : []
   -
     name : CardRemember
     identifier : 0x1ecf75f509b2b92b
     type_code : 103
     p_codes :
      -
        code : |1-
         procedure public CardRemember() : boolean
         
         return m_bCard_Remember
        type : 1966080
      -
        code : |1-
         procedure public CardRemember(bValue is boolean)
         
         m_bCard_Remember=bValue
        type : 2031616
     template_refs : []
   -
     name : SubsReference
     identifier : 0x1ecf75f509b3b92b
     type_code : 103
     p_codes :
      -
        code : |1-
         procedure public SubsReference()
         
         return m_sCard_SubscriptionReference
        type : 1966080
      -
        code : |1-
         procedure public SubsReference(Value)
         
         m_sCard_SubscriptionReference=Value
        type : 2031616
     template_refs : []
   -
     name : no33DS
     identifier : 0x1ecf75f509b4b92b
     type_code : 103
     p_codes :
      -
        code : |1-
         
        type : 1966080
      -
        code : |1-
         
        type : 2031616
     template_refs : []
   -
     name : Mode3DS
     identifier : 0x1ecf75f509b5b92b
     type_code : 103
     p_codes :
      -
        code : |1-
         procedure public Mode3DS() : boolean
         
         return m_bMode3DS
        type : 1966080
      -
        code : |1-
         procedure public Mode3DS(bValue is boolean)
         
         m_bMode3DS=bValue
        type : 2031616
     template_refs : []
   -
     name : PageReturn3DSecure
     identifier : 0x1ecf75f509b6b92b
     type_code : 103
     p_codes :
      -
        code : |1-
         procedure public PageReturn3DSecure() : string
         
         return PageBackToStore
        type : 1966080
      -
        code : |1-
         procedure public PageReturn3DSecure(sValue is string)
         
         PageBackToStore=sValue
        type : 2031616
     template_refs : []
   -
     name : End3DSecure
     identifier : 0x1ecf75f509b7b92b
     type_code : 103
     p_codes :
      -
        code : |1-
         procedure public End3DSecure() : string
         
         return OnPaymentValidation
        type : 1966080
      -
        code : |1-
         procedure public End3DSecure(sValue is string)
         
         OnPaymentValidation=sValue
         OnPaymentCancelation=sValue
         OnPaymentRefusal=sValue
         OnServerCall=sValue
        type : 2031616
     template_refs : []
   -
     name : ReturnS2SEnGET
     identifier : 0x1ecf75f509b8b92b
     type_code : 103
     p_codes :
      -
        code : |1-
         procedure public ReturnS2SEnGET() : boolean
         
         return m_bReturnS2sGet
        type : 1966080
      -
        code : |1-
         procedure public ReturnS2SEnGET(bValue is boolean)
         
         m_bReturnS2sGet=bValue
        type : 2031616
     template_refs : []
   -
     name : SendtransactionReference
     identifier : 0x1ecf75f509b9b92b
     type_code : 103
     p_codes :
      -
        code : |1-
         procedure public SendtransactionReference() : boolean
         
         return m_btransactionReference
        type : 1966080
      -
        code : |1-
         procedure public SendtransactionReference(bValue is boolean)
         
         m_btransactionReference=bValue
        type : 2031616
     template_refs : []
   -
     name : FolderPublicKeyFile
     identifier : 0x1ecf75f509bab92b
     type_code : 103
     p_codes :
      -
        code : |1-
         procedure public FolderPublicKeyFile() : string
         
         return m_sDirectoryPublicKeyFile
        type : 1966080
      -
        code : |1-
         procedure public FolderPublicKeyFile(sValue is string)
         
         m_sDirectoryPublicKeyFile=sValue
        type : 2031616
     template_refs : []
   -
     name : Amount
     identifier : 0x1ecf75f509bbb92b
     type_code : 103
     p_codes :
      -
        code : |1-
         procedure public Amount() : currency
         
         return m_cyAmount
        type : 1966080
      -
        code : |1-
         procedure public Amount(cyValue is currency)
         
         m_cyAmount=cyValue
        type : 2031616
     template_refs : []
  procedure_templates : []
  property_templates : []
 code_parameters :
  internal_properties : CAAAAAgAAACVGQgYbalU7DKC3oH4ItDrjtcTHXXV/EuH8q0IbhyQlw==
  original_name : PaiementS√©curis√©
resources :
 string_res :
  identifier : 0x19a7e5430008b565
  internal_properties : CAAAAAgAAACm76HWfKGWp33VjXInA4cRlqArlgTTA862QGt72W2ld5Y=
  strings :
   -
     text :
      en-GB : "#########################################################################\r\n#\r\n#\tPathfile \r\n#\r\n#\tList of parameters files used by the payment module\r\n#\r\n#########################################################################\r\n#\r\n#\r\n#-------------------------------------------------------------------------\r\n# Activation (YES) / Deactivation (NO) of DEBUG mode\r\n#-------------------------------------------------------------------------\r\n#\r\nDEBUG!%2!\r\n#\r\n# ------------------------------------------------------------------------\r\n# Path to the directory of logos from the web alias  \r\n# Example for the www.merchant.com/%5/payment/logo/ directory\r\n# indicate:\r\n# ------------------------------------------------------------------------\r\n#\r\nD_LOGO!%3!\r\n#\r\n# --------------------------------------------------------------------------\r\n#  Parameter files linked to the %5 API\t\r\n# --------------------------------------------------------------------------\r\n#\r\n# vendor certicate\r\n#\r\nF_CERTIFICATE!%1certif!\r\n#\r\n# vendor parameter file\r\n#\r\nF_PARAM!%1parmcom!\r\n#\r\n# parameter file %5\r\n#\r\nF_DEFAULT!%1parmcom.%5!\r\n#\r\n#########################################################################\r\n# End of file\r\n#########################################################################\r\n\r\n"
      fr-FR : "#########################################################################\r\n#\r\n#\tPathfile \r\n#\r\n#\tListe fichiers parametres utilises par le module de paiement\r\n#\r\n#########################################################################\r\n#\r\n#\r\n#-------------------------------------------------------------------------\r\n# Activation (YES) / D√©sactivation (NO) du mode DEBUG\r\n#-------------------------------------------------------------------------\r\n#\r\nDEBUG!%2!\r\n#\r\n# ------------------------------------------------------------------------\r\n# Chemin vers le r√©pertoire des logos depuis le web alias  \r\n# Exemple pour le r√©pertoire www.merchant.com/%5/payment/logo/\r\n# indiquer:\r\n# ------------------------------------------------------------------------\r\n#\r\nD_LOGO!%3!\r\n#\r\n# --------------------------------------------------------------------------\r\n#  Fichiers param√®tres li√©s a l'api %5 paiement\t\r\n# --------------------------------------------------------------------------\r\n#\r\n# certicat du commercant\r\n#\r\nF_CERTIFICATE!%1certif!\r\n#\r\n# fichier param√®tre commercant\r\n#\r\nF_PARAM!%1parmcom!\r\n#\r\n# fichier des param√®tres %5\r\n#\r\nF_DEFAULT!%1parmcom.%5!\r\n#\r\n#########################################################################\r\n# End of file\r\n#########################################################################\r\n\r\n"
     index : 0
   -
     text :
      en-GB : "###############################################################################\r\n#\r\n#\tParameter file of the merchant\r\n#\r\n#\tNote:\tThe merchant is entirely responsible\r\n#\t\t\t\tfor this parameter file\r\n#\r\n###############################################################################\r\n\r\n# Logo of the merchant (it is displayed in the top left corner of the payment pages)\r\n\r\nLOGO!!\r\n\r\n# URL for automatic return of payment response\r\n\r\n#AUTO_RESPONSE_URL!%1!\r\n\r\n# URL for return further to a refused payment\r\n\r\nCANCEL_URL!%2!\r\n\r\n# URL for return further to an accepted payment\r\n\r\nRETURN_URL!%3!\r\n\r\n\r\n# END OF FILE\r\n\r\n\r\n"
      fr-FR : "###############################################################################\r\n#\r\n#\tFichier des parametres du commercant\r\n#\r\n#\tRemarque :\tCe fichier param√®tre est sous la responsabilit√© du\r\n#\t\t\t\tcommercant\r\n#\r\n###############################################################################\r\n\r\n# Logo du commercant (il apparait en haut a gauche des pages de paiement)\r\n\r\nLOGO!!\r\n\r\n# URL de retour automatique de la reponse du paiement\r\n\r\n#AUTO_RESPONSE_URL!%1!\r\n\r\n# URL de retour suite a paiement refuse\r\n\r\nCANCEL_URL!%2!\r\n\r\n# URL de retour suite a paiement accepte\r\n\r\nRETURN_URL!%3!\r\n\r\n\r\n# END OF FILE\r\n\r\n\r\n"
     index : 1
   -
     text :
      en-GB : "The directory <%1> does not contain the expected elements:\r\n - a certificate file \"certif.fr.<idnumber>\" (example: \"certif.fr.013044876511111\")\r\nThis file contains encrypted information provided by the bank\r\n- a configuration file \"paramcom.<idnumber>\" (example: \"parmcom.013044876511111\")\r\nThis file contains customized information about the seller to modify/configure:\r\n\t* payment currency (978 for Euro): CURRENCY!978!\r\n\t* Payment methods accepted: PAYMENT_MEANS!CB, 2, VISA, 2, MASTERCARD, 2!\r\n - a configuration file specific to the bank \"parmcom.<solutionname>\" (example: parmcom.mercanet or parmcom.e-transactions...):\r\nThis file contains configuration information that is specific to the bank. Generally, it must not be modified\r\n"
      fr-FR : "Le r√©pertoire <%1> ne contient les les √©l√©ments attendus :\r\n - un fichier certificat \"certif.fr.<numeroidentifiant>\" (exemple : \"certif.fr.013044876511111\")\r\nC'est un fichier contenant des informations crypt√©es fournies par la banque\r\n- un fichier de param√©trage \"paramcom.<numeroidentifiant>\" (exemple : \"parmcom.013044876511111\")\r\nCe fichier contient des informations sp√©cifiques du commer√ßant qu'il faut personnaliser/param√©trer :\r\n\t* la devise de paiement (978 pour l'Euro) : CURRENCY!978!\r\n\t* Les moyens de paiement accept√©s : PAYMENT_MEANS!CB,2,VISA,2,MASTERCARD,2!\r\n - un fichier de param√©trage sp√©cifique √† la banque \"parmcom.<nomsolution>\" (exemple : parmcom.mercanet ou parmcom.e-transactions...) :\r\nCe fichier contient des informations de param√©trage sp√©cifiques √† la banque, il ne faut normalement pas le modifier\r\n"
     index : 2
   -
     text :
      en-GB : The digital seal does not correspond
      fr-FR : Le sceau num√©rique ne correspond pas
     index : 3
   -
     text :
      en-GB : "The path <%1> contains space characters and the disk of this path does not support short names. However, ATOS payment requires a full path without spaces.\r\nMove the elements to a folder without spaces.\r\nAnother solution is to switch your account to ATOS SIPS2 payment, please make sure your account allows you to do so."
      fr-FR : "Le chemin <%1> contient des espaces et le disque de ce chemin ne g√®re pas les noms courts, ors le paiement ATOS n√©cessite un chemin complet sans espace.\r\nD√©placez les √©l√©ments dans un dossier sans espace. \r\nUne autre solution est de basculer votre compte sur le paiement ATOS SIPS2, v√©rifiez si votre compte vous le permet."
     index : 4
custom_note :
 internal_properties : CAAAAAgAAABtB9HWVzrXO2+4NDRVK0vmzaNKrCKqH1DBX30lMmGZ
